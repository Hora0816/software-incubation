    _____ ________    __________  __  _______     __    ________  ____  ___    ______  __
   / ___// ____/ /   / ____/ __ )/ / / / ___/    / /   /  _/ __ )/ __ \/   |  / __ \ \/ /
   \__ \/ __/ / /   / /_  / __  / / / /\__ \    / /    / // __  / /_/ / /| | / /_/ /\  / 
  ___/ / /___/ /___/ __/ / /_/ / /_/ /___/ /   / /____/ // /_/ / _, _/ ___ |/ _, _/ / /  
 /____/_____/_____/_/   /_____/\____//____/   /_____/___/_____/_/ |_/_/  |_/_/ |_| /_/   

Selfbus Library für LPC922/LPC936
=================================
Version 1.56

Compiler Optionen:
------------------
LOCK_VD_VERSION   Schreibschutz auf Adresse 0x0101-0x0107, verhindert das Überschreiben der Hersteller ID, Geräte ID und VD Version.
LOCK_DEVICE_ID    Schreibschutz auf Adresse 0x0101-0x0106, verhindert das Überschreiben der Hersteller ID und Geräte ID.
				  LOCK_VD_VERSION ist dominant falls beide Lock-Optionen gleichzeitig aktiv sein sollten. Falls die ETS versucht
				  auf die gesperrten Speicherstellen zu schreiben, bricht der Download Vorgang mit einer Fehlermeldung ab.
				  Somit lässt sich das Parametrieren mit einer inkompatiblen VD, bzw. VD Version über den Bus verhindern.

ADC_RESPONSE      Aktiviert die Unterstützung für ADCRead und ADCResponse PDUs. Es wird ein fiktiver Wert für die Bus Spannung
                  und den PEI-Type gesendet und somit das Auslesen der Geräte Info massiv beschleunigt.


Globale Variablen, die in der Applikation abgefragt oder geändert werden können:

Bitvariablen:
-------------

ack			wird gesetzt, wenn ein ACK vom Bus empfangen wurde, muss durch die app
			zurückgesetzt werden, wird auch bei Sendebeginn eines Telegramms zurückgesetzt,
			Wert nach hw_restart: 0
			
nack		für NACK, ansonsten s. ack

tel_arrived	wird gesetzt, wenn ein Telegramm empfangen wurde und das Gerät adressiert ist,
			das ist dann der Fall, wenn die Gruppenadresse bekannt ist oder die eigene
			physikalische Adresse das Ziel war oder wenn es ein Broadcast-Telegramm war,
			muss durch die app zurückgesetzt werden, in der Regel ruft die app bei gesetztem
			Bit die Funktion process_tel() auf, die das Bit dann zurücksetzt, Wert nach
			hw_restart: 0
			siehe auch "transparency"
			
auto_ack	wenn gesetzt, werden empfangene Telegramme geprüft, ob sie für das Gerät
			gemeint waren, daraufhin wird ein ACK oder NACK automatisch gesendet, Wert
			nach hw_restart: 1

interrupted	wird gesetzt wenn entweder der externe interrupt oder timer1 interrupt aufgerufen wird,
			muss in der app zurückgesetzt werden
		
transparency	0: (ab 1.54 entfernt) nur Gruppentelegramme mit einer eigenen GA werden per tel_arrived angekündigt (default)
				1: alle Gruppentelegramme werden angekündigt
				Diese Variable kann bei Bedarf in der restart_app() gesetzt werden

			
unsigned char Variablen:
------------------------

telegramm[23]	Array in dem ein empfangenes oder zu sendendes Telegramm abgelegt wird, 
				sollte in der app nur gelesen werden, hier ist das Telegramm Byte für
				Byte transparent abgelegt, empfangene ACK oder NACK werden hier nicht
				abgelegt
				
telpos			Zeiger auf die nächste freie Position im Array telegramm[], sollte durch
				die app nicht verändert werden

tx_buffer[8]	Ringspeicher für zu sendende Telegramme, hier werden die Objektnummern
				oder Pseudo-Objektnummernn abgelegt und nach FIFO gesendet, sollte durch
				die app nicht direkt beschrieben werden, s. Beschreibung zum Senden weiter
				unten
			
tx_nextwrite	Position der nächsten freien Position in tx_buffer[]

tx_nextsend		Position der nächsten zu sendenden Position in tx_buffer[]

fb_state		Status der Statemachine, sollte in der app nur gelesen werden, Beschreibung
				s. unten, in der Regel wird durch die app nur der Zustand abgefragt um
				festzustellen ob das System beschäftigt oder idle(=0) ist
				
timeout_count	ist >0 wenn nach dem Empfangen oder Senden die obligatorische Pause eingehalten
				wird, wenn 0 dann ist der Bus frei
				
status60		hierhin werden read_memory und write_memory Operationen auf die Speicheradresse
				0x0060 umgeleitet, das ist im sog. USERRAM und entspricht dem Statusbyte,
				Beschreibung s. bcu1_help.pdf
				
eeprom[255]		ist ein Bereich im Flash, der nur gelesen werden kann, entspricht dem sog.
				EEPROM Bereich von 0x0100 bis 0x01FF (s. bcu1_help.pdf), zum Schreiben
				muß der Flashbereich 0x1D00 bis 0x1DFF geflasht werden, dazu stehen Makros
				zur Verfügung (s.u.)
				
userram[255]	entfallen da er nicht mehr benötigt wurde, sowie um Flash freizugeben


Funktionen in der Library:
--------------------------

void X1_int(void)		wird bei Beginn des Startbits am Bus aufgerufen durch externen
						Interrupt 1, nicht in app verwenden!
						
void T1_int(void)		wird durch Timer 1 Interrupt aufgerufen, nicht in app verwenden !

void init_rx(void)		setzt die statemachine in den Anfangszustand, d.h. der Empfang
						ist aktiv, wird als Abschluss der hw_restart() aufgerufen
						
void init_tx(void)		startet unmittelbar das Senden, nicht in app verwenden!

void init_repeat_tx(void)	
						wird nach dem Senden für das eventuelle Wiederholte Senden
						gestartet, nicht in app verwenden!
							
unsigned char gapos_in_gat(unsigned char gah, unsigned char gal)
						sucht zu einer Gruppenadresse (gah=MSB, gal=LSB) den Eintrag in
						der group_adress_table und gibt die Position des Eintrages zurück
						
bit build_mctel(unsigned char objno)
						erzeugt ein Telegramm im Array telegramm[], nicht in APP verwenden!
						
unsigned int find_ga(unsigned char objno)
						findet in der Assoziationstabelle die erste Gruppenadresse, die der
						Objektnummer(objno) zugeordnet ist, dient zum Senden eines
						Objektzustandes, gibt die Gruppenadresse zurück bzw. 0x0000 falls
						keine gefunden wurde
						
unsigned char read_obj_type(unsigned char objno)
						gibt den Objekttyp aus der Kommunikationsobjekttabelle zurück
						
bit send_obj_value(unsigned char objno)
						mit diesem Funktionsaufruf wird ein Telegramm gesendet, objno ist
						entweder die Objektnummer, dann wird der Objektwert des Objektes als 
						EIS Telegramm gesendet, addiert man 0x40 zur Objektnummer wird
						der Objektwert als read_request_response Telegramm gesendet, 
						Objektnummern größer 128 sind Systemtelegramme und brauchen von der
						app nicht verwendet werden
						Rückgabewert =1 wenn erfolgreich, sonst =0
					
void set_timer0(unsigned int deltime)
						startet Timer 0 mit dem übergebenen Wert, die Zeit bis zum Überlauf
						sind 0,27127µs x deltime plus 12µs für den Aufruf an sich, der Timer 0 
						ist ausschliesslich für die app reserviert

*** die RTC Funktionen sind entfallen, s.u. "Verwendung der Timer" ***

void restart_hw(void)	setzt das gesamte system in den Ausgangszustand zurück und initiiert
						das Empfangen
						
void process_tel(void)	wenn die app die Bitvariable tel_arrived ausgewertet hat, sollte
						diese Funktion aufgerufen werden, es werden alle Telegramm-Typen
						analysiert und die Unicast und Broadcast Telegramme direkt
						abgearbeitet, wenn es ein Multicast Telegramm war, dann wird
						entweder die Funktion read_value_req(objectnomber) oder write_value_req(objectnomber)
						in der app aufgerufen
						
void write_memory(void)	Funktion zum Speicher schreiben bei Unicast, wird für app nicht
						gebraucht (entfallen)
						
void set_pa(void)		Funktion zum Schreiben der phys. Adr. bei Unicast, wird für app nicht
						gebraucht(entfallen)
						
unsigned char read_objflags(unsigned char objno)
						liest die Objektflags eines Objektes (Lesen, Schreiben, Kommunikation,
						etc.)
						
unsigned char find_first_objno(unsigned char gah, unsigned char gal)
						findet die erste vorkommende Objektnummer zu einer Gruppenadresse
						(entfallen)

Folgende Funktionen müssen in der app vorhanden sein, da sie von der Library aufgerufen werden:
-----------------------------------------------------------------------------------------------

void write_value_req(objno)
						wird beim eintreffen eines Multicast Telegrammes vom Typ 
						write_value_request aufgerufen, die app muss hier die entsprechende
						Aktion veranlassen, die dazu nötigen Daten lassen sich aus
						telegramm[] entnehmen 

void read_value_req(objno)
						wird beim eintreffen eines Multicast Telegrammes vom Typ 
						read_value_request aufgerufen, die app muss hier die entsprechende
						Aktion veranlassen, die dazu nötigen Daten lassen sich aus
						telegramm[] entnehmen.
						
unsigned long read_obj_value(unsigned char objno)
						muss den Wert eines Objektes zurückgeben
						
void restart_app(void)	muß die Applikations Variablen zurücksetzen
						
			
Senden eines Telegrammes aus der app:
-------------------------------------

Man ermittelt die Objektnummer dessen Wert gesendet werden soll. Es ist sicherzustellen, daß
man den Wert des Objektes vorher so gespeichert hat, daß read_obj_value() ihn ausgeben kann. Dann wird einfach
die Funktion __bit send_obj_value(objno) aufgerufen. Das Senden erfolgt komplett im 
Hintergrund. Man kann also ruhig mehrere Telegramme direkt hintereinander senden. Der
Ringspeicher reicht für 7 Telegramme, was im Normalfall völlig ausreicht. Sollten doch
einmal mehr als 7 Telegramme gesendet werden, kann man das zurückgelieferte bit(succes) abfragen
und bei 0 wiederholen.


Zeitverhalten der Library:
--------------------------

Alle Funktionen werden per Interrupt aufgerufen. Die App muß also damit umgehen können, daß
zeitweise alle 35µs eine kurze Unterbrechung erfolgt, die im Bereich einiger µs liegt. Wenn keine 
Busaktivität ist, also nach timeout, werden diese Unterbrechungen gestoppt. 
In zwei Fällen wird ins Flash geschrieben und der Controller wird für 4ms in den Idle-Zustand
vesetzt: 
- bei memory_write Operationen, z.B. beim Programmieren der Parameter und Gruppenadressen
  durch ETS
- beim Schreiben der physikalischen Adresse durch ETS 
Diese langen Unterbrechungen erfolgen also nur beim Programmieren, im Normalbetrieb ist
kommt das nicht vor.


Verwendung der Timer:
---------------------

Timer 0	wird als 16-bit timer parametriert, wird von der lib nicht benutzt und steht
		somit exclusiv der app zur Verfügung, kann dort auch anders parametriert werden

Timer 1	ist ausschliesslich für die lib, nicht in app verwenden

RTC		wird mit 65ms gestartet, wird in der lib nicht verwendet, kann also in der
		app beliebig verändert werden
		Starten der RTC:		RTCH=0x1D;		// Real Time Clock auf 130ms laden (0,13s x 7372800 / 128)
								RTCL=0x40;		// (RTC ist ein down-counter mit 128 bit prescaler und osc-clock)
								RTCCON=0x61;	// ... und starten
		Stoppen der RTC:		RTCCON=0x60;	// Real Time Clock stoppen


Interrupts:
-----------

Der externe Int1 und der Timer1-Int. werden bei Bedarf aktiviert und sollten nicht in der app 
verändert werden. Alle anderen Int's sind inaktiv, EA ist aber gesetzt. Der externe Int1 hat die
höchste Priorität (3), alle anderen die niedrigste (0). Kann in de app geändert werden, aber
ext. Int1 muss die höchste haben! Danach sollte dann Timer1 folgen.


==> comments to kubi, thx!
