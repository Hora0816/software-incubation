                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.1.0 #7066 (Nov 22 2011) (MINGW32)
                              4 ; This file was generated Sun Aug 21 16:18:17 2016
                              5 ;--------------------------------------------------------
                              6 	.module fb_lpc922
                              7 	.optsdcc -mmcs51 --model-small
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _priotable
                             13 	.globl _eeprom
                             14 	.globl _read_obj_value
                             15 	.globl _read_value_req
                             16 	.globl _write_value_req
                             17 	.globl _P3_1
                             18 	.globl _P3_0
                             19 	.globl _P1_7
                             20 	.globl _P1_6
                             21 	.globl _P1_5
                             22 	.globl _P1_4
                             23 	.globl _P1_3
                             24 	.globl _P1_2
                             25 	.globl _P1_1
                             26 	.globl _P1_0
                             27 	.globl _P0_7
                             28 	.globl _P0_6
                             29 	.globl _P0_5
                             30 	.globl _P0_4
                             31 	.globl _P0_3
                             32 	.globl _P0_2
                             33 	.globl _P0_1
                             34 	.globl _P0_0
                             35 	.globl _I2CON_0
                             36 	.globl _I2CON_2
                             37 	.globl _I2CON_3
                             38 	.globl _I2CON_4
                             39 	.globl _I2CON_5
                             40 	.globl _I2CON_6
                             41 	.globl _SCON_7
                             42 	.globl _SCON_6
                             43 	.globl _SCON_5
                             44 	.globl _SCON_4
                             45 	.globl _SCON_3
                             46 	.globl _SCON_2
                             47 	.globl _SCON_1
                             48 	.globl _SCON_0
                             49 	.globl _IP0_0
                             50 	.globl _IP0_1
                             51 	.globl _IP0_2
                             52 	.globl _IP0_3
                             53 	.globl _IP0_4
                             54 	.globl _IP0_5
                             55 	.globl _IP0_6
                             56 	.globl _IP1_0
                             57 	.globl _IP1_1
                             58 	.globl _IP1_2
                             59 	.globl _IP1_6
                             60 	.globl _IEN1_0
                             61 	.globl _IEN1_1
                             62 	.globl _IEN1_2
                             63 	.globl _IEN0_0
                             64 	.globl _IEN0_1
                             65 	.globl _IEN0_2
                             66 	.globl _IEN0_3
                             67 	.globl _IEN0_4
                             68 	.globl _IEN0_5
                             69 	.globl _IEN0_6
                             70 	.globl _IEN0_7
                             71 	.globl _TCON_0
                             72 	.globl _TCON_1
                             73 	.globl _TCON_2
                             74 	.globl _TCON_3
                             75 	.globl _TCON_4
                             76 	.globl _TCON_5
                             77 	.globl _TCON_6
                             78 	.globl _TCON_7
                             79 	.globl _PSW_7
                             80 	.globl _PSW_6
                             81 	.globl _PSW_5
                             82 	.globl _PSW_4
                             83 	.globl _PSW_3
                             84 	.globl _PSW_2
                             85 	.globl _PSW_1
                             86 	.globl _PSW_0
                             87 	.globl _IEN1
                             88 	.globl _IP0H
                             89 	.globl _WFEED2
                             90 	.globl _WFEED1
                             91 	.globl _WDL
                             92 	.globl _WDCON
                             93 	.globl _TRIM
                             94 	.globl _TAMOD
                             95 	.globl _SSTAT
                             96 	.globl _RTCL
                             97 	.globl _RTCH
                             98 	.globl _RTCCON
                             99 	.globl _RSTSRC
                            100 	.globl _PT0AD
                            101 	.globl _PCONA
                            102 	.globl _P3M2
                            103 	.globl _P3M1
                            104 	.globl _P1M2
                            105 	.globl _P1M1
                            106 	.globl _P0M2
                            107 	.globl _P0M1
                            108 	.globl _KBPATN
                            109 	.globl _KBMASK
                            110 	.globl _KBCON
                            111 	.globl _IP1H
                            112 	.globl _IP1
                            113 	.globl _I2STAT
                            114 	.globl _I2SCLL
                            115 	.globl _I2SCLH
                            116 	.globl _I2DAT
                            117 	.globl _I2CON
                            118 	.globl _I2ADR
                            119 	.globl _FMDATA
                            120 	.globl _FMCON
                            121 	.globl _FMADRL
                            122 	.globl _FMADRH
                            123 	.globl _DIVM
                            124 	.globl _CMP2
                            125 	.globl _CMP1
                            126 	.globl _BRGCON
                            127 	.globl _BRGR1
                            128 	.globl _BRGR0
                            129 	.globl _SADEN
                            130 	.globl _SADDR
                            131 	.globl _AUXR1
                            132 	.globl _SBUF
                            133 	.globl _SCON
                            134 	.globl _IP0
                            135 	.globl _IEN0
                            136 	.globl _TH1
                            137 	.globl _TH0
                            138 	.globl _TL1
                            139 	.globl _TL0
                            140 	.globl _TMOD
                            141 	.globl _TCON
                            142 	.globl _PCON
                            143 	.globl _DPH
                            144 	.globl _DPL
                            145 	.globl _SP
                            146 	.globl _B
                            147 	.globl _ACC
                            148 	.globl _PSW
                            149 	.globl _P3
                            150 	.globl _P1
                            151 	.globl _P0
                            152 	.globl _telegramm_ok
                            153 	.globl _inc_pcount
                            154 	.globl _connected
                            155 	.globl _send_nack
                            156 	.globl _send_ack
                            157 	.globl _wait_for_ack
                            158 	.globl _fbtx_bit
                            159 	.globl _auto_ack
                            160 	.globl _tel_sent
                            161 	.globl _tel_arrived
                            162 	.globl _its_me
                            163 	.globl _nack
                            164 	.globl _ack
                            165 	.globl _fb_parity
                            166 	.globl _interrupted
                            167 	.globl _parity_ok
                            168 	.globl _connected_timeout
                            169 	.globl _status60
                            170 	.globl _tx_nextsend
                            171 	.globl _tx_nextwrite
                            172 	.globl _RAM
                            173 	.globl _repeat_count
                            174 	.globl _fb_state
                            175 	.globl _fb_pattern
                            176 	.globl _fbrx_byte
                            177 	.globl _cs
                            178 	.globl _telpos
                            179 	.globl _tx_buffer
                            180 	.globl _telegramm
                            181 	.globl _senders_pcount
                            182 	.globl _mem_adrl
                            183 	.globl _mem_adrh
                            184 	.globl _mem_length
                            185 	.globl _pcount
                            186 	.globl _conl
                            187 	.globl _conh
                            188 	.globl _X1_int
                            189 	.globl _T1_int
                            190 	.globl _init_rx
                            191 	.globl _init_tx
                            192 	.globl _gapos_in_gat
                            193 	.globl _send_obj_value
                            194 	.globl _process_tel
                            195 	.globl _read_objflags
                            196 	.globl _restart_hw
                            197 ;--------------------------------------------------------
                            198 ; special function registers
                            199 ;--------------------------------------------------------
                            200 	.area RSEG    (ABS,DATA)
   0000                     201 	.org 0x0000
                    0080    202 G$P0$0$0 == 0x0080
                    0080    203 _P0	=	0x0080
                    0090    204 G$P1$0$0 == 0x0090
                    0090    205 _P1	=	0x0090
                    00B0    206 G$P3$0$0 == 0x00b0
                    00B0    207 _P3	=	0x00b0
                    00D0    208 G$PSW$0$0 == 0x00d0
                    00D0    209 _PSW	=	0x00d0
                    00E0    210 G$ACC$0$0 == 0x00e0
                    00E0    211 _ACC	=	0x00e0
                    00F0    212 G$B$0$0 == 0x00f0
                    00F0    213 _B	=	0x00f0
                    0081    214 G$SP$0$0 == 0x0081
                    0081    215 _SP	=	0x0081
                    0082    216 G$DPL$0$0 == 0x0082
                    0082    217 _DPL	=	0x0082
                    0083    218 G$DPH$0$0 == 0x0083
                    0083    219 _DPH	=	0x0083
                    0087    220 G$PCON$0$0 == 0x0087
                    0087    221 _PCON	=	0x0087
                    0088    222 G$TCON$0$0 == 0x0088
                    0088    223 _TCON	=	0x0088
                    0089    224 G$TMOD$0$0 == 0x0089
                    0089    225 _TMOD	=	0x0089
                    008A    226 G$TL0$0$0 == 0x008a
                    008A    227 _TL0	=	0x008a
                    008B    228 G$TL1$0$0 == 0x008b
                    008B    229 _TL1	=	0x008b
                    008C    230 G$TH0$0$0 == 0x008c
                    008C    231 _TH0	=	0x008c
                    008D    232 G$TH1$0$0 == 0x008d
                    008D    233 _TH1	=	0x008d
                    00A8    234 G$IEN0$0$0 == 0x00a8
                    00A8    235 _IEN0	=	0x00a8
                    00B8    236 G$IP0$0$0 == 0x00b8
                    00B8    237 _IP0	=	0x00b8
                    0098    238 G$SCON$0$0 == 0x0098
                    0098    239 _SCON	=	0x0098
                    0099    240 G$SBUF$0$0 == 0x0099
                    0099    241 _SBUF	=	0x0099
                    00A2    242 G$AUXR1$0$0 == 0x00a2
                    00A2    243 _AUXR1	=	0x00a2
                    00A9    244 G$SADDR$0$0 == 0x00a9
                    00A9    245 _SADDR	=	0x00a9
                    00B9    246 G$SADEN$0$0 == 0x00b9
                    00B9    247 _SADEN	=	0x00b9
                    00BE    248 G$BRGR0$0$0 == 0x00be
                    00BE    249 _BRGR0	=	0x00be
                    00BF    250 G$BRGR1$0$0 == 0x00bf
                    00BF    251 _BRGR1	=	0x00bf
                    00BD    252 G$BRGCON$0$0 == 0x00bd
                    00BD    253 _BRGCON	=	0x00bd
                    00AC    254 G$CMP1$0$0 == 0x00ac
                    00AC    255 _CMP1	=	0x00ac
                    00AD    256 G$CMP2$0$0 == 0x00ad
                    00AD    257 _CMP2	=	0x00ad
                    0095    258 G$DIVM$0$0 == 0x0095
                    0095    259 _DIVM	=	0x0095
                    00E7    260 G$FMADRH$0$0 == 0x00e7
                    00E7    261 _FMADRH	=	0x00e7
                    00E6    262 G$FMADRL$0$0 == 0x00e6
                    00E6    263 _FMADRL	=	0x00e6
                    00E4    264 G$FMCON$0$0 == 0x00e4
                    00E4    265 _FMCON	=	0x00e4
                    00E5    266 G$FMDATA$0$0 == 0x00e5
                    00E5    267 _FMDATA	=	0x00e5
                    00DB    268 G$I2ADR$0$0 == 0x00db
                    00DB    269 _I2ADR	=	0x00db
                    00D8    270 G$I2CON$0$0 == 0x00d8
                    00D8    271 _I2CON	=	0x00d8
                    00DA    272 G$I2DAT$0$0 == 0x00da
                    00DA    273 _I2DAT	=	0x00da
                    00DD    274 G$I2SCLH$0$0 == 0x00dd
                    00DD    275 _I2SCLH	=	0x00dd
                    00DC    276 G$I2SCLL$0$0 == 0x00dc
                    00DC    277 _I2SCLL	=	0x00dc
                    00D9    278 G$I2STAT$0$0 == 0x00d9
                    00D9    279 _I2STAT	=	0x00d9
                    00F8    280 G$IP1$0$0 == 0x00f8
                    00F8    281 _IP1	=	0x00f8
                    00F7    282 G$IP1H$0$0 == 0x00f7
                    00F7    283 _IP1H	=	0x00f7
                    0094    284 G$KBCON$0$0 == 0x0094
                    0094    285 _KBCON	=	0x0094
                    0086    286 G$KBMASK$0$0 == 0x0086
                    0086    287 _KBMASK	=	0x0086
                    0093    288 G$KBPATN$0$0 == 0x0093
                    0093    289 _KBPATN	=	0x0093
                    0084    290 G$P0M1$0$0 == 0x0084
                    0084    291 _P0M1	=	0x0084
                    0085    292 G$P0M2$0$0 == 0x0085
                    0085    293 _P0M2	=	0x0085
                    0091    294 G$P1M1$0$0 == 0x0091
                    0091    295 _P1M1	=	0x0091
                    0092    296 G$P1M2$0$0 == 0x0092
                    0092    297 _P1M2	=	0x0092
                    00B1    298 G$P3M1$0$0 == 0x00b1
                    00B1    299 _P3M1	=	0x00b1
                    00B2    300 G$P3M2$0$0 == 0x00b2
                    00B2    301 _P3M2	=	0x00b2
                    00B5    302 G$PCONA$0$0 == 0x00b5
                    00B5    303 _PCONA	=	0x00b5
                    00F6    304 G$PT0AD$0$0 == 0x00f6
                    00F6    305 _PT0AD	=	0x00f6
                    00DF    306 G$RSTSRC$0$0 == 0x00df
                    00DF    307 _RSTSRC	=	0x00df
                    00D1    308 G$RTCCON$0$0 == 0x00d1
                    00D1    309 _RTCCON	=	0x00d1
                    00D2    310 G$RTCH$0$0 == 0x00d2
                    00D2    311 _RTCH	=	0x00d2
                    00D3    312 G$RTCL$0$0 == 0x00d3
                    00D3    313 _RTCL	=	0x00d3
                    00BA    314 G$SSTAT$0$0 == 0x00ba
                    00BA    315 _SSTAT	=	0x00ba
                    008F    316 G$TAMOD$0$0 == 0x008f
                    008F    317 _TAMOD	=	0x008f
                    0096    318 G$TRIM$0$0 == 0x0096
                    0096    319 _TRIM	=	0x0096
                    00A7    320 G$WDCON$0$0 == 0x00a7
                    00A7    321 _WDCON	=	0x00a7
                    00C1    322 G$WDL$0$0 == 0x00c1
                    00C1    323 _WDL	=	0x00c1
                    00C2    324 G$WFEED1$0$0 == 0x00c2
                    00C2    325 _WFEED1	=	0x00c2
                    00C3    326 G$WFEED2$0$0 == 0x00c3
                    00C3    327 _WFEED2	=	0x00c3
                    00B7    328 G$IP0H$0$0 == 0x00b7
                    00B7    329 _IP0H	=	0x00b7
                    00E8    330 G$IEN1$0$0 == 0x00e8
                    00E8    331 _IEN1	=	0x00e8
                            332 ;--------------------------------------------------------
                            333 ; special function bits
                            334 ;--------------------------------------------------------
                            335 	.area RSEG    (ABS,DATA)
   0000                     336 	.org 0x0000
                    00D0    337 G$PSW_0$0$0 == 0x00d0
                    00D0    338 _PSW_0	=	0x00d0
                    00D1    339 G$PSW_1$0$0 == 0x00d1
                    00D1    340 _PSW_1	=	0x00d1
                    00D2    341 G$PSW_2$0$0 == 0x00d2
                    00D2    342 _PSW_2	=	0x00d2
                    00D3    343 G$PSW_3$0$0 == 0x00d3
                    00D3    344 _PSW_3	=	0x00d3
                    00D4    345 G$PSW_4$0$0 == 0x00d4
                    00D4    346 _PSW_4	=	0x00d4
                    00D5    347 G$PSW_5$0$0 == 0x00d5
                    00D5    348 _PSW_5	=	0x00d5
                    00D6    349 G$PSW_6$0$0 == 0x00d6
                    00D6    350 _PSW_6	=	0x00d6
                    00D7    351 G$PSW_7$0$0 == 0x00d7
                    00D7    352 _PSW_7	=	0x00d7
                    008F    353 G$TCON_7$0$0 == 0x008f
                    008F    354 _TCON_7	=	0x008f
                    008E    355 G$TCON_6$0$0 == 0x008e
                    008E    356 _TCON_6	=	0x008e
                    008D    357 G$TCON_5$0$0 == 0x008d
                    008D    358 _TCON_5	=	0x008d
                    008C    359 G$TCON_4$0$0 == 0x008c
                    008C    360 _TCON_4	=	0x008c
                    008B    361 G$TCON_3$0$0 == 0x008b
                    008B    362 _TCON_3	=	0x008b
                    008A    363 G$TCON_2$0$0 == 0x008a
                    008A    364 _TCON_2	=	0x008a
                    0089    365 G$TCON_1$0$0 == 0x0089
                    0089    366 _TCON_1	=	0x0089
                    0088    367 G$TCON_0$0$0 == 0x0088
                    0088    368 _TCON_0	=	0x0088
                    00AF    369 G$IEN0_7$0$0 == 0x00af
                    00AF    370 _IEN0_7	=	0x00af
                    00AE    371 G$IEN0_6$0$0 == 0x00ae
                    00AE    372 _IEN0_6	=	0x00ae
                    00AD    373 G$IEN0_5$0$0 == 0x00ad
                    00AD    374 _IEN0_5	=	0x00ad
                    00AC    375 G$IEN0_4$0$0 == 0x00ac
                    00AC    376 _IEN0_4	=	0x00ac
                    00AB    377 G$IEN0_3$0$0 == 0x00ab
                    00AB    378 _IEN0_3	=	0x00ab
                    00AA    379 G$IEN0_2$0$0 == 0x00aa
                    00AA    380 _IEN0_2	=	0x00aa
                    00A9    381 G$IEN0_1$0$0 == 0x00a9
                    00A9    382 _IEN0_1	=	0x00a9
                    00A8    383 G$IEN0_0$0$0 == 0x00a8
                    00A8    384 _IEN0_0	=	0x00a8
                    00EA    385 G$IEN1_2$0$0 == 0x00ea
                    00EA    386 _IEN1_2	=	0x00ea
                    00E9    387 G$IEN1_1$0$0 == 0x00e9
                    00E9    388 _IEN1_1	=	0x00e9
                    00E8    389 G$IEN1_0$0$0 == 0x00e8
                    00E8    390 _IEN1_0	=	0x00e8
                    00FE    391 G$IP1_6$0$0 == 0x00fe
                    00FE    392 _IP1_6	=	0x00fe
                    00FA    393 G$IP1_2$0$0 == 0x00fa
                    00FA    394 _IP1_2	=	0x00fa
                    00F9    395 G$IP1_1$0$0 == 0x00f9
                    00F9    396 _IP1_1	=	0x00f9
                    00F8    397 G$IP1_0$0$0 == 0x00f8
                    00F8    398 _IP1_0	=	0x00f8
                    00BE    399 G$IP0_6$0$0 == 0x00be
                    00BE    400 _IP0_6	=	0x00be
                    00BD    401 G$IP0_5$0$0 == 0x00bd
                    00BD    402 _IP0_5	=	0x00bd
                    00BC    403 G$IP0_4$0$0 == 0x00bc
                    00BC    404 _IP0_4	=	0x00bc
                    00BB    405 G$IP0_3$0$0 == 0x00bb
                    00BB    406 _IP0_3	=	0x00bb
                    00BA    407 G$IP0_2$0$0 == 0x00ba
                    00BA    408 _IP0_2	=	0x00ba
                    00B9    409 G$IP0_1$0$0 == 0x00b9
                    00B9    410 _IP0_1	=	0x00b9
                    00B8    411 G$IP0_0$0$0 == 0x00b8
                    00B8    412 _IP0_0	=	0x00b8
                    0098    413 G$SCON_0$0$0 == 0x0098
                    0098    414 _SCON_0	=	0x0098
                    0099    415 G$SCON_1$0$0 == 0x0099
                    0099    416 _SCON_1	=	0x0099
                    009A    417 G$SCON_2$0$0 == 0x009a
                    009A    418 _SCON_2	=	0x009a
                    009B    419 G$SCON_3$0$0 == 0x009b
                    009B    420 _SCON_3	=	0x009b
                    009C    421 G$SCON_4$0$0 == 0x009c
                    009C    422 _SCON_4	=	0x009c
                    009D    423 G$SCON_5$0$0 == 0x009d
                    009D    424 _SCON_5	=	0x009d
                    009E    425 G$SCON_6$0$0 == 0x009e
                    009E    426 _SCON_6	=	0x009e
                    009F    427 G$SCON_7$0$0 == 0x009f
                    009F    428 _SCON_7	=	0x009f
                    00DE    429 G$I2CON_6$0$0 == 0x00de
                    00DE    430 _I2CON_6	=	0x00de
                    00DD    431 G$I2CON_5$0$0 == 0x00dd
                    00DD    432 _I2CON_5	=	0x00dd
                    00DC    433 G$I2CON_4$0$0 == 0x00dc
                    00DC    434 _I2CON_4	=	0x00dc
                    00DB    435 G$I2CON_3$0$0 == 0x00db
                    00DB    436 _I2CON_3	=	0x00db
                    00DA    437 G$I2CON_2$0$0 == 0x00da
                    00DA    438 _I2CON_2	=	0x00da
                    00D8    439 G$I2CON_0$0$0 == 0x00d8
                    00D8    440 _I2CON_0	=	0x00d8
                    0080    441 G$P0_0$0$0 == 0x0080
                    0080    442 _P0_0	=	0x0080
                    0081    443 G$P0_1$0$0 == 0x0081
                    0081    444 _P0_1	=	0x0081
                    0082    445 G$P0_2$0$0 == 0x0082
                    0082    446 _P0_2	=	0x0082
                    0083    447 G$P0_3$0$0 == 0x0083
                    0083    448 _P0_3	=	0x0083
                    0084    449 G$P0_4$0$0 == 0x0084
                    0084    450 _P0_4	=	0x0084
                    0085    451 G$P0_5$0$0 == 0x0085
                    0085    452 _P0_5	=	0x0085
                    0086    453 G$P0_6$0$0 == 0x0086
                    0086    454 _P0_6	=	0x0086
                    0087    455 G$P0_7$0$0 == 0x0087
                    0087    456 _P0_7	=	0x0087
                    0090    457 G$P1_0$0$0 == 0x0090
                    0090    458 _P1_0	=	0x0090
                    0091    459 G$P1_1$0$0 == 0x0091
                    0091    460 _P1_1	=	0x0091
                    0092    461 G$P1_2$0$0 == 0x0092
                    0092    462 _P1_2	=	0x0092
                    0093    463 G$P1_3$0$0 == 0x0093
                    0093    464 _P1_3	=	0x0093
                    0094    465 G$P1_4$0$0 == 0x0094
                    0094    466 _P1_4	=	0x0094
                    0095    467 G$P1_5$0$0 == 0x0095
                    0095    468 _P1_5	=	0x0095
                    0096    469 G$P1_6$0$0 == 0x0096
                    0096    470 _P1_6	=	0x0096
                    0097    471 G$P1_7$0$0 == 0x0097
                    0097    472 _P1_7	=	0x0097
                    00B0    473 G$P3_0$0$0 == 0x00b0
                    00B0    474 _P3_0	=	0x00b0
                    00B1    475 G$P3_1$0$0 == 0x00b1
                    00B1    476 _P3_1	=	0x00b1
                            477 ;--------------------------------------------------------
                            478 ; overlayable register banks
                            479 ;--------------------------------------------------------
                            480 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     481 	.ds 8
                            482 ;--------------------------------------------------------
                            483 ; overlayable bit register bank
                            484 ;--------------------------------------------------------
                            485 	.area BIT_BANK	(REL,OVR,DATA)
   0000                     486 bits:
   0000                     487 	.ds 1
                    8000    488 	b0 = bits[0]
                    8100    489 	b1 = bits[1]
                    8200    490 	b2 = bits[2]
                    8300    491 	b3 = bits[3]
                    8400    492 	b4 = bits[4]
                    8500    493 	b5 = bits[5]
                    8600    494 	b6 = bits[6]
                    8700    495 	b7 = bits[7]
                            496 ;--------------------------------------------------------
                            497 ; internal ram data
                            498 ;--------------------------------------------------------
                            499 	.area DSEG    (DATA)
                    0000    500 G$conh$0$0==.
   0000                     501 _conh::
   0000                     502 	.ds 1
                    0001    503 G$conl$0$0==.
   0001                     504 _conl::
   0001                     505 	.ds 1
                    0002    506 G$pcount$0$0==.
   0002                     507 _pcount::
   0002                     508 	.ds 1
                    0003    509 G$mem_length$0$0==.
   0003                     510 _mem_length::
   0003                     511 	.ds 1
                    0004    512 G$mem_adrh$0$0==.
   0004                     513 _mem_adrh::
   0004                     514 	.ds 1
                    0005    515 G$mem_adrl$0$0==.
   0005                     516 _mem_adrl::
   0005                     517 	.ds 1
                    0006    518 G$senders_pcount$0$0==.
   0006                     519 _senders_pcount::
   0006                     520 	.ds 1
                    0007    521 G$telegramm$0$0==.
   0007                     522 _telegramm::
   0007                     523 	.ds 23
                    001E    524 G$tx_buffer$0$0==.
   001E                     525 _tx_buffer::
   001E                     526 	.ds 8
                    0026    527 G$telpos$0$0==.
   0026                     528 _telpos::
   0026                     529 	.ds 1
                    0027    530 G$cs$0$0==.
   0027                     531 _cs::
   0027                     532 	.ds 1
                    0028    533 G$fbrx_byte$0$0==.
   0028                     534 _fbrx_byte::
   0028                     535 	.ds 1
                    0029    536 G$fb_pattern$0$0==.
   0029                     537 _fb_pattern::
   0029                     538 	.ds 1
                    002A    539 G$fb_state$0$0==.
   002A                     540 _fb_state::
   002A                     541 	.ds 1
                    002B    542 G$repeat_count$0$0==.
   002B                     543 _repeat_count::
   002B                     544 	.ds 1
                    0000    545 G$RAM$0$0 == 0x0000
                    0000    546 _RAM	=	0x0000
                    002C    547 G$tx_nextwrite$0$0==.
   002C                     548 _tx_nextwrite::
   002C                     549 	.ds 1
                    002D    550 G$tx_nextsend$0$0==.
   002D                     551 _tx_nextsend::
   002D                     552 	.ds 1
                    002E    553 G$status60$0$0==.
   002E                     554 _status60::
   002E                     555 	.ds 1
                    002F    556 G$connected_timeout$0$0==.
   002F                     557 _connected_timeout::
   002F                     558 	.ds 1
                            559 ;--------------------------------------------------------
                            560 ; overlayable items in internal ram 
                            561 ;--------------------------------------------------------
                            562 	.area OSEG    (OVR,DATA)
                            563 ;--------------------------------------------------------
                            564 ; indirectly addressable internal ram data
                            565 ;--------------------------------------------------------
                            566 	.area ISEG    (DATA)
                            567 ;--------------------------------------------------------
                            568 ; absolute internal ram data
                            569 ;--------------------------------------------------------
                            570 	.area IABS    (ABS,DATA)
                            571 	.area IABS    (ABS,DATA)
                            572 ;--------------------------------------------------------
                            573 ; bit data
                            574 ;--------------------------------------------------------
                            575 	.area BSEG    (BIT)
                    0000    576 G$parity_ok$0$0==.
   0000                     577 _parity_ok::
   0000                     578 	.ds 1
                    0001    579 G$interrupted$0$0==.
   0001                     580 _interrupted::
   0001                     581 	.ds 1
                    0002    582 G$fb_parity$0$0==.
   0002                     583 _fb_parity::
   0002                     584 	.ds 1
                    0003    585 G$ack$0$0==.
   0003                     586 _ack::
   0003                     587 	.ds 1
                    0004    588 G$nack$0$0==.
   0004                     589 _nack::
   0004                     590 	.ds 1
                    0005    591 G$its_me$0$0==.
   0005                     592 _its_me::
   0005                     593 	.ds 1
                    0006    594 G$tel_arrived$0$0==.
   0006                     595 _tel_arrived::
   0006                     596 	.ds 1
                    0007    597 G$tel_sent$0$0==.
   0007                     598 _tel_sent::
   0007                     599 	.ds 1
                    0008    600 G$auto_ack$0$0==.
   0008                     601 _auto_ack::
   0008                     602 	.ds 1
                    0009    603 G$fbtx_bit$0$0==.
   0009                     604 _fbtx_bit::
   0009                     605 	.ds 1
                    000A    606 G$wait_for_ack$0$0==.
   000A                     607 _wait_for_ack::
   000A                     608 	.ds 1
                    000B    609 G$send_ack$0$0==.
   000B                     610 _send_ack::
   000B                     611 	.ds 1
                    000C    612 G$send_nack$0$0==.
   000C                     613 _send_nack::
   000C                     614 	.ds 1
                    000D    615 G$connected$0$0==.
   000D                     616 _connected::
   000D                     617 	.ds 1
                    000E    618 G$inc_pcount$0$0==.
   000E                     619 _inc_pcount::
   000E                     620 	.ds 1
                    000F    621 G$telegramm_ok$0$0==.
   000F                     622 _telegramm_ok::
   000F                     623 	.ds 1
                            624 ;--------------------------------------------------------
                            625 ; paged external ram data
                            626 ;--------------------------------------------------------
                            627 	.area PSEG    (PAG,XDATA)
                            628 ;--------------------------------------------------------
                            629 ; external ram data
                            630 ;--------------------------------------------------------
                            631 	.area XSEG    (XDATA)
                            632 ;--------------------------------------------------------
                            633 ; absolute external ram data
                            634 ;--------------------------------------------------------
                            635 	.area XABS    (ABS,XDATA)
                            636 ;--------------------------------------------------------
                            637 ; external initialized ram data
                            638 ;--------------------------------------------------------
                            639 	.area XISEG   (XDATA)
                            640 	.area HOME    (CODE)
                            641 	.area GSINIT0 (CODE)
                            642 	.area GSINIT1 (CODE)
                            643 	.area GSINIT2 (CODE)
                            644 	.area GSINIT3 (CODE)
                            645 	.area GSINIT4 (CODE)
                            646 	.area GSINIT5 (CODE)
                            647 	.area GSINIT  (CODE)
                            648 	.area GSFINAL (CODE)
                            649 	.area CSEG    (CODE)
                            650 ;--------------------------------------------------------
                            651 ; global & static initialisations
                            652 ;--------------------------------------------------------
                            653 	.area HOME    (CODE)
                            654 	.area GSINIT  (CODE)
                            655 	.area GSFINAL (CODE)
                            656 	.area GSINIT  (CODE)
                            657 ;--------------------------------------------------------
                            658 ; Home
                            659 ;--------------------------------------------------------
                            660 	.area HOME    (CODE)
                            661 	.area HOME    (CODE)
                            662 ;--------------------------------------------------------
                            663 ; code
                            664 ;--------------------------------------------------------
                            665 	.area CSEG    (CODE)
                            666 ;------------------------------------------------------------
                            667 ;Allocation info for local variables in function 'X1_int'
                            668 ;------------------------------------------------------------
                    0000    669 	G$X1_int$0$0 ==.
                    0000    670 	C$fb_lpc922.c$57$0$0 ==.
                            671 ;	..\fb_lpc922.c:57: void X1_int(void) __interrupt (2)		// Flanke des Startbits laest int1 aus
                            672 ;	-----------------------------------------
                            673 ;	 function X1_int
                            674 ;	-----------------------------------------
   0000                     675 _X1_int:
                    0007    676 	ar7 = 0x07
                    0006    677 	ar6 = 0x06
                    0005    678 	ar5 = 0x05
                    0004    679 	ar4 = 0x04
                    0003    680 	ar3 = 0x03
                    0002    681 	ar2 = 0x02
                    0001    682 	ar1 = 0x01
                    0000    683 	ar0 = 0x00
   0000 C0 E0               684 	push	acc
   0002 C0 D0               685 	push	psw
                    0004    686 	C$fb_lpc922.c$60$1$1 ==.
                            687 ;	..\fb_lpc922.c:60: EX1=0;			// int1 stoppen								1 cycle = 0,27127us
   0004 C2 AA               688 	clr	_IEN0_2
                    0006    689 	C$fb_lpc922.c$61$1$1 ==.
                            690 ;	..\fb_lpc922.c:61: TR1=0;			// Timer 1 stoppen
   0006 C2 8E               691 	clr	_TCON_6
                    0008    692 	C$fb_lpc922.c$62$1$1 ==.
                            693 ;	..\fb_lpc922.c:62: TMOD=(TMOD & 0x0F) + 0x20;	// Timer 1 als 8-Bit autoreload
   0008 74 0F               694 	mov	a,#0x0F
   000A 55 89               695 	anl	a,_TMOD
   000C 24 20               696 	add	a,#0x20
   000E F5 89               697 	mov	_TMOD,a
                    0010    698 	C$fb_lpc922.c$63$1$1 ==.
                            699 ;	..\fb_lpc922.c:63: TL1=53;//108;//128;		// Timer laden so dass in state 2 bei 75Âµs abgefragt wird
   0010 75 8B 35            700 	mov	_TL1,#0x35
                    0013    701 	C$fb_lpc922.c$64$1$1 ==.
                            702 ;	..\fb_lpc922.c:64: TH1=128;//128;			// autoreload auf 35Âµs setzen (gilt fuer sprung von 2 auf 3)
   0013 75 8D 80            703 	mov	_TH1,#0x80
                    0016    704 	C$fb_lpc922.c$65$1$1 ==.
                            705 ;	..\fb_lpc922.c:65: TF1=0;			// Timer1-flag loeschen						1 cycle
   0016 C2 8F               706 	clr	_TCON_7
                    0018    707 	C$fb_lpc922.c$66$1$1 ==.
                            708 ;	..\fb_lpc922.c:66: TR1=1;			// Timer1 starten							1 cycle
   0018 D2 8E               709 	setb	_TCON_6
                    001A    710 	C$fb_lpc922.c$67$1$1 ==.
                            711 ;	..\fb_lpc922.c:67: ET1=1;			// Timer1-int aktiv							1 cycle
   001A D2 AB               712 	setb	_IEN0_3
                    001C    713 	C$fb_lpc922.c$68$1$1 ==.
                            714 ;	..\fb_lpc922.c:68: fb_state=2;		// naechster state
   001C 75*2A 02            715 	mov	_fb_state,#0x02
                    001F    716 	C$fb_lpc922.c$69$1$1 ==.
                            717 ;	..\fb_lpc922.c:69: fb_parity=0;	// Parity Bit loeschen
   001F C2*02               718 	clr	_fb_parity
                    0021    719 	C$fb_lpc922.c$70$1$1 ==.
                            720 ;	..\fb_lpc922.c:70: parity_ok=1;	// wird bei Fehler geloescht
   0021 D2*00               721 	setb	_parity_ok
                    0023    722 	C$fb_lpc922.c$71$1$1 ==.
                            723 ;	..\fb_lpc922.c:71: fb_pattern=0;
   0023 75*29 00            724 	mov	_fb_pattern,#0x00
                    0026    725 	C$fb_lpc922.c$72$1$1 ==.
                            726 ;	..\fb_lpc922.c:72: fbrx_byte=0;
   0026 75*28 00            727 	mov	_fbrx_byte,#0x00
                    0029    728 	C$fb_lpc922.c$73$1$1 ==.
                            729 ;	..\fb_lpc922.c:73: interrupted=1;	// signalisiert app, dass unterbrochen wurde
   0029 D2*01               730 	setb	_interrupted
   002B D0 D0               731 	pop	psw
   002D D0 E0               732 	pop	acc
                    002F    733 	C$fb_lpc922.c$74$1$1 ==.
                    002F    734 	XG$X1_int$0$0 ==.
   002F 32                  735 	reti
                            736 ;	eliminated unneeded mov psw,# (no regs used in bank)
                            737 ;	eliminated unneeded push/pop dpl
                            738 ;	eliminated unneeded push/pop dph
                            739 ;	eliminated unneeded push/pop b
                            740 ;------------------------------------------------------------
                            741 ;Allocation info for local variables in function 'T1_int'
                            742 ;------------------------------------------------------------
                            743 ;fbrx_bit                  Allocated to registers b0 
                            744 ;send_byte                 Allocated to registers r7 
                            745 ;objno                     Allocated to registers r7 
                            746 ;build_ok                  Allocated to registers b0 
                            747 ;objvalue                  Allocated to stack - _bp +1
                            748 ;gapos                     Allocated to registers r5 r6 
                            749 ;objtype                   Allocated to registers r6 
                            750 ;n                         Allocated to registers r4 
                            751 ;length                    Allocated to registers r6 
                            752 ;asspos                    Allocated to registers r4 
                            753 ;type                      Allocated to registers b2 
                            754 ;repeatflag                Allocated to registers b1 
                            755 ;------------------------------------------------------------
                    0030    756 	G$T1_int$0$0 ==.
                    0030    757 	C$fb_lpc922.c$78$1$1 ==.
                            758 ;	..\fb_lpc922.c:78: void T1_int(void) __interrupt (3) 	// Timer 1 Interrupt
                            759 ;	-----------------------------------------
                            760 ;	 function T1_int
                            761 ;	-----------------------------------------
   0030                     762 _T1_int:
   0030 C0*00               763 	push	bits
   0032 C0 E0               764 	push	acc
   0034 C0 F0               765 	push	b
   0036 C0 82               766 	push	dpl
   0038 C0 83               767 	push	dph
   003A C0 07               768 	push	(0+7)
   003C C0 06               769 	push	(0+6)
   003E C0 05               770 	push	(0+5)
   0040 C0 04               771 	push	(0+4)
   0042 C0 03               772 	push	(0+3)
   0044 C0 02               773 	push	(0+2)
   0046 C0 01               774 	push	(0+1)
   0048 C0 00               775 	push	(0+0)
   004A C0 D0               776 	push	psw
   004C 75 D0 00            777 	mov	psw,#0x00
   004F C0*00               778 	push	_bp
   0051 E5 81               779 	mov	a,sp
   0053 F5*00               780 	mov	_bp,a
   0055 24 04               781 	add	a,#0x04
   0057 F5 81               782 	mov	sp,a
                    0059    783 	C$fb_lpc922.c$84$1$1 ==.
                            784 ;	..\fb_lpc922.c:84: switch (fb_state){
   0059 E5*2A               785 	mov	a,_fb_state
   005B FF                  786 	mov	r7,a
   005C 24 F1               787 	add	a,#0xff - 0x0E
   005E 50 03               788 	jnc	00331$
   0060 02s05rC6            789 	ljmp	00254$
   0063                     790 00331$:
   0063 EF                  791 	mov	a,r7
   0064 2F                  792 	add	a,r7
   0065 2F                  793 	add	a,r7
   0066 90s00r6A            794 	mov	dptr,#00332$
   0069 73                  795 	jmp	@a+dptr
   006A                     796 00332$:
   006A 02s00r97            797 	ljmp	00101$
   006D 02s05rC6            798 	ljmp	00254$
   0070 02s03r3C            799 	ljmp	00150$
   0073 02s03rFC            800 	ljmp	00187$
   0076 02s04r05            801 	ljmp	00188$
   0079 02s04r8F            802 	ljmp	00209$
   007C 02s05rC6            803 	ljmp	00254$
   007F 02s05rC6            804 	ljmp	00254$
   0082 02s05rC6            805 	ljmp	00254$
   0085 02s04rBB            806 	ljmp	00216$
   0088 02s04rD5            807 	ljmp	00217$
   008B 02s05r3D            808 	ljmp	00238$
   008E 02s05rC6            809 	ljmp	00254$
   0091 02s05r61            810 	ljmp	00245$
   0094 02s05rAF            811 	ljmp	00253$
                    0097    812 	C$fb_lpc922.c$88$2$2 ==.
                            813 ;	..\fb_lpc922.c:88: case 0:
   0097                     814 00101$:
                    0097    815 	C$fb_lpc922.c$97$2$2 ==.
                            816 ;	..\fb_lpc922.c:97: if(tx_nextsend != tx_nextwrite) { 			// wenn zu sendendes Objekt vorhanden
   0097 E5*2C               817 	mov	a,_tx_nextwrite
   0099 B5*2D 03            818 	cjne	a,_tx_nextsend,00333$
   009C 02s03r35            819 	ljmp	00148$
   009F                     820 00333$:
                    009F    821 	C$fb_lpc922.c$101$3$3 ==.
                            822 ;	..\fb_lpc922.c:101: unsigned char objno=tx_buffer[tx_nextsend];
   009F E5*2D               823 	mov	a,_tx_nextsend
   00A1 24r1E               824 	add	a,#_tx_buffer
   00A3 F9                  825 	mov	r1,a
   00A4 87 07               826 	mov	ar7,@r1
                    00A6    827 	C$fb_lpc922.c$102$3$3 ==.
                            828 ;	..\fb_lpc922.c:102: __bit build_ok=0;
   00A6 C2*00               829 	clr	b0
                    00A8    830 	C$fb_lpc922.c$104$3$3 ==.
                            831 ;	..\fb_lpc922.c:104: unsigned int gapos=0xFE;
   00A8 7D FE               832 	mov	r5,#0xFE
   00AA 7E 00               833 	mov	r6,#0x00
                    00AC    834 	C$fb_lpc922.c$109$3$3 ==.
                            835 ;	..\fb_lpc922.c:109: repeatflag=objno&0x20;
   00AC EF                  836 	mov	a,r7
   00AD A2 E5               837 	mov	c,acc[5]
   00AF E4                  838 	clr	a
   00B0 33                  839 	rlc	a
   00B1 24 FF               840 	add	a,#0xff
   00B3 92*00               841 	mov	b1,c
                    00B5    842 	C$fb_lpc922.c$111$3$3 ==.
                            843 ;	..\fb_lpc922.c:111: telegramm[1]=eeprom[ADDRTAB+1];
   00B5 90 1D 17            844 	mov	dptr,#(_eeprom + 0x0017)
   00B8 E4                  845 	clr	a
   00B9 93                  846 	movc	a,@a+dptr
   00BA FC                  847 	mov	r4,a
   00BB 8C*08               848 	mov	(_telegramm + 0x0001),r4
                    00BD    849 	C$fb_lpc922.c$112$3$3 ==.
                            850 ;	..\fb_lpc922.c:112: telegramm[2]=eeprom[ADDRTAB+2];
   00BD 90 1D 18            851 	mov	dptr,#(_eeprom + 0x0018)
   00C0 E4                  852 	clr	a
   00C1 93                  853 	movc	a,@a+dptr
   00C2 FC                  854 	mov	r4,a
   00C3 8C*09               855 	mov	(_telegramm + 0x0002),r4
                    00C5    856 	C$fb_lpc922.c$114$3$3 ==.
                            857 ;	..\fb_lpc922.c:114: if(objno<128) {		// Multicast
   00C5 BF 80 00            858 	cjne	r7,#0x80,00334$
   00C8                     859 00334$:
   00C8 40 03               860 	jc	00335$
   00CA 02s01rF7            861 	ljmp	00133$
   00CD                     862 00335$:
                    00CD    863 	C$fb_lpc922.c$115$1$1 ==.
                            864 ;	..\fb_lpc922.c:115: type=(objno&0x40);	// bei Multicast ist type0 normal und type1 response telegramm
   00CD C0 05               865 	push	ar5
   00CF C0 06               866 	push	ar6
   00D1 EF                  867 	mov	a,r7
   00D2 23                  868 	rl	a
   00D3 23                  869 	rl	a
   00D4 54 01               870 	anl	a,#0x01
   00D6 24 FF               871 	add	a,#0xff
   00D8 92*00               872 	mov	b2,c
                    00DA    873 	C$fb_lpc922.c$116$4$4 ==.
                            874 ;	..\fb_lpc922.c:116: objno&=0x1F;
   00DA 53 07 1F            875 	anl	ar7,#0x1F
                    00DD    876 	C$fb_lpc922.c$118$4$4 ==.
                            877 ;	..\fb_lpc922.c:118: objvalue=read_obj_value(objno);		// Objektwert lesen
   00DD 8F 82               878 	mov	dpl,r7
   00DF C0 07               879 	push	ar7
   00E1 C0 05               880 	push	ar5
   00E3 C0*00               881 	push	bits
   00E5 12s00r00            882 	lcall	_read_obj_value
   00E8 AA 82               883 	mov	r2,dpl
   00EA AB 83               884 	mov	r3,dph
   00EC AC F0               885 	mov	r4,b
   00EE FE                  886 	mov	r6,a
   00EF D0*00               887 	pop	bits
   00F1 D0 05               888 	pop	ar5
   00F3 D0 07               889 	pop	ar7
   00F5 A8*00               890 	mov	r0,_bp
   00F7 08                  891 	inc	r0
   00F8 A6 02               892 	mov	@r0,ar2
   00FA 08                  893 	inc	r0
   00FB A6 03               894 	mov	@r0,ar3
   00FD 08                  895 	inc	r0
   00FE A6 04               896 	mov	@r0,ar4
   0100 08                  897 	inc	r0
   0101 A6 06               898 	mov	@r0,ar6
                    0103    899 	C$fb_lpc922.c$121$4$4 ==.
                            900 ;	..\fb_lpc922.c:121: asspos=eeprom[ASSOCTABPTR]+1+2*objno;
   0103 90 1D 11            901 	mov	dptr,#(_eeprom + 0x0011)
   0106 E4                  902 	clr	a
   0107 93                  903 	movc	a,@a+dptr
   0108 FE                  904 	mov	r6,a
   0109 0E                  905 	inc	r6
   010A EF                  906 	mov	a,r7
   010B 2F                  907 	add	a,r7
   010C FD                  908 	mov	r5,a
   010D 2E                  909 	add	a,r6
                    010E    910 	C$fb_lpc922.c$122$4$4 ==.
                            911 ;	..\fb_lpc922.c:122: if(eeprom[asspos+1]==objno) gapos=eeprom[asspos];
   010E FC                  912 	mov	r4,a
   010F 04                  913 	inc	a
   0110 90 1D 00            914 	mov	dptr,#_eeprom
   0113 93                  915 	movc	a,@a+dptr
   0114 FE                  916 	mov	r6,a
   0115 B5 07 02            917 	cjne	a,ar7,00336$
   0118 80 06               918 	sjmp	00337$
   011A                     919 00336$:
   011A D0 06               920 	pop	ar6
   011C D0 05               921 	pop	ar5
   011E 80 0F               922 	sjmp	00103$
   0120                     923 00337$:
   0120 D0 06               924 	pop	ar6
   0122 D0 05               925 	pop	ar5
   0124 8C 82               926 	mov	dpl,r4
   0126 75 83 1D            927 	mov	dph,#(_eeprom >> 8)
   0129 E4                  928 	clr	a
   012A 93                  929 	movc	a,@a+dptr
   012B FC                  930 	mov	r4,a
   012C FD                  931 	mov	r5,a
   012D 7E 00               932 	mov	r6,#0x00
   012F                     933 00103$:
                    012F    934 	C$fb_lpc922.c$124$4$4 ==.
                            935 ;	..\fb_lpc922.c:124: if (gapos!=0xFE) // wenn keine Gruppenadresse hinterlegt nix tun
   012F BD FE 06            936 	cjne	r5,#0xFE,00338$
   0132 BE 00 03            937 	cjne	r6,#0x00,00338$
   0135 02s02rC2            938 	ljmp	00134$
   0138                     939 00338$:
                    0138    940 	C$fb_lpc922.c$126$5$5 ==.
                            941 ;	..\fb_lpc922.c:126: n=eeprom[COMMSTABPTR]+objno+objno+objno+3; //Adresse obj flags für Priorität holen
   0138 90 1D 12            942 	mov	dptr,#(_eeprom + 0x0012)
   013B E4                  943 	clr	a
   013C 93                  944 	movc	a,@a+dptr
   013D 2F                  945 	add	a,r7
   013E 2F                  946 	add	a,r7
   013F 2F                  947 	add	a,r7
   0140 FC                  948 	mov	r4,a
   0141 0C                  949 	inc	r4
   0142 0C                  950 	inc	r4
   0143 0C                  951 	inc	r4
                    0144    952 	C$fb_lpc922.c$128$5$5 ==.
                            953 ;	..\fb_lpc922.c:128: telegramm[0]=priotable[eeprom[n]&0x03];// die prio ins erste Byte des tele einfügen
   0144 8C 82               954 	mov	dpl,r4
   0146 75 83 1D            955 	mov	dph,#(_eeprom >> 8)
   0149 E4                  956 	clr	a
   014A 93                  957 	movc	a,@a+dptr
   014B FB                  958 	mov	r3,a
   014C 74 03               959 	mov	a,#0x03
   014E 5B                  960 	anl	a,r3
   014F 90s00r00            961 	mov	dptr,#_priotable
   0152 93                  962 	movc	a,@a+dptr
   0153 FB                  963 	mov	r3,a
   0154 8B*07               964 	mov	_telegramm,r3
                    0156    965 	C$fb_lpc922.c$129$5$5 ==.
                            966 ;	..\fb_lpc922.c:129: telegramm[3]=eeprom[ADDRTAB+1+gapos*2];
   0156 ED                  967 	mov	a,r5
   0157 2D                  968 	add	a,r5
   0158 FD                  969 	mov	r5,a
   0159 24 17               970 	add	a,#0x17
   015B 90 1D 00            971 	mov	dptr,#_eeprom
   015E 93                  972 	movc	a,@a+dptr
   015F FE                  973 	mov	r6,a
   0160 8E*0A               974 	mov	(_telegramm + 0x0003),r6
                    0162    975 	C$fb_lpc922.c$130$5$5 ==.
                            976 ;	..\fb_lpc922.c:130: telegramm[4]=eeprom[ADDRTAB+2+gapos*2];
   0162 74 18               977 	mov	a,#0x18
   0164 2D                  978 	add	a,r5
   0165 90 1D 00            979 	mov	dptr,#_eeprom
   0168 93                  980 	movc	a,@a+dptr
   0169 FE                  981 	mov	r6,a
   016A 8E*0B               982 	mov	(_telegramm + 0x0004),r6
                    016C    983 	C$fb_lpc922.c$131$5$5 ==.
                            984 ;	..\fb_lpc922.c:131: telegramm[6]=0x00;
   016C 75*0D 00            985 	mov	(_telegramm + 0x0006),#0x00
                    016F    986 	C$fb_lpc922.c$132$5$5 ==.
                            987 ;	..\fb_lpc922.c:132: if (type) telegramm[7]=0x40;		// read_value_response Telegramm (angefordert)
   016F 30*00 05            988 	jnb	b2,00105$
   0172 75*0E 40            989 	mov	(_telegramm + 0x0007),#0x40
   0175 80 03               990 	sjmp	00106$
   0177                     991 00105$:
                    0177    992 	C$fb_lpc922.c$133$5$5 ==.
                            993 ;	..\fb_lpc922.c:133: else telegramm[7]=0x80;				// write_value_request Telegramm (nicht angefordert)
   0177 75*0E 80            994 	mov	(_telegramm + 0x0007),#0x80
   017A                     995 00106$:
                    017A    996 	C$fb_lpc922.c$135$5$5 ==.
                            997 ;	..\fb_lpc922.c:135: objtype=eeprom[n+1];		// eine Adresse höher als obj flags ist objecttype
   017A EC                  998 	mov	a,r4
   017B 04                  999 	inc	a
   017C 90 1D 00           1000 	mov	dptr,#_eeprom
   017F 93                 1001 	movc	a,@a+dptr
                    0180   1002 	C$fb_lpc922.c$137$5$5 ==.
                           1003 ;	..\fb_lpc922.c:137: if(objtype>6) length=objtype-5; else length=1;
   0180 FE                 1004 	mov  r6,a
   0181 24 F9              1005 	add	a,#0xff - 0x06
   0183 50 06              1006 	jnc	00108$
   0185 EE                 1007 	mov	a,r6
   0186 24 FB              1008 	add	a,#0xFB
   0188 FE                 1009 	mov	r6,a
   0189 80 02              1010 	sjmp	00109$
   018B                    1011 00108$:
   018B 7E 01              1012 	mov	r6,#0x01
   018D                    1013 00109$:
                    018D   1014 	C$fb_lpc922.c$138$5$5 ==.
                           1015 ;	..\fb_lpc922.c:138: telegramm[5]=0xE0+length;
   018D 74 E0              1016 	mov	a,#0xE0
   018F 2E                 1017 	add	a,r6
   0190 F5*0C              1018 	mov	(_telegramm + 0x0005),a
                    0192   1019 	C$fb_lpc922.c$139$5$5 ==.
                           1020 ;	..\fb_lpc922.c:139: if (length>1) telegramm[length+6]=objvalue; else telegramm[7]+=(objvalue&0x3F);
   0192 EE                 1021 	mov	a,r6
   0193 24 FE              1022 	add	a,#0xff - 0x01
   0195 50 0F              1023 	jnc	00111$
   0197 74 06              1024 	mov	a,#0x06
   0199 2E                 1025 	add	a,r6
   019A 24r07              1026 	add	a,#_telegramm
   019C F9                 1027 	mov	r1,a
   019D A8*00              1028 	mov	r0,_bp
   019F 08                 1029 	inc	r0
   01A0 86 05              1030 	mov	ar5,@r0
   01A2 A7 05              1031 	mov	@r1,ar5
   01A4 80 10              1032 	sjmp	00112$
   01A6                    1033 00111$:
   01A6 A8*00              1034 	mov	r0,_bp
   01A8 08                 1035 	inc	r0
   01A9 74 3F              1036 	mov	a,#0x3F
   01AB 56                 1037 	anl	a,@r0
   01AC FA                 1038 	mov	r2,a
   01AD E4                 1039 	clr	a
   01AE FB                 1040 	mov	r3,a
   01AF FC                 1041 	mov	r4,a
   01B0 FD                 1042 	mov	r5,a
   01B1 EA                 1043 	mov	a,r2
   01B2 25*0E              1044 	add	a,(_telegramm + 0x0007)
   01B4 F5*0E              1045 	mov	(_telegramm + 0x0007),a
   01B6                    1046 00112$:
                    01B6   1047 	C$fb_lpc922.c$140$5$5 ==.
                           1048 ;	..\fb_lpc922.c:140: if (length>2) telegramm[length+5]=objvalue>>8;
   01B6 EE                 1049 	mov	a,r6
   01B7 24 FD              1050 	add	a,#0xff - 0x02
   01B9 50 0E              1051 	jnc	00114$
   01BB 74 05              1052 	mov	a,#0x05
   01BD 2E                 1053 	add	a,r6
   01BE 24r07              1054 	add	a,#_telegramm
   01C0 F9                 1055 	mov	r1,a
   01C1 A8*00              1056 	mov	r0,_bp
   01C3 08                 1057 	inc	r0
   01C4 08                 1058 	inc	r0
   01C5 86 05              1059 	mov	ar5,@r0
   01C7 A7 05              1060 	mov	@r1,ar5
   01C9                    1061 00114$:
                    01C9   1062 	C$fb_lpc922.c$141$5$5 ==.
                           1063 ;	..\fb_lpc922.c:141: if (length>3) telegramm[length+4]=objvalue>>16;
   01C9 EE                 1064 	mov	a,r6
   01CA 24 FC              1065 	add	a,#0xff - 0x03
   01CC 50 0F              1066 	jnc	00116$
   01CE 74 04              1067 	mov	a,#0x04
   01D0 2E                 1068 	add	a,r6
   01D1 24r07              1069 	add	a,#_telegramm
   01D3 F9                 1070 	mov	r1,a
   01D4 A8*00              1071 	mov	r0,_bp
   01D6 08                 1072 	inc	r0
   01D7 08                 1073 	inc	r0
   01D8 08                 1074 	inc	r0
   01D9 86 05              1075 	mov	ar5,@r0
   01DB A7 05              1076 	mov	@r1,ar5
   01DD                    1077 00116$:
                    01DD   1078 	C$fb_lpc922.c$142$5$5 ==.
                           1079 ;	..\fb_lpc922.c:142: if (length>4) telegramm[length+3]=objvalue>>24;
   01DD EE                 1080 	mov	a,r6
   01DE 24 FB              1081 	add	a,#0xff - 0x04
   01E0 50 10              1082 	jnc	00118$
   01E2 74 03              1083 	mov	a,#0x03
   01E4 2E                 1084 	add	a,r6
   01E5 24r07              1085 	add	a,#_telegramm
   01E7 F9                 1086 	mov	r1,a
   01E8 A8*00              1087 	mov	r0,_bp
   01EA 08                 1088 	inc	r0
   01EB 08                 1089 	inc	r0
   01EC 08                 1090 	inc	r0
   01ED 08                 1091 	inc	r0
   01EE 86 06              1092 	mov	ar6,@r0
   01F0 A7 06              1093 	mov	@r1,ar6
   01F2                    1094 00118$:
                    01F2   1095 	C$fb_lpc922.c$144$5$5 ==.
                           1096 ;	..\fb_lpc922.c:144: build_ok=1;
   01F2 D2*00              1097 	setb	b0
   01F4 02s02rC2           1098 	ljmp	00134$
   01F7                    1099 00133$:
                    01F7   1100 	C$fb_lpc922.c$148$4$6 ==.
                           1101 ;	..\fb_lpc922.c:148: telegramm[0]=0xB0;				// Control Byte
   01F7 75*07 B0           1102 	mov	_telegramm,#0xB0
                    01FA   1103 	C$fb_lpc922.c$151$4$6 ==.
                           1104 ;	..\fb_lpc922.c:151: telegramm[3]=conh;
   01FA 85*00*0A           1105 	mov	(_telegramm + 0x0003),_conh
                    01FD   1106 	C$fb_lpc922.c$152$4$6 ==.
                           1107 ;	..\fb_lpc922.c:152: telegramm[4]=conl;
   01FD 85*01*0B           1108 	mov	(_telegramm + 0x0004),_conl
                    0200   1109 	C$fb_lpc922.c$154$4$6 ==.
                           1110 ;	..\fb_lpc922.c:154: switch(objno&0x1F) {
   0200 53 07 1F           1111 	anl	ar7,#0x1F
   0203 EF                 1112 	mov	a,r7
   0204 24 FA              1113 	add	a,#0xff - 0x05
   0206 50 03              1114 	jnc	00345$
   0208 02s02rC0           1115 	ljmp	00131$
   020B                    1116 00345$:
   020B EF                 1117 	mov	a,r7
   020C 2F                 1118 	add	a,r7
   020D 2F                 1119 	add	a,r7
   020E 90s02r12           1120 	mov	dptr,#00346$
   0211 73                 1121 	jmp	@a+dptr
   0212                    1122 00346$:
   0212 02s02rC0           1123 	ljmp	00131$
   0215 02s02r24           1124 	ljmp	00121$
   0218 02s02r30           1125 	ljmp	00122$
   021B 02s02r47           1126 	ljmp	00123$
   021E 02s02r58           1127 	ljmp	00124$
   0221 02s02rB8           1128 	ljmp	00130$
                    0224   1129 	C$fb_lpc922.c$155$5$7 ==.
                           1130 ;	..\fb_lpc922.c:155: case 1:	// NCD ACK Quittierung (129) mit Paketnummer vom Sender, nicht der Eigenen!!!
   0224                    1131 00121$:
                    0224   1132 	C$fb_lpc922.c$156$5$7 ==.
                           1133 ;	..\fb_lpc922.c:156: telegramm[5]=0x60;					// DRL
   0224 75*0C 60           1134 	mov	(_telegramm + 0x0005),#0x60
                    0227   1135 	C$fb_lpc922.c$157$5$7 ==.
                           1136 ;	..\fb_lpc922.c:157: telegramm[6]=senders_pcount + 0xC2;	// Bit 6,7(TCPI = 11 NCD Quittierung) und Bit 0,1 (10=ACK)
   0227 74 C2              1137 	mov	a,#0xC2
   0229 25*06              1138 	add	a,_senders_pcount
   022B F5*0D              1139 	mov	(_telegramm + 0x0006),a
                    022D   1140 	C$fb_lpc922.c$158$5$7 ==.
                           1141 ;	..\fb_lpc922.c:158: break;
   022D 02s02rC0           1142 	ljmp	00131$
                    0230   1143 	C$fb_lpc922.c$159$5$7 ==.
                           1144 ;	..\fb_lpc922.c:159: case 2:	// read mask response (130)
   0230                    1145 00122$:
                    0230   1146 	C$fb_lpc922.c$160$5$7 ==.
                           1147 ;	..\fb_lpc922.c:160: telegramm[5]=0x63;					// DRL
   0230 75*0C 63           1148 	mov	(_telegramm + 0x0005),#0x63
                    0233   1149 	C$fb_lpc922.c$161$5$7 ==.
                           1150 ;	..\fb_lpc922.c:161: telegramm[6]=pcount + 0x43;			// bei response immer eigene Paketnummer senden
   0233 74 43              1151 	mov	a,#0x43
   0235 25*02              1152 	add	a,_pcount
   0237 F5*0D              1153 	mov	(_telegramm + 0x0006),a
                    0239   1154 	C$fb_lpc922.c$162$5$7 ==.
                           1155 ;	..\fb_lpc922.c:162: telegramm[7]=0x40;
   0239 75*0E 40           1156 	mov	(_telegramm + 0x0007),#0x40
                    023C   1157 	C$fb_lpc922.c$163$5$7 ==.
                           1158 ;	..\fb_lpc922.c:163: telegramm[8]=0x00;                  // Medium Type 0 (TP1), FW Type 0
   023C 75*0F 00           1159 	mov	(_telegramm + 0x0008),#0x00
                    023F   1160 	C$fb_lpc922.c$164$5$7 ==.
                           1161 ;	..\fb_lpc922.c:164: telegramm[9]=0x12;					// FW Version 1.2 (Maskenversion 1.2 = BCU1)
   023F 75*10 12           1162 	mov	(_telegramm + 0x0009),#0x12
                    0242   1163 	C$fb_lpc922.c$165$5$7 ==.
                           1164 ;	..\fb_lpc922.c:165: inc_pcount=1;
   0242 D2*0E              1165 	setb	_inc_pcount
                    0244   1166 	C$fb_lpc922.c$166$5$7 ==.
                           1167 ;	..\fb_lpc922.c:166: break;
   0244 02s02rC0           1168 	ljmp	00131$
                    0247   1169 	C$fb_lpc922.c$167$5$7 ==.
                           1170 ;	..\fb_lpc922.c:167: case 3:	// read PA response (131)
   0247                    1171 00123$:
                    0247   1172 	C$fb_lpc922.c$168$5$7 ==.
                           1173 ;	..\fb_lpc922.c:168: telegramm[3]=0x00;			// Zieladresse auf 0000, da Broadcast
   0247 75*0A 00           1174 	mov	(_telegramm + 0x0003),#0x00
                    024A   1175 	C$fb_lpc922.c$169$5$7 ==.
                           1176 ;	..\fb_lpc922.c:169: telegramm[4]=0x00;
   024A 75*0B 00           1177 	mov	(_telegramm + 0x0004),#0x00
                    024D   1178 	C$fb_lpc922.c$170$5$7 ==.
                           1179 ;	..\fb_lpc922.c:170: telegramm[5]=0xE1;			// DRL
   024D 75*0C E1           1180 	mov	(_telegramm + 0x0005),#0xE1
                    0250   1181 	C$fb_lpc922.c$171$5$7 ==.
                           1182 ;	..\fb_lpc922.c:171: telegramm[6]=0x01;
   0250 75*0D 01           1183 	mov	(_telegramm + 0x0006),#0x01
                    0253   1184 	C$fb_lpc922.c$172$5$7 ==.
                           1185 ;	..\fb_lpc922.c:172: telegramm[7]=0x40;
   0253 75*0E 40           1186 	mov	(_telegramm + 0x0007),#0x40
                    0256   1187 	C$fb_lpc922.c$173$5$7 ==.
                           1188 ;	..\fb_lpc922.c:173: break;
                    0256   1189 	C$fb_lpc922.c$174$5$7 ==.
                           1190 ;	..\fb_lpc922.c:174: case 4:	// memory_read_response (132)
   0256 80 68              1191 	sjmp	00131$
   0258                    1192 00124$:
                    0258   1193 	C$fb_lpc922.c$175$1$1 ==.
                           1194 ;	..\fb_lpc922.c:175: for(n=0;n<mem_length;n++) {
   0258 7F 00              1195 	mov	r7,#0x00
   025A                    1196 00255$:
   025A C3                 1197 	clr	c
   025B EF                 1198 	mov	a,r7
   025C 95*03              1199 	subb	a,_mem_length
   025E 50 3C              1200 	jnc	00258$
                    0260   1201 	C$fb_lpc922.c$176$6$8 ==.
                           1202 ;	..\fb_lpc922.c:176: if (mem_adrh==0) {
   0260 E5*04              1203 	mov	a,_mem_adrh
   0262 70 26              1204 	jnz	00128$
                    0264   1205 	C$fb_lpc922.c$177$7$9 ==.
                           1206 ;	..\fb_lpc922.c:177: telegramm[n+10]=0;//userram[mem_adrl+n];
   0264 74 0A              1207 	mov	a,#0x0A
   0266 2F                 1208 	add	a,r7
   0267 24r07              1209 	add	a,#_telegramm
   0269 F8                 1210 	mov	r0,a
   026A 76 00              1211 	mov	@r0,#0x00
                    026C   1212 	C$fb_lpc922.c$178$7$9 ==.
                           1213 ;	..\fb_lpc922.c:178: if(mem_adrl+n==0x60) telegramm[n+10]=status60;	// ausser bei 0x60
   026C AD*05              1214 	mov	r5,_mem_adrl
   026E 7E 00              1215 	mov	r6,#0x00
   0270 8F 03              1216 	mov	ar3,r7
   0272 7C 00              1217 	mov	r4,#0x00
   0274 EB                 1218 	mov	a,r3
   0275 2D                 1219 	add	a,r5
   0276 FD                 1220 	mov	r5,a
   0277 EC                 1221 	mov	a,r4
   0278 3E                 1222 	addc	a,r6
   0279 FE                 1223 	mov	r6,a
   027A BD 60 1C           1224 	cjne	r5,#0x60,00257$
   027D BE 00 19           1225 	cjne	r6,#0x00,00257$
   0280 74 0A              1226 	mov	a,#0x0A
   0282 2F                 1227 	add	a,r7
   0283 24r07              1228 	add	a,#_telegramm
   0285 F8                 1229 	mov	r0,a
   0286 A6*2E              1230 	mov	@r0,_status60
   0288 80 0F              1231 	sjmp	00257$
   028A                    1232 00128$:
                    028A   1233 	C$fb_lpc922.c$180$6$8 ==.
                           1234 ;	..\fb_lpc922.c:180: else telegramm[n+10]=eeprom[mem_adrl+n];//else if (mem_adrh==1)
   028A 74 0A              1235 	mov	a,#0x0A
   028C 2F                 1236 	add	a,r7
   028D 24r07              1237 	add	a,#_telegramm
   028F F9                 1238 	mov	r1,a
   0290 EF                 1239 	mov	a,r7
   0291 25*05              1240 	add	a,_mem_adrl
   0293 90 1D 00           1241 	mov	dptr,#_eeprom
   0296 93                 1242 	movc	a,@a+dptr
   0297 FE                 1243 	mov	r6,a
   0298 F7                 1244 	mov	@r1,a
   0299                    1245 00257$:
                    0299   1246 	C$fb_lpc922.c$175$5$7 ==.
                           1247 ;	..\fb_lpc922.c:175: for(n=0;n<mem_length;n++) {
   0299 0F                 1248 	inc	r7
   029A 80 BE              1249 	sjmp	00255$
   029C                    1250 00258$:
                    029C   1251 	C$fb_lpc922.c$183$5$7 ==.
                           1252 ;	..\fb_lpc922.c:183: telegramm[5]=mem_length+0x63;		// DRL (Anzahl Bytes + 3)
   029C 74 63              1253 	mov	a,#0x63
   029E 25*03              1254 	add	a,_mem_length
   02A0 F5*0C              1255 	mov	(_telegramm + 0x0005),a
                    02A2   1256 	C$fb_lpc922.c$184$5$7 ==.
                           1257 ;	..\fb_lpc922.c:184: telegramm[6]=pcount|0x42;			// eigener Paketzaehler, TCPI und ersten beiden Befehlsbits
   02A2 74 42              1258 	mov	a,#0x42
   02A4 45*02              1259 	orl	a,_pcount
   02A6 F5*0D              1260 	mov	(_telegramm + 0x0006),a
                    02A8   1261 	C$fb_lpc922.c$185$5$7 ==.
                           1262 ;	..\fb_lpc922.c:185: telegramm[7]=mem_length|0x40;		// letzten 2 Befehlsbits
   02A8 74 40              1263 	mov	a,#0x40
   02AA 45*03              1264 	orl	a,_mem_length
   02AC F5*0E              1265 	mov	(_telegramm + 0x0007),a
                    02AE   1266 	C$fb_lpc922.c$186$5$7 ==.
                           1267 ;	..\fb_lpc922.c:186: telegramm[8]=mem_adrh;
   02AE 85*04*0F           1268 	mov	(_telegramm + 0x0008),_mem_adrh
                    02B1   1269 	C$fb_lpc922.c$187$5$7 ==.
                           1270 ;	..\fb_lpc922.c:187: telegramm[9]=mem_adrl;
   02B1 85*05*10           1271 	mov	(_telegramm + 0x0009),_mem_adrl
                    02B4   1272 	C$fb_lpc922.c$188$5$7 ==.
                           1273 ;	..\fb_lpc922.c:188: inc_pcount=1;
   02B4 D2*0E              1274 	setb	_inc_pcount
                    02B6   1275 	C$fb_lpc922.c$189$5$7 ==.
                           1276 ;	..\fb_lpc922.c:189: break;
                    02B6   1277 	C$fb_lpc922.c$190$5$7 ==.
                           1278 ;	..\fb_lpc922.c:190: case 5:	// T-disconnect (133)
   02B6 80 08              1279 	sjmp	00131$
   02B8                    1280 00130$:
                    02B8   1281 	C$fb_lpc922.c$191$5$7 ==.
                           1282 ;	..\fb_lpc922.c:191: telegramm[5]=0x60;
   02B8 75*0C 60           1283 	mov	(_telegramm + 0x0005),#0x60
                    02BB   1284 	C$fb_lpc922.c$192$5$7 ==.
                           1285 ;	..\fb_lpc922.c:192: telegramm[6]=0x81;
   02BB 75*0D 81           1286 	mov	(_telegramm + 0x0006),#0x81
                    02BE   1287 	C$fb_lpc922.c$193$5$7 ==.
                           1288 ;	..\fb_lpc922.c:193: connected=0;
   02BE C2*0D              1289 	clr	_connected
                    02C0   1290 	C$fb_lpc922.c$211$4$6 ==.
                           1291 ;	..\fb_lpc922.c:211: }
   02C0                    1292 00131$:
                    02C0   1293 	C$fb_lpc922.c$212$4$6 ==.
                           1294 ;	..\fb_lpc922.c:212: build_ok=1;
   02C0 D2*00              1295 	setb	b0
   02C2                    1296 00134$:
                    02C2   1297 	C$fb_lpc922.c$214$3$3 ==.
                           1298 ;	..\fb_lpc922.c:214: if(repeatflag) telegramm[0]&=0xDF;		// Wiederholungsbit loeschen fuer Wiederholtelegramm
   02C2 30*00 06           1299 	jnb	b1,00136$
   02C5 74 DF              1300 	mov	a,#0xDF
   02C7 55*07              1301 	anl	a,_telegramm
   02C9 F5*07              1302 	mov	_telegramm,a
   02CB                    1303 00136$:
                    02CB   1304 	C$fb_lpc922.c$217$3$3 ==.
                           1305 ;	..\fb_lpc922.c:217: if(build_ok){//(build_tel(tx_buffer[tx_nextsend])) {	// wenn Telegramm gebildet werden konnte
   02CB 30*00 5F           1306 	jnb	b0,00145$
                    02CE   1307 	C$fb_lpc922.c$218$4$10 ==.
                           1308 ;	..\fb_lpc922.c:218: EX1=0; 				//Um zu vermeiden dass man in die Abfrage hinein-empfaengt
   02CE C2 AA              1309 	clr	_IEN0_2
                    02D0   1310 	C$fb_lpc922.c$219$4$10 ==.
                           1311 ;	..\fb_lpc922.c:219: if(!fb_state) { 	//nur senden wenn vorher kein rx_intit durch ext int kam
   02D0 E5*2A              1312 	mov	a,_fb_state
   02D2 70 54              1313 	jnz	00143$
                    02D4   1314 	C$fb_lpc922.c$221$5$11 ==.
                           1315 ;	..\fb_lpc922.c:221: if(!repeatflag) {	// wenn erstmaliges Senden des Objektes
   02D4 20*00 0E           1316 	jb	b1,00138$
                    02D7   1317 	C$fb_lpc922.c$222$6$12 ==.
                           1318 ;	..\fb_lpc922.c:222: tx_buffer[tx_nextsend]|=0x20;		// Bit fuer "wird gerade gesendet" (war vorher im state 0 )
   02D7 E5*2D              1319 	mov	a,_tx_nextsend
   02D9 24r1E              1320 	add	a,#_tx_buffer
   02DB F9                 1321 	mov	r1,a
   02DC 87 07              1322 	mov	ar7,@r1
   02DE 74 20              1323 	mov	a,#0x20
   02E0 4F                 1324 	orl	a,r7
   02E1 F7                 1325 	mov	@r1,a
                    02E2   1326 	C$fb_lpc922.c$223$6$12 ==.
                           1327 ;	..\fb_lpc922.c:223: repeat_count=0;						// Wiederholungszaehler fuer nicht geackte Telegramme
   02E2 75*2B 00           1328 	mov	_repeat_count,#0x00
   02E5                    1329 00138$:
                    02E5   1330 	C$fb_lpc922.c$225$5$11 ==.
                           1331 ;	..\fb_lpc922.c:225: if (repeat_count<4) init_tx((__bit)(telegramm[0]&0x01)&& repeat_count==0);// Senden starten (eventuell mit 3 Bit verzögerung)
   02E5 74 FC              1332 	mov	a,#0x100 - 0x04
   02E7 25*2B              1333 	add	a,_repeat_count
   02E9 40 27              1334 	jc	00140$
   02EB E5*07              1335 	mov	a,_telegramm
   02ED 54 01              1336 	anl	a,#0x01
   02EF FF                 1337 	mov	r7,a
   02F0 24 FF              1338 	add	a,#0xff
   02F2 92*00              1339 	mov	b0,c
   02F4 50 0A              1340 	jnc	00261$
   02F6 E5*2B              1341 	mov	a,_repeat_count
   02F8 B4 01 00           1342 	cjne	a,#0x01,00357$
   02FB                    1343 00357$:
   02FB E4                 1344 	clr	a
   02FC 33                 1345 	rlc	a
   02FD FF                 1346 	mov	r7,a
   02FE 70 04              1347 	jnz	00262$
   0300                    1348 00261$:
   0300 C2*00              1349 	clr	b0
   0302 80 02              1350 	sjmp	00263$
   0304                    1351 00262$:
   0304 D2*00              1352 	setb	b0
   0306                    1353 00263$:
   0306 A2*00              1354 	mov	c,b0
   0308 92 F0              1355 	mov	b[0],c
   030A 85 F0*00           1356 	mov	bits,b
   030D 12s06r18           1357 	lcall	_init_tx
   0310 80 16              1358 	sjmp	00143$
   0312                    1359 00140$:
                    0312   1360 	C$fb_lpc922.c$228$6$13 ==.
                           1361 ;	..\fb_lpc922.c:228: tx_nextsend++;
   0312 05*2D              1362 	inc	_tx_nextsend
                    0314   1363 	C$fb_lpc922.c$229$6$13 ==.
                           1364 ;	..\fb_lpc922.c:229: tx_nextsend&=0x07;
   0314 53*2D 07           1365 	anl	_tx_nextsend,#0x07
                    0317   1366 	C$fb_lpc922.c$230$6$13 ==.
                           1367 ;	..\fb_lpc922.c:230: wait_for_ack=0;
   0317 C2*0A              1368 	clr	_wait_for_ack
                    0319   1369 	C$fb_lpc922.c$231$6$13 ==.
                           1370 ;	..\fb_lpc922.c:231: inc_pcount=0;
   0319 C2*0E              1371 	clr	_inc_pcount
                    031B   1372 	C$fb_lpc922.c$232$6$13 ==.
                           1373 ;	..\fb_lpc922.c:232: init_rx();
   031B 12s05rEA           1374 	lcall	_init_rx
                    031E   1375 	C$fb_lpc922.c$233$6$13 ==.
                           1376 ;	..\fb_lpc922.c:233: TR1=0;		// hier nicht noch einmal die ganze busfree Zeit warten
   031E C2 8E              1377 	clr	_TCON_6
                    0320   1378 	C$fb_lpc922.c$234$6$13 ==.
                           1379 ;	..\fb_lpc922.c:234: TH1=0xF0;
   0320 75 8D F0           1380 	mov	_TH1,#0xF0
                    0323   1381 	C$fb_lpc922.c$235$6$13 ==.
                           1382 ;	..\fb_lpc922.c:235: TL1=0x00;
   0323 75 8B 00           1383 	mov	_TL1,#0x00
                    0326   1384 	C$fb_lpc922.c$236$6$13 ==.
                           1385 ;	..\fb_lpc922.c:236: TR1=1;
   0326 D2 8E              1386 	setb	_TCON_6
   0328                    1387 00143$:
                    0328   1388 	C$fb_lpc922.c$239$4$10 ==.
                           1389 ;	..\fb_lpc922.c:239: EX1=1;	// ext1 int einschalten falls Empfang...
   0328 D2 AA              1390 	setb	_IEN0_2
   032A 02s05rC6           1391 	ljmp	00254$
   032D                    1392 00145$:
                    032D   1393 	C$fb_lpc922.c$242$4$14 ==.
                           1394 ;	..\fb_lpc922.c:242: tx_nextsend++; //hier Zeiger erhoehen wenn Telegramm nicht gebildet werden konnte
   032D 05*2D              1395 	inc	_tx_nextsend
                    032F   1396 	C$fb_lpc922.c$243$4$14 ==.
                           1397 ;	..\fb_lpc922.c:243: tx_nextsend&=0x07;
   032F 53*2D 07           1398 	anl	_tx_nextsend,#0x07
   0332 02s05rC6           1399 	ljmp	00254$
   0335                    1400 00148$:
                    0335   1401 	C$fb_lpc922.c$247$3$15 ==.
                           1402 ;	..\fb_lpc922.c:247: TR1=0;		// nichts mehr zu tun, also statemachine stoppen
   0335 C2 8E              1403 	clr	_TCON_6
                    0337   1404 	C$fb_lpc922.c$248$3$15 ==.
                           1405 ;	..\fb_lpc922.c:248: EX1=1;		// sicherstellen, dass ext. Int. 1 aktiv ist
   0337 D2 AA              1406 	setb	_IEN0_2
                    0339   1407 	C$fb_lpc922.c$250$2$2 ==.
                           1408 ;	..\fb_lpc922.c:250: break;
   0339 02s05rC6           1409 	ljmp	00254$
                    033C   1410 	C$fb_lpc922.c$253$2$2 ==.
                           1411 ;	..\fb_lpc922.c:253: case 2: // T=75us
   033C                    1412 00150$:
                    033C   1413 	C$fb_lpc922.c$254$2$2 ==.
                           1414 ;	..\fb_lpc922.c:254: fbrx_bit=!IE1;				// Flipflop des ext. Int. 1 auslesen, ist 1 bei fallender Flanke am Pin
   033C A2 8B              1415 	mov	c,_TCON_3
   033E B3                 1416 	cpl	c
   033F 92*00              1417 	mov	b0,c
                    0341   1418 	C$fb_lpc922.c$255$2$2 ==.
                           1419 ;	..\fb_lpc922.c:255: IE1=0;						// Flipflop zuruecksetzen
   0341 C2 8B              1420 	clr	_TCON_3
                    0343   1421 	C$fb_lpc922.c$256$2$2 ==.
                           1422 ;	..\fb_lpc922.c:256: fb_state=3;// naechster state: 3
   0343 75*2A 03           1423 	mov	_fb_state,#0x03
                    0346   1424 	C$fb_lpc922.c$257$2$2 ==.
                           1425 ;	..\fb_lpc922.c:257: TH1=0;// reload auf 70µs (zeit swischen state 3 und 2)
   0346 75 8D 00           1426 	mov	_TH1,#0x00
                    0349   1427 	C$fb_lpc922.c$258$2$2 ==.
                           1428 ;	..\fb_lpc922.c:258: if(fb_pattern==0) {			// fb_pattern=0 bedeutet, dass bisher nur das Startbit empfangen wurde
   0349 E5*29              1429 	mov	a,_fb_pattern
   034B 70 0A              1430 	jnz	00185$
                    034D   1431 	C$fb_lpc922.c$259$3$16 ==.
                           1432 ;	..\fb_lpc922.c:259: fb_pattern=1;			// 70us nach Startbit, als naecstes kommt Datenbit 0
   034D 75*29 01           1433 	mov	_fb_pattern,#0x01
                    0350   1434 	C$fb_lpc922.c$260$3$16 ==.
                           1435 ;	..\fb_lpc922.c:260: ack=0;					// Empfang eines neuen Bytes, also ack/nack Flags zuruecksetzen
   0350 C2*03              1436 	clr	_ack
                    0352   1437 	C$fb_lpc922.c$261$3$16 ==.
                           1438 ;	..\fb_lpc922.c:261: nack=0;
   0352 C2*04              1439 	clr	_nack
   0354 02s05rC6           1440 	ljmp	00254$
   0357                    1441 00185$:
                    0357   1442 	C$fb_lpc922.c$264$3$17 ==.
                           1443 ;	..\fb_lpc922.c:264: if(fb_pattern<129) {					// Daten-Bit LSB first
   0357 74 7F              1444 	mov	a,#0x100 - 0x81
   0359 25*29              1445 	add	a,_fb_pattern
   035B 40 1C              1446 	jc	00182$
                    035D   1447 	C$fb_lpc922.c$265$4$18 ==.
                           1448 ;	..\fb_lpc922.c:265: if(fbrx_bit) {
   035D 30*00 08           1449 	jnb	b0,00152$
                    0360   1450 	C$fb_lpc922.c$266$5$19 ==.
                           1451 ;	..\fb_lpc922.c:266: fb_parity=!fb_parity;			// Paritybit berechnen
   0360 B2*02              1452 	cpl	_fb_parity
                    0362   1453 	C$fb_lpc922.c$267$5$19 ==.
                           1454 ;	..\fb_lpc922.c:267: fbrx_byte+=fb_pattern;			// Datenbit speichern
   0362 E5*29              1455 	mov	a,_fb_pattern
   0364 25*28              1456 	add	a,_fbrx_byte
   0366 F5*28              1457 	mov	_fbrx_byte,a
   0368                    1458 00152$:
                    0368   1459 	C$fb_lpc922.c$269$4$18 ==.
                           1460 ;	..\fb_lpc922.c:269: fb_pattern=fb_pattern<<1;			// naechstes Bit
   0368 E5*29              1461 	mov	a,_fb_pattern
   036A 25*29              1462 	add	a,_fb_pattern
                    036C   1463 	C$fb_lpc922.c$270$4$18 ==.
                           1464 ;	..\fb_lpc922.c:270: if(fb_pattern==0) fb_pattern=129;	// alle Daten-Bits gelesen, Parity-Bit folgt
   036C F5*29              1465 	mov	_fb_pattern,a
   036E 60 03              1466 	jz	00362$
   0370 02s05rC6           1467 	ljmp	00254$
   0373                    1468 00362$:
   0373 75*29 81           1469 	mov	_fb_pattern,#0x81
   0376 02s05rC6           1470 	ljmp	00254$
   0379                    1471 00182$:
                    0379   1472 	C$fb_lpc922.c$273$4$20 ==.
                           1473 ;	..\fb_lpc922.c:273: TR1=0;
   0379 C2 8E              1474 	clr	_TCON_6
                    037B   1475 	C$fb_lpc922.c$274$4$20 ==.
                           1476 ;	..\fb_lpc922.c:274: TF1=0; //pruefen ob erforderlich!!!
   037B C2 8F              1477 	clr	_TCON_7
                    037D   1478 	C$fb_lpc922.c$275$4$20 ==.
                           1479 ;	..\fb_lpc922.c:275: if(fb_parity==fbrx_bit) {				// Parity-Bit OK
   037D A2*02              1480 	mov	c,_fb_parity
   037F 20*00 01           1481 	jb	b0,00363$
   0382 B3                 1482 	cpl	c
   0383                    1483 00363$:
   0383 50 2C              1484 	jnc	00166$
                    0385   1485 	C$fb_lpc922.c$276$5$21 ==.
                           1486 ;	..\fb_lpc922.c:276: if (telpos==0) {						// erstes empfangenes Byte
   0385 E5*26              1487 	mov	a,_telpos
   0387 70 0E              1488 	jnz	00160$
                    0389   1489 	C$fb_lpc922.c$277$6$22 ==.
                           1490 ;	..\fb_lpc922.c:277: if (fbrx_byte==0xCC) ack=1;				// ACK empfangen
   0389 74 CC              1491 	mov	a,#0xCC
   038B B5*28 02           1492 	cjne	a,_fbrx_byte,00156$
   038E D2*03              1493 	setb	_ack
   0390                    1494 00156$:
                    0390   1495 	C$fb_lpc922.c$278$6$22 ==.
                           1496 ;	..\fb_lpc922.c:278: if (fbrx_byte==0x0C) nack=1;			// NACK empfangen
   0390 74 0C              1497 	mov	a,#0x0C
   0392 B5*28 02           1498 	cjne	a,_fbrx_byte,00160$
   0395 D2*04              1499 	setb	_nack
   0397                    1500 00160$:
                    0397   1501 	C$fb_lpc922.c$280$5$21 ==.
                           1502 ;	..\fb_lpc922.c:280: if (!ack && !nack && telpos<=22) {			// Datenbyte empfangen, pointer auf Arraygroesse begrenzen
   0397 20*03 19           1503 	jb	_ack,00167$
   039A 20*04 16           1504 	jb	_nack,00167$
   039D E5*26              1505 	mov	a,_telpos
   039F 24 E9              1506 	add	a,#0xff - 0x16
   03A1 40 10              1507 	jc	00167$
                    03A3   1508 	C$fb_lpc922.c$281$6$23 ==.
                           1509 ;	..\fb_lpc922.c:281: telegramm[telpos]=fbrx_byte;			// Byte speichern
   03A3 E5*26              1510 	mov	a,_telpos
   03A5 24r07              1511 	add	a,#_telegramm
   03A7 F8                 1512 	mov	r0,a
                    03A8   1513 	C$fb_lpc922.c$282$6$23 ==.
                           1514 ;	..\fb_lpc922.c:282: cs^=fbrx_byte;							// Checksum berechnen
   03A8 E5*28              1515 	mov	a,_fbrx_byte
   03AA F6                 1516 	mov	@r0,a
   03AB 62*27              1517 	xrl	_cs,a
                    03AD   1518 	C$fb_lpc922.c$283$6$23 ==.
                           1519 ;	..\fb_lpc922.c:283: telpos++;								// Telegrammzeiger erhoehen
   03AD 05*26              1520 	inc	_telpos
   03AF 80 02              1521 	sjmp	00167$
   03B1                    1522 00166$:
                    03B1   1523 	C$fb_lpc922.c$286$4$20 ==.
                           1524 ;	..\fb_lpc922.c:286: else parity_ok=0;						// Parity Error
   03B1 C2*00              1525 	clr	_parity_ok
   03B3                    1526 00167$:
                    03B3   1527 	C$fb_lpc922.c$288$4$20 ==.
                           1528 ;	..\fb_lpc922.c:288: if (wait_for_ack) {						// es wird ein ACK erwartet
                    03B3   1529 	C$fb_lpc922.c$289$5$24 ==.
                           1530 ;	..\fb_lpc922.c:289: wait_for_ack=0;							// Flag zurücksetzen, da wir es ja gerade abarbeiten
   03B3 10*0A 02           1531 	jbc	_wait_for_ack,00373$
   03B6 80 1D              1532 	sjmp	00179$
   03B8                    1533 00373$:
                    03B8   1534 	C$fb_lpc922.c$290$5$24 ==.
                           1535 ;	..\fb_lpc922.c:290: if (ack && parity_ok) {					// ACK empfangen und auch erwartet
   03B8 30*03 14           1536 	jnb	_ack,00171$
   03BB 30*00 11           1537 	jnb	_parity_ok,00171$
                    03BE   1538 	C$fb_lpc922.c$291$6$25 ==.
                           1539 ;	..\fb_lpc922.c:291: repeat_count=4;						// keine Wiederholtelegramme mehr senden
   03BE 75*2B 04           1540 	mov	_repeat_count,#0x04
                    03C1   1541 	C$fb_lpc922.c$295$6$25 ==.
                           1542 ;	..\fb_lpc922.c:295: if(inc_pcount) {
                    03C1   1543 	C$fb_lpc922.c$296$7$26 ==.
                           1544 ;	..\fb_lpc922.c:296: inc_pcount=0;
   03C1 10*0E 02           1545 	jbc	_inc_pcount,00376$
   03C4 80 09              1546 	sjmp	00171$
   03C6                    1547 00376$:
                    03C6   1548 	C$fb_lpc922.c$297$7$26 ==.
                           1549 ;	..\fb_lpc922.c:297: pcount+=4;
   03C6 E5*02              1550 	mov	a,_pcount
   03C8 24 04              1551 	add	a,#0x04
   03CA F5*02              1552 	mov	_pcount,a
                    03CC   1553 	C$fb_lpc922.c$298$7$26 ==.
                           1554 ;	..\fb_lpc922.c:298: pcount&=0x3C;
   03CC 53*02 3C           1555 	anl	_pcount,#0x3C
   03CF                    1556 00171$:
                    03CF   1557 	C$fb_lpc922.c$301$5$24 ==.
                           1558 ;	..\fb_lpc922.c:301: init_rx();
   03CF 12s05rEA           1559 	lcall	_init_rx
   03D2 02s05rC6           1560 	ljmp	00254$
   03D5                    1561 00179$:
                    03D5   1562 	C$fb_lpc922.c$304$5$27 ==.
                           1563 ;	..\fb_lpc922.c:304: if (parity_ok && (!ack && !nack)) {		// ganz normales Datenbyte
   03D5 30*00 1E           1564 	jnb	_parity_ok,00174$
   03D8 20*03 1B           1565 	jb	_ack,00174$
   03DB 20*04 18           1566 	jb	_nack,00174$
                    03DE   1567 	C$fb_lpc922.c$305$6$28 ==.
                           1568 ;	..\fb_lpc922.c:305: TMOD=(TMOD & 0x0F) +0x10;			// Timer 1 als 16-Bit Timer
   03DE 74 0F              1569 	mov	a,#0x0F
   03E0 55 89              1570 	anl	a,_TMOD
   03E2 24 10              1571 	add	a,#0x10
   03E4 F5 89              1572 	mov	_TMOD,a
                    03E6   1573 	C$fb_lpc922.c$306$6$28 ==.
                           1574 ;	..\fb_lpc922.c:306: TH1=0xFA;//0xFA;							// Timer 1 auf Timeout-Position setzen (370us)
   03E6 75 8D FA           1575 	mov	_TH1,#0xFA
                    03E9   1576 	C$fb_lpc922.c$307$6$28 ==.
                           1577 ;	..\fb_lpc922.c:307: TL1=0x70;//4f 0xAB; (bis hierher sinds 91Âµs)
   03E9 75 8B 70           1578 	mov	_TL1,#0x70
                    03EC   1579 	C$fb_lpc922.c$308$6$28 ==.
                           1580 ;	..\fb_lpc922.c:308: TR1=1;
   03EC D2 8E              1581 	setb	_TCON_6
                    03EE   1582 	C$fb_lpc922.c$309$6$28 ==.
                           1583 ;	..\fb_lpc922.c:309: fb_state=4;							// naechster state: timeout = Telegramm fertig
   03EE 75*2A 04           1584 	mov	_fb_state,#0x04
                    03F1   1585 	C$fb_lpc922.c$310$6$28 ==.
                           1586 ;	..\fb_lpc922.c:310: EX1=1;								// int1 aktiv, falls noch ein Byte kommt
   03F1 D2 AA              1587 	setb	_IEN0_2
   03F3 02s05rC6           1588 	ljmp	00254$
   03F6                    1589 00174$:
                    03F6   1590 	C$fb_lpc922.c$312$5$27 ==.
                           1591 ;	..\fb_lpc922.c:312: else init_rx();							// irgendwas empfangen
   03F6 12s05rEA           1592 	lcall	_init_rx
                    03F9   1593 	C$fb_lpc922.c$316$2$2 ==.
                           1594 ;	..\fb_lpc922.c:316: break;
   03F9 02s05rC6           1595 	ljmp	00254$
                    03FC   1596 	C$fb_lpc922.c$318$2$2 ==.
                           1597 ;	..\fb_lpc922.c:318: case 3: // T=104us=0us
   03FC                    1598 00187$:
                    03FC   1599 	C$fb_lpc922.c$319$2$2 ==.
                           1600 ;	..\fb_lpc922.c:319: TH1=128;// reload auf 35Âµs (Zeit zwischen State 2 und 3)
   03FC 75 8D 80           1601 	mov	_TH1,#0x80
                    03FF   1602 	C$fb_lpc922.c$320$2$2 ==.
                           1603 ;	..\fb_lpc922.c:320: fb_state=2;//1
   03FF 75*2A 02           1604 	mov	_fb_state,#0x02
                    0402   1605 	C$fb_lpc922.c$321$2$2 ==.
                           1606 ;	..\fb_lpc922.c:321: break;
   0402 02s05rC6           1607 	ljmp	00254$
                    0405   1608 	C$fb_lpc922.c$323$2$2 ==.
                           1609 ;	..\fb_lpc922.c:323: case 4:	//	Timeout, d.h. Telegramm-Ende
   0405                    1610 00188$:
                    0405   1611 	C$fb_lpc922.c$324$2$2 ==.
                           1612 ;	..\fb_lpc922.c:324: if (auto_ack && telpos>7) {//>4		// wenn ACK/NACK gesendet werden soll und Telegramm zumindest 7 Bytes hat, da sonst ein NACK wenig Sinn macht
   0405 20*08 03           1613 	jb	_auto_ack,00380$
   0408 02s04r89           1614 	ljmp	00206$
   040B                    1615 00380$:
   040B E5*26              1616 	mov	a,_telpos
   040D 24 F8              1617 	add	a,#0xff - 0x07
   040F 50 78              1618 	jnc	00206$
                    0411   1619 	C$fb_lpc922.c$325$3$29 ==.
                           1620 ;	..\fb_lpc922.c:325: TR1=0;
   0411 C2 8E              1621 	clr	_TCON_6
                    0413   1622 	C$fb_lpc922.c$326$3$29 ==.
                           1623 ;	..\fb_lpc922.c:326: TMOD=(TMOD & 0x0F) +0x10;	// Timer 1 als 16-Bit Timer
   0413 74 0F              1624 	mov	a,#0x0F
   0415 55 89              1625 	anl	a,_TMOD
   0417 24 10              1626 	add	a,#0x10
   0419 F5 89              1627 	mov	_TMOD,a
                    041B   1628 	C$fb_lpc922.c$327$3$29 ==.
                           1629 ;	..\fb_lpc922.c:327: TH1=0xEF;					// Timer 1 auf ACK / NACK -Position setzen (15 Bit Pause = 2708Âµs (26 Bit) nach Beginn Startbit vom letzten Datenbyte)
   041B 75 8D EF           1630 	mov	_TH1,#0xEF
                    041E   1631 	C$fb_lpc922.c$328$3$29 ==.
                           1632 ;	..\fb_lpc922.c:328: TL1=0x42;
   041E 75 8B 42           1633 	mov	_TL1,#0x42
                    0421   1634 	C$fb_lpc922.c$329$3$29 ==.
                           1635 ;	..\fb_lpc922.c:329: TR1=1;
   0421 D2 8E              1636 	setb	_TCON_6
                    0423   1637 	C$fb_lpc922.c$330$3$29 ==.
                           1638 ;	..\fb_lpc922.c:330: its_me=0;//transparency; // indiziert, ob dieses Geraet adressiert wurde, bei transparecy=1 immer
   0423 C2*05              1639 	clr	_its_me
                    0425   1640 	C$fb_lpc922.c$331$3$29 ==.
                           1641 ;	..\fb_lpc922.c:331: if(telegramm[5]&0x80) {
   0425 E5*0C              1642 	mov	a,(_telegramm + 0x0005)
   0427 30 E7 1F           1643 	jnb	acc.7,00198$
                    042A   1644 	C$fb_lpc922.c$332$4$30 ==.
                           1645 ;	..\fb_lpc922.c:332: if (gapos_in_gat(telegramm[3],telegramm[4])!=0xFF) its_me=1;	// Gruppenadresse
   042A 85*0A 82           1646 	mov	dpl,(_telegramm + 0x0003)
   042D C0*0B              1647 	push	(_telegramm + 0x0004)
   042F 12s06r7A           1648 	lcall	_gapos_in_gat
   0432 AF 82              1649 	mov	r7,dpl
   0434 15 81              1650 	dec	sp
   0436 BF FF 02           1651 	cjne	r7,#0xFF,00383$
   0439 80 02              1652 	sjmp	00190$
   043B                    1653 00383$:
   043B D2*05              1654 	setb	_its_me
   043D                    1655 00190$:
                    043D   1656 	C$fb_lpc922.c$333$4$30 ==.
                           1657 ;	..\fb_lpc922.c:333: if (telegramm[3]==0 && telegramm[4]==0) its_me=1;				// Broadcast
   043D E5*0A              1658 	mov	a,(_telegramm + 0x0003)
   043F 70 1C              1659 	jnz	00199$
   0441 E5*0B              1660 	mov	a,(_telegramm + 0x0004)
   0443 70 18              1661 	jnz	00199$
   0445 D2*05              1662 	setb	_its_me
   0447 80 14              1663 	sjmp	00199$
   0449                    1664 00198$:
                    0449   1665 	C$fb_lpc922.c$335$3$29 ==.
                           1666 ;	..\fb_lpc922.c:335: else if(telegramm[3]==eeprom[ADDRTAB+1] && telegramm[4]==eeprom[ADDRTAB+2]) its_me=1;	// phys. Adresse
   0449 90 1D 17           1667 	mov	dptr,#(_eeprom + 0x0017)
   044C E4                 1668 	clr	a
   044D 93                 1669 	movc	a,@a+dptr
   044E FF                 1670 	mov	r7,a
   044F B5*0A 0B           1671 	cjne	a,(_telegramm + 0x0003),00199$
   0452 90 1D 18           1672 	mov	dptr,#(_eeprom + 0x0018)
   0455 E4                 1673 	clr	a
   0456 93                 1674 	movc	a,@a+dptr
   0457 FF                 1675 	mov	r7,a
   0458 B5*0B 02           1676 	cjne	a,(_telegramm + 0x0004),00199$
   045B D2*05              1677 	setb	_its_me
   045D                    1678 00199$:
                    045D   1679 	C$fb_lpc922.c$338$3$29 ==.
                           1680 ;	..\fb_lpc922.c:338: if ((cs==0xFF)&&((telegramm[5]&0x0F)+8)== (telpos))
   045D 74 FF              1681 	mov	a,#0xFF
   045F B5*27 21           1682 	cjne	a,_cs,00203$
   0462 74 0F              1683 	mov	a,#0x0F
   0464 55*0C              1684 	anl	a,(_telegramm + 0x0005)
   0466 FF                 1685 	mov	r7,a
   0467 7E 00              1686 	mov	r6,#0x00
   0469 74 08              1687 	mov	a,#0x08
   046B 2F                 1688 	add	a,r7
   046C FF                 1689 	mov	r7,a
   046D E4                 1690 	clr	a
   046E 3E                 1691 	addc	a,r6
   046F FE                 1692 	mov	r6,a
   0470 AC*26              1693 	mov	r4,_telpos
   0472 7D 00              1694 	mov	r5,#0x00
   0474 EF                 1695 	mov	a,r7
   0475 B5 04 0B           1696 	cjne	a,ar4,00203$
   0478 EE                 1697 	mov	a,r6
   0479 B5 05 07           1698 	cjne	a,ar5,00203$
                    047C   1699 	C$fb_lpc922.c$340$4$31 ==.
                           1700 ;	..\fb_lpc922.c:340: telegramm_ok=1;
   047C D2*0F              1701 	setb	_telegramm_ok
                    047E   1702 	C$fb_lpc922.c$341$4$31 ==.
                           1703 ;	..\fb_lpc922.c:341: if(its_me)tel_arrived=1;//&&(telegramm[5]&0x0F== telpos-8)
   047E 30*05 02           1704 	jnb	_its_me,00203$
   0481 D2*06              1705 	setb	_tel_arrived
   0483                    1706 00203$:
                    0483   1707 	C$fb_lpc922.c$343$3$29 ==.
                           1708 ;	..\fb_lpc922.c:343: fb_state=5;					// naechster state: ACK-Position erreicht
   0483 75*2A 05           1709 	mov	_fb_state,#0x05
   0486 02s05rC6           1710 	ljmp	00254$
   0489                    1711 00206$:
                    0489   1712 	C$fb_lpc922.c$348$3$32 ==.
                           1713 ;	..\fb_lpc922.c:348: init_rx();						// wieder in den Empfang zurück
   0489 12s05rEA           1714 	lcall	_init_rx
                    048C   1715 	C$fb_lpc922.c$350$2$2 ==.
                           1716 ;	..\fb_lpc922.c:350: break;
   048C 02s05rC6           1717 	ljmp	00254$
                    048F   1718 	C$fb_lpc922.c$352$2$2 ==.
                           1719 ;	..\fb_lpc922.c:352: case 5:	// ACK-Position erreicht
   048F                    1720 00209$:
                    048F   1721 	C$fb_lpc922.c$353$2$2 ==.
                           1722 ;	..\fb_lpc922.c:353: TR1=0;
   048F C2 8E              1723 	clr	_TCON_6
                    0491   1724 	C$fb_lpc922.c$354$2$2 ==.
                           1725 ;	..\fb_lpc922.c:354: if (telegramm_ok) {	// Checksum und Laenge OK
   0491 30*0F 18           1726 	jnb	_telegramm_ok,00214$
                    0494   1727 	C$fb_lpc922.c$355$3$33 ==.
                           1728 ;	..\fb_lpc922.c:355: if (its_me) {					// Gerät adressiert
   0494 30*05 0F           1729 	jnb	_its_me,00211$
                    0497   1730 	C$fb_lpc922.c$356$4$34 ==.
                           1731 ;	..\fb_lpc922.c:356: send_ack=1;
   0497 D2*0B              1732 	setb	_send_ack
                    0499   1733 	C$fb_lpc922.c$357$4$34 ==.
                           1734 ;	..\fb_lpc922.c:357: init_tx(0);						// Senden initiieren
   0499 C2 F0              1735 	clr	b[0]
   049B 85 F0*00           1736 	mov	bits,b
   049E 12s06r18           1737 	lcall	_init_tx
                    04A1   1738 	C$fb_lpc922.c$358$4$34 ==.
                           1739 ;	..\fb_lpc922.c:358: wait_for_ack=0;					// bei ACK senden nicht erneut auf ACK warten
   04A1 C2*0A              1740 	clr	_wait_for_ack
   04A3 02s05rC6           1741 	ljmp	00254$
   04A6                    1742 00211$:
                    04A6   1743 	C$fb_lpc922.c$360$3$33 ==.
                           1744 ;	..\fb_lpc922.c:360: else init_rx();					// Gerät nicht adressiert, also zurück zu Empfang
   04A6 12s05rEA           1745 	lcall	_init_rx
   04A9 02s05rC6           1746 	ljmp	00254$
   04AC                    1747 00214$:
                    04AC   1748 	C$fb_lpc922.c$363$3$35 ==.
                           1749 ;	..\fb_lpc922.c:363: send_nack=1;
   04AC D2*0C              1750 	setb	_send_nack
                    04AE   1751 	C$fb_lpc922.c$364$3$35 ==.
                           1752 ;	..\fb_lpc922.c:364: init_tx(0);
   04AE C2 F0              1753 	clr	b[0]
   04B0 85 F0*00           1754 	mov	bits,b
   04B3 12s06r18           1755 	lcall	_init_tx
                    04B6   1756 	C$fb_lpc922.c$365$3$35 ==.
                           1757 ;	..\fb_lpc922.c:365: wait_for_ack=0;					// bei NACK senden nicht erneut auf ACK warten
   04B6 C2*0A              1758 	clr	_wait_for_ack
                    04B8   1759 	C$fb_lpc922.c$367$2$2 ==.
                           1760 ;	..\fb_lpc922.c:367: break;
   04B8 02s05rC6           1761 	ljmp	00254$
                    04BB   1762 	C$fb_lpc922.c$369$2$2 ==.
                           1763 ;	..\fb_lpc922.c:369: case 9:
   04BB                    1764 00216$:
                    04BB   1765 	C$fb_lpc922.c$370$2$2 ==.
                           1766 ;	..\fb_lpc922.c:370: TR1=0;			// Timer 1 stoppen
   04BB C2 8E              1767 	clr	_TCON_6
                    04BD   1768 	C$fb_lpc922.c$371$2$2 ==.
                           1769 ;	..\fb_lpc922.c:371: TMOD=(TMOD & 0x0F) + 0x20;	// Timer 1 als 8-Bit autoreload
   04BD 74 0F              1770 	mov	a,#0x0F
   04BF 55 89              1771 	anl	a,_TMOD
   04C1 24 20              1772 	add	a,#0x20
   04C3 F5 89              1773 	mov	_TMOD,a
                    04C5   1774 	C$fb_lpc922.c$372$2$2 ==.
                           1775 ;	..\fb_lpc922.c:372: TL1=128;		// Timer laden
   04C5 75 8B 80           1776 	mov	_TL1,#0x80
                    04C8   1777 	C$fb_lpc922.c$373$2$2 ==.
                           1778 ;	..\fb_lpc922.c:373: TH1=110;
   04C8 75 8D 6E           1779 	mov	_TH1,#0x6E
                    04CB   1780 	C$fb_lpc922.c$374$2$2 ==.
                           1781 ;	..\fb_lpc922.c:374: TF1=0;			// Timer1-flag loeschen						1 cycle
   04CB C2 8F              1782 	clr	_TCON_7
                    04CD   1783 	C$fb_lpc922.c$375$2$2 ==.
                           1784 ;	..\fb_lpc922.c:375: TR1=1;			// Timer1 starten							1 cycle
   04CD D2 8E              1785 	setb	_TCON_6
                    04CF   1786 	C$fb_lpc922.c$376$2$2 ==.
                           1787 ;	..\fb_lpc922.c:376: fb_state=10;
   04CF 75*2A 0A           1788 	mov	_fb_state,#0x0A
                    04D2   1789 	C$fb_lpc922.c$377$2$2 ==.
                           1790 ;	..\fb_lpc922.c:377: break;
   04D2 02s05rC6           1791 	ljmp	00254$
                    04D5   1792 	C$fb_lpc922.c$379$2$2 ==.
                           1793 ;	..\fb_lpc922.c:379: case 10:	// Byte Senden, T=0us
   04D5                    1794 00217$:
                    04D5   1795 	C$fb_lpc922.c$380$2$2 ==.
                           1796 ;	..\fb_lpc922.c:380: send_byte=telegramm[telpos];
   04D5 E5*26              1797 	mov	a,_telpos
   04D7 24r07              1798 	add	a,#_telegramm
   04D9 F9                 1799 	mov	r1,a
   04DA 87 07              1800 	mov	ar7,@r1
                    04DC   1801 	C$fb_lpc922.c$381$2$2 ==.
                           1802 ;	..\fb_lpc922.c:381: if (send_ack) send_byte=0xCC;
   04DC 30*0B 02           1803 	jnb	_send_ack,00219$
   04DF 7F CC              1804 	mov	r7,#0xCC
   04E1                    1805 00219$:
                    04E1   1806 	C$fb_lpc922.c$382$2$2 ==.
                           1807 ;	..\fb_lpc922.c:382: if (send_nack) send_byte=0x0C;
   04E1 30*0C 02           1808 	jnb	_send_nack,00221$
   04E4 7F 0C              1809 	mov	r7,#0x0C
   04E6                    1810 00221$:
                    04E6   1811 	C$fb_lpc922.c$383$2$2 ==.
                           1812 ;	..\fb_lpc922.c:383: EX1=0;					// Empfang verhindern
   04E6 C2 AA              1813 	clr	_IEN0_2
                    04E8   1814 	C$fb_lpc922.c$384$2$2 ==.
                           1815 ;	..\fb_lpc922.c:384: if(fb_state==10){
   04E8 74 0A              1816 	mov	a,#0x0A
   04EA B5*2A 02           1817 	cjne	a,_fb_state,00399$
   04ED 80 03              1818 	sjmp	00400$
   04EF                    1819 00399$:
   04EF 02s05rC6           1820 	ljmp	00254$
   04F2                    1821 00400$:
                    04F2   1822 	C$fb_lpc922.c$385$3$36 ==.
                           1823 ;	..\fb_lpc922.c:385: if (fb_pattern<=128) {			// Startbit und Datenbits (pattern=0:startbit, 1 2 4 8 .. 128 Datenbits, 129 parity)
   04F2 E5*29              1824 	mov	a,_fb_pattern
   04F4 24 7F              1825 	add	a,#0xff - 0x80
   04F6 40 2C              1826 	jc	00234$
                    04F8   1827 	C$fb_lpc922.c$386$4$37 ==.
                           1828 ;	..\fb_lpc922.c:386: if ((send_byte & fb_pattern)==0) {	// wenn Bit logisch 0 ist
   04F8 E5*29              1829 	mov	a,_fb_pattern
   04FA 5F                 1830 	anl	a,r7
   04FB 70 08              1831 	jnz	00223$
                    04FD   1832 	C$fb_lpc922.c$388$5$38 ==.
                           1833 ;	..\fb_lpc922.c:388: FBOUTC=1;						// Bus runter ziehen
   04FD D2 96              1834 	setb	_P1_6
                    04FF   1835 	C$fb_lpc922.c$390$5$38 ==.
                           1836 ;	..\fb_lpc922.c:390: fbtx_bit=0;						// fbtx_bit dient zur spaeteren Kollisionspruefung
   04FF C2*09              1837 	clr	_fbtx_bit
                    0501   1838 	C$fb_lpc922.c$391$5$38 ==.
                           1839 ;	..\fb_lpc922.c:391: fb_parity=!fb_parity;			// Parity-Bit berechnen
   0501 B2*02              1840 	cpl	_fb_parity
   0503 80 02              1841 	sjmp	00224$
   0505                    1842 00223$:
                    0505   1843 	C$fb_lpc922.c$393$4$37 ==.
                           1844 ;	..\fb_lpc922.c:393: else fbtx_bit=1;
   0505 D2*09              1845 	setb	_fbtx_bit
   0507                    1846 00224$:
                    0507   1847 	C$fb_lpc922.c$394$4$37 ==.
                           1848 ;	..\fb_lpc922.c:394: if (fb_pattern==0) {				// wenn Startbit: parity zuruecksetzen
   0507 E5*29              1849 	mov	a,_fb_pattern
   0509 70 07              1850 	jnz	00226$
                    050B   1851 	C$fb_lpc922.c$395$5$39 ==.
                           1852 ;	..\fb_lpc922.c:395: fb_pattern=1;					// auf erstes Datenbit zeigen
   050B 75*29 01           1853 	mov	_fb_pattern,#0x01
                    050E   1854 	C$fb_lpc922.c$396$5$39 ==.
                           1855 ;	..\fb_lpc922.c:396: fb_parity=0;
   050E C2*02              1856 	clr	_fb_parity
   0510 80 06              1857 	sjmp	00227$
   0512                    1858 00226$:
                    0512   1859 	C$fb_lpc922.c$398$4$37 ==.
                           1860 ;	..\fb_lpc922.c:398: else fb_pattern=fb_pattern<<1;		// naechstes Datenbit
   0512 E5*29              1861 	mov	a,_fb_pattern
   0514 25*29              1862 	add	a,_fb_pattern
   0516 F5*29              1863 	mov	_fb_pattern,a
   0518                    1864 00227$:
                    0518   1865 	C$fb_lpc922.c$399$4$37 ==.
                           1866 ;	..\fb_lpc922.c:399: if(fb_pattern==0) fb_pattern=129;	// alle Daten-Bits gesendet, Parity-Bit folgt
   0518 E5*29              1867 	mov	a,_fb_pattern
   051A 70 03              1868 	jnz	00229$
   051C 75*29 81           1869 	mov	_fb_pattern,#0x81
   051F                    1870 00229$:
                    051F   1871 	C$fb_lpc922.c$400$4$37 ==.
                           1872 ;	..\fb_lpc922.c:400: fb_state=11;
   051F 75*2A 0B           1873 	mov	_fb_state,#0x0B
   0522 80 13              1874 	sjmp	00235$
   0524                    1875 00234$:
                    0524   1876 	C$fb_lpc922.c$403$4$40 ==.
                           1877 ;	..\fb_lpc922.c:403: if (!fb_parity) {				// wenn Parity-Bit logisch 0
   0524 20*02 06           1878 	jb	_fb_parity,00231$
                    0527   1879 	C$fb_lpc922.c$404$5$41 ==.
                           1880 ;	..\fb_lpc922.c:404: FBOUTC=1;						// Bus runterziehen
   0527 D2 96              1881 	setb	_P1_6
                    0529   1882 	C$fb_lpc922.c$405$5$41 ==.
                           1883 ;	..\fb_lpc922.c:405: fbtx_bit=0;						// fbtx_bit dient zur spaeteren Kollisionspruefung
   0529 C2*09              1884 	clr	_fbtx_bit
   052B 80 02              1885 	sjmp	00232$
   052D                    1886 00231$:
                    052D   1887 	C$fb_lpc922.c$407$4$40 ==.
                           1888 ;	..\fb_lpc922.c:407: else fbtx_bit=1;
   052D D2*09              1889 	setb	_fbtx_bit
   052F                    1890 00232$:
                    052F   1891 	C$fb_lpc922.c$408$4$40 ==.
                           1892 ;	..\fb_lpc922.c:408: telpos++;					// naechstes Byte
   052F 05*26              1893 	inc	_telpos
                    0531   1894 	C$fb_lpc922.c$409$4$40 ==.
                           1895 ;	..\fb_lpc922.c:409: fb_pattern=0;				// wieder mit Startbit beginnen
   0531 75*29 00           1896 	mov	_fb_pattern,#0x00
                    0534   1897 	C$fb_lpc922.c$410$4$40 ==.
                           1898 ;	..\fb_lpc922.c:410: fb_state=13;				// Pruefen ob Telegramm fertig
   0534 75*2A 0D           1899 	mov	_fb_state,#0x0D
   0537                    1900 00235$:
                    0537   1901 	C$fb_lpc922.c$412$3$36 ==.
                           1902 ;	..\fb_lpc922.c:412: TH1=18; //reload 70µ -delay interrupt (von state 11 auf 13)
   0537 75 8D 12           1903 	mov	_TH1,#0x12
                    053A   1904 	C$fb_lpc922.c$414$2$2 ==.
                           1905 ;	..\fb_lpc922.c:414: break;
   053A 02s05rC6           1906 	ljmp	00254$
                    053D   1907 	C$fb_lpc922.c$416$2$2 ==.
                           1908 ;	..\fb_lpc922.c:416: case 11:	// Sendestufe aus, T=35us
   053D                    1909 00238$:
                    053D   1910 	C$fb_lpc922.c$417$2$2 ==.
                           1911 ;	..\fb_lpc922.c:417: if(telpos==0 && fb_pattern==1) {	// 1. Byte Startbit
   053D E5*26              1912 	mov	a,_telpos
   053F 70 07              1913 	jnz	00240$
   0541 74 01              1914 	mov	a,#0x01
   0543 B5*29 02           1915 	cjne	a,_fb_pattern,00240$
                    0546   1916 	C$fb_lpc922.c$418$3$42 ==.
                           1917 ;	..\fb_lpc922.c:418: repeat_count++;		// angefangener Sendeversuch, also Zaehler erhoehen
   0546 05*2B              1918 	inc	_repeat_count
   0548                    1919 00240$:
                    0548   1920 	C$fb_lpc922.c$420$2$2 ==.
                           1921 ;	..\fb_lpc922.c:420: FBOUTC=0;				// Sendestufe aus
   0548 C2 96              1922 	clr	_P1_6
                    054A   1923 	C$fb_lpc922.c$421$2$2 ==.
                           1924 ;	..\fb_lpc922.c:421: if (fbtx_bit & IE1) {	// Kollision
   054A A2*09              1925 	mov	c,_fbtx_bit
   054C 82 8B              1926 	anl	c,_TCON_3
   054E 50 07              1927 	jnc	00243$
                    0550   1928 	C$fb_lpc922.c$422$3$43 ==.
                           1929 ;	..\fb_lpc922.c:422: wait_for_ack=0;
   0550 C2*0A              1930 	clr	_wait_for_ack
                    0552   1931 	C$fb_lpc922.c$423$3$43 ==.
                           1932 ;	..\fb_lpc922.c:423: init_rx();				// Senden abbrechen und Empfang initialisieren
   0552 12s05rEA           1933 	lcall	_init_rx
   0555 80 06              1934 	sjmp	00244$
   0557                    1935 00243$:
                    0557   1936 	C$fb_lpc922.c$426$3$44 ==.
                           1937 ;	..\fb_lpc922.c:426: fb_state=10;//12;
   0557 75*2A 0A           1938 	mov	_fb_state,#0x0A
                    055A   1939 	C$fb_lpc922.c$427$3$44 ==.
                           1940 ;	..\fb_lpc922.c:427: TH1=110;// 35Âµs + delay (von state 10 auf 11)
   055A 75 8D 6E           1941 	mov	_TH1,#0x6E
   055D                    1942 00244$:
                    055D   1943 	C$fb_lpc922.c$429$2$2 ==.
                           1944 ;	..\fb_lpc922.c:429: IE1=0;					// Flipflop loeschen
   055D C2 8B              1945 	clr	_TCON_3
                    055F   1946 	C$fb_lpc922.c$430$2$2 ==.
                           1947 ;	..\fb_lpc922.c:430: break;
                    055F   1948 	C$fb_lpc922.c$436$2$2 ==.
                           1949 ;	..\fb_lpc922.c:436: case 13:	// Byte uebertragen, T=35us, pruefen ob Telegramm fertig
   055F 80 65              1950 	sjmp	00254$
   0561                    1951 00245$:
                    0561   1952 	C$fb_lpc922.c$437$2$2 ==.
                           1953 ;	..\fb_lpc922.c:437: FBOUTC=0;
   0561 C2 96              1954 	clr	_P1_6
                    0563   1955 	C$fb_lpc922.c$438$2$2 ==.
                           1956 ;	..\fb_lpc922.c:438: TR1=0;
   0563 C2 8E              1957 	clr	_TCON_6
                    0565   1958 	C$fb_lpc922.c$439$2$2 ==.
                           1959 ;	..\fb_lpc922.c:439: TMOD=(TMOD & 0x0F) +0x10;	// Timer 1 als 16-Bit Timer
   0565 74 0F              1960 	mov	a,#0x0F
   0567 55 89              1961 	anl	a,_TMOD
   0569 24 10              1962 	add	a,#0x10
   056B F5 89              1963 	mov	_TMOD,a
                    056D   1964 	C$fb_lpc922.c$440$2$2 ==.
                           1965 ;	..\fb_lpc922.c:440: TH1=0xFB;					// Timer 1 auf Interbyte Abstand setzen (3 Bit Pause = 312Âµs
   056D 75 8D FB           1966 	mov	_TH1,#0xFB
                    0570   1967 	C$fb_lpc922.c$441$2$2 ==.
                           1968 ;	..\fb_lpc922.c:441: TL1=0x90;
   0570 75 8B 90           1969 	mov	_TL1,#0x90
                    0573   1970 	C$fb_lpc922.c$442$2$2 ==.
                           1971 ;	..\fb_lpc922.c:442: TR1=1;
   0573 D2 8E              1972 	setb	_TCON_6
                    0575   1973 	C$fb_lpc922.c$443$2$2 ==.
                           1974 ;	..\fb_lpc922.c:443: if (send_ack || send_nack) {	// ACK/NACK senden
   0575 20*0B 03           1975 	jb	_send_ack,00249$
   0578 30*0C 05           1976 	jnb	_send_nack,00250$
   057B                    1977 00249$:
                    057B   1978 	C$fb_lpc922.c$444$3$45 ==.
                           1979 ;	..\fb_lpc922.c:444: init_rx();					// ACK senden abgeschlossen, also statemachine auf Anfang
   057B 12s05rEA           1980 	lcall	_init_rx
   057E 80 2B              1981 	sjmp	00251$
   0580                    1982 00250$:
                    0580   1983 	C$fb_lpc922.c$447$3$46 ==.
                           1984 ;	..\fb_lpc922.c:447: if (telpos>((telegramm[5]&0x0F)+7)) {		// Telegramm fertig gesendet
   0580 74 0F              1985 	mov	a,#0x0F
   0582 55*0C              1986 	anl	a,(_telegramm + 0x0005)
   0584 FF                 1987 	mov	r7,a
   0585 7E 00              1988 	mov	r6,#0x00
   0587 74 07              1989 	mov	a,#0x07
   0589 2F                 1990 	add	a,r7
   058A FF                 1991 	mov	r7,a
   058B E4                 1992 	clr	a
   058C 3E                 1993 	addc	a,r6
   058D FE                 1994 	mov	r6,a
   058E AC*26              1995 	mov	r4,_telpos
   0590 7D 00              1996 	mov	r5,#0x00
   0592 C3                 1997 	clr	c
   0593 EF                 1998 	mov	a,r7
   0594 9C                 1999 	subb	a,r4
   0595 EE                 2000 	mov	a,r6
   0596 64 80              2001 	xrl	a,#0x80
   0598 8D F0              2002 	mov	b,r5
   059A 63 F0 80           2003 	xrl	b,#0x80
   059D 95 F0              2004 	subb	a,b
   059F 50 07              2005 	jnc	00247$
                    05A1   2006 	C$fb_lpc922.c$448$4$47 ==.
                           2007 ;	..\fb_lpc922.c:448: tel_sent=1;
   05A1 D2*07              2008 	setb	_tel_sent
                    05A3   2009 	C$fb_lpc922.c$449$4$47 ==.
                           2010 ;	..\fb_lpc922.c:449: init_rx();	// Telegramm senden abgeschlossen, ggf. wiederholen wenn nicht geackt wird
   05A3 12s05rEA           2011 	lcall	_init_rx
   05A6 80 03              2012 	sjmp	00251$
   05A8                    2013 00247$:
                    05A8   2014 	C$fb_lpc922.c$451$3$46 ==.
                           2015 ;	..\fb_lpc922.c:451: else fb_state=14;		// naechstes Byte: Interbyte Abstand einhalten
   05A8 75*2A 0E           2016 	mov	_fb_state,#0x0E
   05AB                    2017 00251$:
                    05AB   2018 	C$fb_lpc922.c$453$2$2 ==.
                           2019 ;	..\fb_lpc922.c:453: IE1=0;
   05AB C2 8B              2020 	clr	_TCON_3
                    05AD   2021 	C$fb_lpc922.c$454$2$2 ==.
                           2022 ;	..\fb_lpc922.c:454: break;
                    05AD   2023 	C$fb_lpc922.c$456$2$2 ==.
                           2024 ;	..\fb_lpc922.c:456: case 14:	// Interbyte Abstand erreicht (=Stopbit + 2 Bit)
   05AD 80 17              2025 	sjmp	00254$
   05AF                    2026 00253$:
                    05AF   2027 	C$fb_lpc922.c$457$2$2 ==.
                           2028 ;	..\fb_lpc922.c:457: TR1=0;
   05AF C2 8E              2029 	clr	_TCON_6
                    05B1   2030 	C$fb_lpc922.c$458$2$2 ==.
                           2031 ;	..\fb_lpc922.c:458: TMOD=(TMOD & 0x0F) +0x20;			// Timer 1 als 8-Bit autoreload
   05B1 74 0F              2032 	mov	a,#0x0F
   05B3 55 89              2033 	anl	a,_TMOD
   05B5 24 20              2034 	add	a,#0x20
   05B7 F5 89              2035 	mov	_TMOD,a
                    05B9   2036 	C$fb_lpc922.c$459$2$2 ==.
                           2037 ;	..\fb_lpc922.c:459: TH1=110;							// Timer 1 auf 104/3 us laden
   05B9 75 8D 6E           2038 	mov	_TH1,#0x6E
                    05BC   2039 	C$fb_lpc922.c$460$2$2 ==.
                           2040 ;	..\fb_lpc922.c:460: TL1=128;
   05BC 75 8B 80           2041 	mov	_TL1,#0x80
                    05BF   2042 	C$fb_lpc922.c$461$2$2 ==.
                           2043 ;	..\fb_lpc922.c:461: TF1=0;
   05BF C2 8F              2044 	clr	_TCON_7
                    05C1   2045 	C$fb_lpc922.c$462$2$2 ==.
                           2046 ;	..\fb_lpc922.c:462: TR1=1;
   05C1 D2 8E              2047 	setb	_TCON_6
                    05C3   2048 	C$fb_lpc922.c$463$2$2 ==.
                           2049 ;	..\fb_lpc922.c:463: fb_state=10;
   05C3 75*2A 0A           2050 	mov	_fb_state,#0x0A
                    05C6   2051 	C$fb_lpc922.c$468$1$1 ==.
                           2052 ;	..\fb_lpc922.c:468: }
   05C6                    2053 00254$:
                    05C6   2054 	C$fb_lpc922.c$469$1$1 ==.
                           2055 ;	..\fb_lpc922.c:469: interrupted=1;			// zeigt der app, dass sie unterbrochen wurde
   05C6 D2*01              2056 	setb	_interrupted
   05C8 85*00 81           2057 	mov	sp,_bp
   05CB D0*00              2058 	pop	_bp
   05CD D0 D0              2059 	pop	psw
   05CF D0 00              2060 	pop	(0+0)
   05D1 D0 01              2061 	pop	(0+1)
   05D3 D0 02              2062 	pop	(0+2)
   05D5 D0 03              2063 	pop	(0+3)
   05D7 D0 04              2064 	pop	(0+4)
   05D9 D0 05              2065 	pop	(0+5)
   05DB D0 06              2066 	pop	(0+6)
   05DD D0 07              2067 	pop	(0+7)
   05DF D0 83              2068 	pop	dph
   05E1 D0 82              2069 	pop	dpl
   05E3 D0 F0              2070 	pop	b
   05E5 D0 E0              2071 	pop	acc
   05E7 D0*00              2072 	pop	bits
                    05E9   2073 	C$fb_lpc922.c$470$1$1 ==.
                    05E9   2074 	XG$T1_int$0$0 ==.
   05E9 32                 2075 	reti
                           2076 ;------------------------------------------------------------
                           2077 ;Allocation info for local variables in function 'init_rx'
                           2078 ;------------------------------------------------------------
                    05EA   2079 	G$init_rx$0$0 ==.
                    05EA   2080 	C$fb_lpc922.c$473$1$1 ==.
                           2081 ;	..\fb_lpc922.c:473: void init_rx(void) 	// Empfangen initiieren (statemachine auf Anfang)
                           2082 ;	-----------------------------------------
                           2083 ;	 function init_rx
                           2084 ;	-----------------------------------------
   05EA                    2085 _init_rx:
                    05EA   2086 	C$fb_lpc922.c$475$1$1 ==.
                           2087 ;	..\fb_lpc922.c:475: fb_state=0;
   05EA 75*2A 00           2088 	mov	_fb_state,#0x00
                    05ED   2089 	C$fb_lpc922.c$476$1$1 ==.
                           2090 ;	..\fb_lpc922.c:476: IE1=0;
   05ED C2 8B              2091 	clr	_TCON_3
                    05EF   2092 	C$fb_lpc922.c$477$1$1 ==.
                           2093 ;	..\fb_lpc922.c:477: TR1=0;
   05EF C2 8E              2094 	clr	_TCON_6
                    05F1   2095 	C$fb_lpc922.c$478$1$1 ==.
                           2096 ;	..\fb_lpc922.c:478: ET1=0;
   05F1 C2 AB              2097 	clr	_IEN0_3
                    05F3   2098 	C$fb_lpc922.c$479$1$1 ==.
                           2099 ;	..\fb_lpc922.c:479: cs=0;
   05F3 75*27 00           2100 	mov	_cs,#0x00
                    05F6   2101 	C$fb_lpc922.c$480$1$1 ==.
                           2102 ;	..\fb_lpc922.c:480: telpos=0;
   05F6 75*26 00           2103 	mov	_telpos,#0x00
                    05F9   2104 	C$fb_lpc922.c$481$1$1 ==.
                           2105 ;	..\fb_lpc922.c:481: TR1=0;
   05F9 C2 8E              2106 	clr	_TCON_6
                    05FB   2107 	C$fb_lpc922.c$482$1$1 ==.
                           2108 ;	..\fb_lpc922.c:482: TMOD=(TMOD & 0x0F) +0x10;	// Timer 1 als 16-Bit Timer
   05FB 74 0F              2109 	mov	a,#0x0F
   05FD 55 89              2110 	anl	a,_TMOD
   05FF 24 10              2111 	add	a,#0x10
   0601 F5 89              2112 	mov	_TMOD,a
                    0603   2113 	C$fb_lpc922.c$483$1$1 ==.
                           2114 ;	..\fb_lpc922.c:483: TH1=0x89;					// busfree Zeit = 15 Bit (auf ACK) + 11 Bit (ACK) + 53 Bit
   0603 75 8D 89           2115 	mov	_TH1,#0x89
                    0606   2116 	C$fb_lpc922.c$484$1$1 ==.
                           2117 ;	..\fb_lpc922.c:484: TL1=0xAF;
   0606 75 8B AF           2118 	mov	_TL1,#0xAF
                    0609   2119 	C$fb_lpc922.c$485$1$1 ==.
                           2120 ;	..\fb_lpc922.c:485: send_ack=0;
   0609 C2*0B              2121 	clr	_send_ack
                    060B   2122 	C$fb_lpc922.c$486$1$1 ==.
                           2123 ;	..\fb_lpc922.c:486: send_nack=0;
   060B C2*0C              2124 	clr	_send_nack
                    060D   2125 	C$fb_lpc922.c$487$1$1 ==.
                           2126 ;	..\fb_lpc922.c:487: TF1=0;
   060D C2 8F              2127 	clr	_TCON_7
                    060F   2128 	C$fb_lpc922.c$488$1$1 ==.
                           2129 ;	..\fb_lpc922.c:488: TR1=1;
   060F D2 8E              2130 	setb	_TCON_6
                    0611   2131 	C$fb_lpc922.c$489$1$1 ==.
                           2132 ;	..\fb_lpc922.c:489: EX1=1;
   0611 D2 AA              2133 	setb	_IEN0_2
                    0613   2134 	C$fb_lpc922.c$490$1$1 ==.
                           2135 ;	..\fb_lpc922.c:490: ET1=1;
   0613 D2 AB              2136 	setb	_IEN0_3
                    0615   2137 	C$fb_lpc922.c$491$1$1 ==.
                           2138 ;	..\fb_lpc922.c:491: telegramm_ok=0;
   0615 C2*0F              2139 	clr	_telegramm_ok
                    0617   2140 	C$fb_lpc922.c$492$1$1 ==.
                    0617   2141 	XG$init_rx$0$0 ==.
   0617 22                 2142 	ret
                           2143 ;------------------------------------------------------------
                           2144 ;Allocation info for local variables in function 'init_tx'
                           2145 ;------------------------------------------------------------
                           2146 ;low_prio_time             Allocated to registers b0 
                           2147 ;n                         Allocated to registers r6 
                           2148 ;cs_pos                    Allocated to registers r7 
                           2149 ;------------------------------------------------------------
                    0618   2150 	G$init_tx$0$0 ==.
                    0618   2151 	C$fb_lpc922.c$495$1$1 ==.
                           2152 ;	..\fb_lpc922.c:495: void init_tx(__bit low_prio_time) 		// Checksum des Telegramms berechnen und Senden initiieren
                           2153 ;	-----------------------------------------
                           2154 ;	 function init_tx
                           2155 ;	-----------------------------------------
   0618                    2156 _init_tx:
                    0618   2157 	C$fb_lpc922.c$499$1$1 ==.
                           2158 ;	..\fb_lpc922.c:499: TR1=0;
   0618 C2 8E              2159 	clr	_TCON_6
                    061A   2160 	C$fb_lpc922.c$500$1$1 ==.
                           2161 ;	..\fb_lpc922.c:500: TMOD=(TMOD & 0x0F) +0x20;			// Timer 1 als 8-Bit autoreload
   061A 74 0F              2162 	mov	a,#0x0F
   061C 55 89              2163 	anl	a,_TMOD
   061E 24 20              2164 	add	a,#0x20
   0620 F5 89              2165 	mov	_TMOD,a
                    0622   2166 	C$fb_lpc922.c$501$1$1 ==.
                           2167 ;	..\fb_lpc922.c:501: TH1=110;							// von state 10 auf 11
   0622 75 8D 6E           2168 	mov	_TH1,#0x6E
                    0625   2169 	C$fb_lpc922.c$502$1$1 ==.
                           2170 ;	..\fb_lpc922.c:502: TL1=128;							// von hier bis state 10
   0625 75 8B 80           2171 	mov	_TL1,#0x80
                    0628   2172 	C$fb_lpc922.c$503$1$1 ==.
                           2173 ;	..\fb_lpc922.c:503: TF1=0;
   0628 C2 8F              2174 	clr	_TCON_7
                    062A   2175 	C$fb_lpc922.c$505$1$1 ==.
                           2176 ;	..\fb_lpc922.c:505: cs_pos=(telegramm[5]&0x0F)+7;		// Position der Checksum im Telegramm
   062A 74 0F              2177 	mov	a,#0x0F
   062C 55*0C              2178 	anl	a,(_telegramm + 0x0005)
   062E 24 07              2179 	add	a,#0x07
   0630 FF                 2180 	mov	r7,a
                    0631   2181 	C$fb_lpc922.c$506$1$1 ==.
                           2182 ;	..\fb_lpc922.c:506: cs=0xFF;
   0631 75*27 FF           2183 	mov	_cs,#0xFF
                    0634   2184 	C$fb_lpc922.c$507$1$1 ==.
                           2185 ;	..\fb_lpc922.c:507: for(n=0;n<cs_pos;n++) {
   0634 7E 00              2186 	mov	r6,#0x00
   0636                    2187 00103$:
   0636 C3                 2188 	clr	c
   0637 EE                 2189 	mov	a,r6
   0638 9F                 2190 	subb	a,r7
   0639 50 0B              2191 	jnc	00106$
                    063B   2192 	C$fb_lpc922.c$508$2$2 ==.
                           2193 ;	..\fb_lpc922.c:508: cs^=telegramm[n];				// Checksum berechnen
   063B EE                 2194 	mov	a,r6
   063C 24r07              2195 	add	a,#_telegramm
   063E F9                 2196 	mov	r1,a
   063F E7                 2197 	mov	a,@r1
   0640 FD                 2198 	mov	r5,a
   0641 62*27              2199 	xrl	_cs,a
                    0643   2200 	C$fb_lpc922.c$507$1$1 ==.
                           2201 ;	..\fb_lpc922.c:507: for(n=0;n<cs_pos;n++) {
   0643 0E                 2202 	inc	r6
   0644 80 F0              2203 	sjmp	00103$
   0646                    2204 00106$:
                    0646   2205 	C$fb_lpc922.c$510$1$1 ==.
                           2206 ;	..\fb_lpc922.c:510: telegramm[cs_pos]=cs;				// Checksum hinter Nutzdaten anfaegen
   0646 EF                 2207 	mov	a,r7
   0647 24r07              2208 	add	a,#_telegramm
   0649 F8                 2209 	mov	r0,a
   064A A6*27              2210 	mov	@r0,_cs
                    064C   2211 	C$fb_lpc922.c$511$1$1 ==.
                           2212 ;	..\fb_lpc922.c:511: ack=0;
   064C C2*03              2213 	clr	_ack
                    064E   2214 	C$fb_lpc922.c$512$1$1 ==.
                           2215 ;	..\fb_lpc922.c:512: nack=0;
   064E C2*04              2216 	clr	_nack
                    0650   2217 	C$fb_lpc922.c$513$1$1 ==.
                           2218 ;	..\fb_lpc922.c:513: wait_for_ack=1;
   0650 D2*0A              2219 	setb	_wait_for_ack
                    0652   2220 	C$fb_lpc922.c$514$1$1 ==.
                           2221 ;	..\fb_lpc922.c:514: fb_state=10;						// naechster state: senden
   0652 75*2A 0A           2222 	mov	_fb_state,#0x0A
                    0655   2223 	C$fb_lpc922.c$515$1$1 ==.
                           2224 ;	..\fb_lpc922.c:515: if (low_prio_time){
   0655 30*00 15           2225 	jnb	b0,00102$
                    0658   2226 	C$fb_lpc922.c$516$2$3 ==.
                           2227 ;	..\fb_lpc922.c:516: fb_state=9;
   0658 75*2A 09           2228 	mov	_fb_state,#0x09
                    065B   2229 	C$fb_lpc922.c$517$2$3 ==.
                           2230 ;	..\fb_lpc922.c:517: TR1=0;
   065B C2 8E              2231 	clr	_TCON_6
                    065D   2232 	C$fb_lpc922.c$518$2$3 ==.
                           2233 ;	..\fb_lpc922.c:518: TMOD=(TMOD & 0x0F) +0x10;	// Timer 1 als 16-Bit Timer
   065D 74 0F              2234 	mov	a,#0x0F
   065F 55 89              2235 	anl	a,_TMOD
   0661 24 10              2236 	add	a,#0x10
   0663 F5 89              2237 	mov	_TMOD,a
                    0665   2238 	C$fb_lpc922.c$519$2$3 ==.
                           2239 ;	..\fb_lpc922.c:519: TH1=0xFB;					// Timer 1 auf Low Prio Abstand setzen (3 Bit Pause = 312Âµs
   0665 75 8D FB           2240 	mov	_TH1,#0xFB
                    0668   2241 	C$fb_lpc922.c$520$2$3 ==.
                           2242 ;	..\fb_lpc922.c:520: TL1=0x90;
   0668 75 8B 90           2243 	mov	_TL1,#0x90
                    066B   2244 	C$fb_lpc922.c$521$2$3 ==.
                           2245 ;	..\fb_lpc922.c:521: TR1=1;
   066B D2 8E              2246 	setb	_TCON_6
   066D                    2247 00102$:
                    066D   2248 	C$fb_lpc922.c$523$1$1 ==.
                           2249 ;	..\fb_lpc922.c:523: fb_pattern=0;						// naechstes zu sendendes Bit, 0=Startbit
   066D 75*29 00           2250 	mov	_fb_pattern,#0x00
                    0670   2251 	C$fb_lpc922.c$524$1$1 ==.
                           2252 ;	..\fb_lpc922.c:524: telpos=0;							// naechstes zu sendende Byte
   0670 75*26 00           2253 	mov	_telpos,#0x00
                    0673   2254 	C$fb_lpc922.c$525$1$1 ==.
                           2255 ;	..\fb_lpc922.c:525: EX1=0;								// ext. int1 inaktiv
   0673 C2 AA              2256 	clr	_IEN0_2
                    0675   2257 	C$fb_lpc922.c$526$1$1 ==.
                           2258 ;	..\fb_lpc922.c:526: TR1=1;								// Timer 1 starten
   0675 D2 8E              2259 	setb	_TCON_6
                    0677   2260 	C$fb_lpc922.c$527$1$1 ==.
                           2261 ;	..\fb_lpc922.c:527: ET1=1;								// Timer 1 int. aktiv
   0677 D2 AB              2262 	setb	_IEN0_3
                    0679   2263 	C$fb_lpc922.c$528$1$1 ==.
                    0679   2264 	XG$init_tx$0$0 ==.
   0679 22                 2265 	ret
                           2266 ;------------------------------------------------------------
                           2267 ;Allocation info for local variables in function 'gapos_in_gat'
                           2268 ;------------------------------------------------------------
                           2269 ;gal                       Allocated to stack - _bp -3
                           2270 ;gah                       Allocated to registers r7 
                           2271 ;ga_position               Allocated to registers r6 
                           2272 ;n                         Allocated to registers r5 
                           2273 ;------------------------------------------------------------
                    067A   2274 	G$gapos_in_gat$0$0 ==.
                    067A   2275 	C$fb_lpc922.c$535$1$1 ==.
                           2276 ;	..\fb_lpc922.c:535: unsigned char gapos_in_gat(unsigned char gah, unsigned char gal)
                           2277 ;	-----------------------------------------
                           2278 ;	 function gapos_in_gat
                           2279 ;	-----------------------------------------
   067A                    2280 _gapos_in_gat:
   067A C0*00              2281 	push	_bp
   067C 85 81*00           2282 	mov	_bp,sp
   067F AF 82              2283 	mov	r7,dpl
                    0681   2284 	C$fb_lpc922.c$539$1$1 ==.
                           2285 ;	..\fb_lpc922.c:539: ga_position=0xFF; 			// default return Wert 0xFF = nicht gefunden
   0681 7E FF              2286 	mov	r6,#0xFF
                    0683   2287 	C$fb_lpc922.c$540$1$1 ==.
                           2288 ;	..\fb_lpc922.c:540: if (eeprom[ADDRTAB]<0xFF){ // && !transparency
   0683 90 1D 16           2289 	mov	dptr,#(_eeprom + 0x0016)
   0686 E4                 2290 	clr	a
   0687 93                 2291 	movc	a,@a+dptr
   0688 FD                 2292 	mov	r5,a
   0689 BD FF 00           2293 	cjne	r5,#0xFF,00121$
   068C                    2294 00121$:
   068C 50 35              2295 	jnc	00107$
                    068E   2296 	C$fb_lpc922.c$541$2$2 ==.
                           2297 ;	..\fb_lpc922.c:541: if (eeprom[ADDRTAB]) {
   068E 90 1D 16           2298 	mov	dptr,#(_eeprom + 0x0016)
   0691 E4                 2299 	clr	a
   0692 93                 2300 	movc	a,@a+dptr
   0693 60 2E              2301 	jz	00107$
                    0695   2302 	C$fb_lpc922.c$542$3$3 ==.
                           2303 ;	..\fb_lpc922.c:542: for (n=eeprom[ADDRTAB]-1;n;n--) {
   0695 90 1D 16           2304 	mov	dptr,#(_eeprom + 0x0016)
   0698 E4                 2305 	clr	a
   0699 93                 2306 	movc	a,@a+dptr
   069A FD                 2307 	mov	r5,a
   069B 1D                 2308 	dec	r5
   069C                    2309 00108$:
   069C ED                 2310 	mov	a,r5
   069D 60 24              2311 	jz	00107$
                    069F   2312 	C$fb_lpc922.c$543$4$4 ==.
                           2313 ;	..\fb_lpc922.c:543: if (gah==eeprom[ADDRTAB+n*2+1] && gal==eeprom[ADDRTAB+n*2+2])
   069F ED                 2314 	mov	a,r5
   06A0 2D                 2315 	add	a,r5
   06A1 FC                 2316 	mov	r4,a
   06A2 24 17              2317 	add	a,#0x17
   06A4 90 1D 00           2318 	mov	dptr,#_eeprom
   06A7 93                 2319 	movc	a,@a+dptr
   06A8 FB                 2320 	mov	r3,a
   06A9 EF                 2321 	mov	a,r7
   06AA B5 03 13           2322 	cjne	a,ar3,00110$
   06AD 74 18              2323 	mov	a,#0x18
   06AF 2C                 2324 	add	a,r4
   06B0 90 1D 00           2325 	mov	dptr,#_eeprom
   06B3 93                 2326 	movc	a,@a+dptr
   06B4 FC                 2327 	mov	r4,a
   06B5 E5*00              2328 	mov	a,_bp
   06B7 24 FD              2329 	add	a,#0xfd
   06B9 F8                 2330 	mov	r0,a
   06BA E6                 2331 	mov	a,@r0
   06BB B5 04 02           2332 	cjne	a,ar4,00110$
                    06BE   2333 	C$fb_lpc922.c$544$4$4 ==.
                           2334 ;	..\fb_lpc922.c:544: ga_position=n;
   06BE 8D 06              2335 	mov	ar6,r5
   06C0                    2336 00110$:
                    06C0   2337 	C$fb_lpc922.c$542$3$3 ==.
                           2338 ;	..\fb_lpc922.c:542: for (n=eeprom[ADDRTAB]-1;n;n--) {
   06C0 1D                 2339 	dec	r5
   06C1 80 D9              2340 	sjmp	00108$
   06C3                    2341 00107$:
                    06C3   2342 	C$fb_lpc922.c$548$1$1 ==.
                           2343 ;	..\fb_lpc922.c:548: return (ga_position);
   06C3 8E 82              2344 	mov	dpl,r6
   06C5 D0*00              2345 	pop	_bp
                    06C7   2346 	C$fb_lpc922.c$549$1$1 ==.
                    06C7   2347 	XG$gapos_in_gat$0$0 ==.
   06C7 22                 2348 	ret
                           2349 ;------------------------------------------------------------
                           2350 ;Allocation info for local variables in function 'send_obj_value'
                           2351 ;------------------------------------------------------------
                           2352 ;objno                     Allocated to registers r7 
                           2353 ;success                   Allocated to registers b0 
                           2354 ;------------------------------------------------------------
                    06C8   2355 	G$send_obj_value$0$0 ==.
                    06C8   2356 	C$fb_lpc922.c$556$1$1 ==.
                           2357 ;	..\fb_lpc922.c:556: __bit send_obj_value(unsigned char objno)
                           2358 ;	-----------------------------------------
                           2359 ;	 function send_obj_value
                           2360 ;	-----------------------------------------
   06C8                    2361 _send_obj_value:
   06C8 AF 82              2362 	mov	r7,dpl
                    06CA   2363 	C$fb_lpc922.c$558$1$1 ==.
                           2364 ;	..\fb_lpc922.c:558: __bit success=0;
   06CA C2*00              2365 	clr	b0
                    06CC   2366 	C$fb_lpc922.c$560$1$1 ==.
                           2367 ;	..\fb_lpc922.c:560: if (objno < 0x40 && (read_objflags(objno) & 0x44) != 0x44)
   06CC BF 40 00           2368 	cjne	r7,#0x40,00112$
   06CF                    2369 00112$:
   06CF 50 1B              2370 	jnc	00104$
   06D1 8F 82              2371 	mov	dpl,r7
   06D3 C0 07              2372 	push	ar7
   06D5 C0*00              2373 	push	bits
   06D7 12s0Ar06           2374 	lcall	_read_objflags
   06DA E5 82              2375 	mov	a,dpl
   06DC D0*00              2376 	pop	bits
   06DE D0 07              2377 	pop	ar7
   06E0 54 44              2378 	anl	a,#0x44
   06E2 FE                 2379 	mov	r6,a
   06E3 BE 44 02           2380 	cjne	r6,#0x44,00114$
   06E6 80 04              2381 	sjmp	00104$
   06E8                    2382 00114$:
                    06E8   2383 	C$fb_lpc922.c$562$2$2 ==.
                           2384 ;	..\fb_lpc922.c:562: success=1;
   06E8 D2*00              2385 	setb	b0
   06EA 80 2A              2386 	sjmp	00105$
   06EC                    2387 00104$:
                    06EC   2388 	C$fb_lpc922.c$564$1$1 ==.
                           2389 ;	..\fb_lpc922.c:564: else if(tx_nextsend!=((tx_nextwrite+1)&0x07)) {
   06EC AD*2C              2390 	mov	r5,_tx_nextwrite
   06EE 7E 00              2391 	mov	r6,#0x00
   06F0 0D                 2392 	inc	r5
   06F1 BD 00 01           2393 	cjne	r5,#0x00,00115$
   06F4 0E                 2394 	inc	r6
   06F5                    2395 00115$:
   06F5 53 05 07           2396 	anl	ar5,#0x07
   06F8 7E 00              2397 	mov	r6,#0x00
   06FA AB*2D              2398 	mov	r3,_tx_nextsend
   06FC 7C 00              2399 	mov	r4,#0x00
   06FE EB                 2400 	mov	a,r3
   06FF B5 05 06           2401 	cjne	a,ar5,00116$
   0702 EC                 2402 	mov	a,r4
   0703 B5 06 02           2403 	cjne	a,ar6,00116$
   0706 80 0E              2404 	sjmp	00105$
   0708                    2405 00116$:
                    0708   2406 	C$fb_lpc922.c$565$2$3 ==.
                           2407 ;	..\fb_lpc922.c:565: tx_buffer[tx_nextwrite]=objno;
   0708 E5*2C              2408 	mov	a,_tx_nextwrite
   070A 24r1E              2409 	add	a,#_tx_buffer
   070C F8                 2410 	mov	r0,a
   070D A6 07              2411 	mov	@r0,ar7
                    070F   2412 	C$fb_lpc922.c$566$2$3 ==.
                           2413 ;	..\fb_lpc922.c:566: tx_nextwrite++;
   070F 05*2C              2414 	inc	_tx_nextwrite
                    0711   2415 	C$fb_lpc922.c$567$2$3 ==.
                           2416 ;	..\fb_lpc922.c:567: tx_nextwrite&=0x07;
   0711 53*2C 07           2417 	anl	_tx_nextwrite,#0x07
                    0714   2418 	C$fb_lpc922.c$568$2$3 ==.
                           2419 ;	..\fb_lpc922.c:568: success=1;
   0714 D2*00              2420 	setb	b0
   0716                    2421 00105$:
                    0716   2422 	C$fb_lpc922.c$571$1$1 ==.
                           2423 ;	..\fb_lpc922.c:571: TR1=1;	// statemachine starten falls vorher in state 0 gestoppt
   0716 D2 8E              2424 	setb	_TCON_6
                    0718   2425 	C$fb_lpc922.c$572$1$1 ==.
                           2426 ;	..\fb_lpc922.c:572: return(success);
   0718 A2*00              2427 	mov	c,b0
                    071A   2428 	C$fb_lpc922.c$573$1$1 ==.
                    071A   2429 	XG$send_obj_value$0$0 ==.
   071A 22                 2430 	ret
                           2431 ;------------------------------------------------------------
                           2432 ;Allocation info for local variables in function 'process_tel'
                           2433 ;------------------------------------------------------------
                           2434 ;tpdu                      Allocated to registers r6 
                           2435 ;apdu                      Allocated to stack - _bp +1
                           2436 ;ab                        Allocated to registers r7 
                           2437 ;n                         Allocated to stack - _bp +2
                           2438 ;objno                     Allocated to registers r3 
                           2439 ;objflags                  Allocated to registers r2 
                           2440 ;gapos                     Allocated to registers r7 
                           2441 ;atp                       Allocated to registers r6 
                           2442 ;assmax                    Allocated to registers r5 
                           2443 ;asspos                    Allocated to registers r6 
                           2444 ;sloc0                     Allocated to stack - _bp +11
                           2445 ;sloc1                     Allocated to stack - _bp +12
                           2446 ;sloc2                     Allocated to stack - _bp +3
                           2447 ;------------------------------------------------------------
                    071B   2448 	G$process_tel$0$0 ==.
                    071B   2449 	C$fb_lpc922.c$578$1$1 ==.
                           2450 ;	..\fb_lpc922.c:578: void process_tel(void)
                           2451 ;	-----------------------------------------
                           2452 ;	 function process_tel
                           2453 ;	-----------------------------------------
   071B                    2454 _process_tel:
   071B C0*00              2455 	push	_bp
   071D E5 81              2456 	mov	a,sp
   071F F5*00              2457 	mov	_bp,a
   0721 24 04              2458 	add	a,#0x04
   0723 F5 81              2459 	mov	sp,a
                    0725   2460 	C$fb_lpc922.c$583$1$1 ==.
                           2461 ;	..\fb_lpc922.c:583: tel_arrived=0;
   0725 C2*06              2462 	clr	_tel_arrived
                    0727   2463 	C$fb_lpc922.c$584$1$1 ==.
                           2464 ;	..\fb_lpc922.c:584: tpdu=telegramm[6]&0xC3;
   0727 AF*0D              2465 	mov	r7,(_telegramm + 0x0006)
   0729 74 C3              2466 	mov	a,#0xC3
   072B 5F                 2467 	anl	a,r7
   072C FE                 2468 	mov	r6,a
                    072D   2469 	C$fb_lpc922.c$585$1$1 ==.
                           2470 ;	..\fb_lpc922.c:585: apdu=telegramm[7];
   072D A8*00              2471 	mov	r0,_bp
   072F 08                 2472 	inc	r0
   0730 A6*0E              2473 	mov	@r0,(_telegramm + 0x0007)
                    0732   2474 	C$fb_lpc922.c$588$1$1 ==.
                           2475 ;	..\fb_lpc922.c:588: if(telegramm[3]==0 && telegramm[4]==0) {	// nur wenn wenn Zieladresse = 0
   0732 E5*0A              2476 	mov	a,(_telegramm + 0x0003)
   0734 FC                 2477 	mov	r4,a
   0735 70 49              2478 	jnz	00169$
   0737 E5*0B              2479 	mov	a,(_telegramm + 0x0004)
   0739 70 45              2480 	jnz	00169$
                    073B   2481 	C$fb_lpc922.c$589$2$2 ==.
                           2482 ;	..\fb_lpc922.c:589: if(status60 & 0x01) {					// und nur im prog mode
   073B E5*2E              2483 	mov	a,_status60
   073D 20 E0 03           2484 	jb	acc.0,00222$
   0740 02s0Ar00           2485 	ljmp	00176$
   0743                    2486 00222$:
                    0743   2487 	C$fb_lpc922.c$590$3$3 ==.
                           2488 ;	..\fb_lpc922.c:590: if(tpdu==BROADCAST_PDU_SET_PA_REQ && apdu==SET_PHYSADDR_REQUEST) //set_pa();				// 00000000 11000000
   0743 EE                 2489 	mov	a,r6
   0744 70 20              2490 	jnz	00105$
   0746 A8*00              2491 	mov	r0,_bp
   0748 08                 2492 	inc	r0
   0749 B6 C0 1A           2493 	cjne	@r0,#0xC0,00105$
                    074C   2494 	C$fb_lpc922.c$593$4$4 ==.
                           2495 ;	..\fb_lpc922.c:593: while(fb_state!=0);		// warten falls noch gesendet wird
   074C                    2496 00101$:
   074C E5*2A              2497 	mov	a,_fb_state
   074E 70 FC              2498 	jnz	00101$
                    0750   2499 	C$fb_lpc922.c$594$4$4 ==.
                           2500 ;	..\fb_lpc922.c:594: EA=0;
   0750 C2 AF              2501 	clr	_IEN0_7
                    0752   2502 	C$fb_lpc922.c$595$4$4 ==.
                           2503 ;	..\fb_lpc922.c:595: FMCON=0x00;				// load command, leert das pageregister
   0752 75 E4 00           2504 	mov	_FMCON,#0x00
                    0755   2505 	C$fb_lpc922.c$596$4$4 ==.
                           2506 ;	..\fb_lpc922.c:596: FMADRH=EEPROM_ADDR_H;	// 0x1D bei 922;
   0755 75 E7 1D           2507 	mov	_FMADRH,#0x1D
                    0758   2508 	C$fb_lpc922.c$597$4$4 ==.
                           2509 ;	..\fb_lpc922.c:597: FMADRL=ADDRTAB+1;
   0758 75 E6 17           2510 	mov	_FMADRL,#0x17
                    075B   2511 	C$fb_lpc922.c$598$4$4 ==.
                           2512 ;	..\fb_lpc922.c:598: FMDATA=telegramm[8];
   075B 85*0F E5           2513 	mov	_FMDATA,(_telegramm + 0x0008)
                    075E   2514 	C$fb_lpc922.c$599$4$4 ==.
                           2515 ;	..\fb_lpc922.c:599: FMDATA=telegramm[9];	// naechstes Byte, da autoinkrement
   075E 85*10 E5           2516 	mov	_FMDATA,(_telegramm + 0x0009)
                    0761   2517 	C$fb_lpc922.c$600$4$4 ==.
                           2518 ;	..\fb_lpc922.c:600: FMCON=0x68;				// write command, schreibt pageregister ins flash und versetzt CPU in idle fuer 4ms
   0761 75 E4 68           2519 	mov	_FMCON,#0x68
                    0764   2520 	C$fb_lpc922.c$601$4$4 ==.
                           2521 ;	..\fb_lpc922.c:601: EA=1;
   0764 D2 AF              2522 	setb	_IEN0_7
   0766                    2523 00105$:
                    0766   2524 	C$fb_lpc922.c$608$3$3 ==.
                           2525 ;	..\fb_lpc922.c:608: if(tpdu==BROADCAST_PDU_READ_PA && apdu==READ_PHYSADDR_REQUEST) send_obj_value(READ_PHYSADDR_RESPONSE);	// 00000001 00000000
   0766 BE 01 02           2526 	cjne	r6,#0x01,00227$
   0769 80 03              2527 	sjmp	00228$
   076B                    2528 00227$:
   076B 02s0Ar00           2529 	ljmp	00176$
   076E                    2530 00228$:
   076E A8*00              2531 	mov	r0,_bp
   0770 08                 2532 	inc	r0
   0771 E6                 2533 	mov	a,@r0
   0772 60 03              2534 	jz	00229$
   0774 02s0Ar00           2535 	ljmp	00176$
   0777                    2536 00229$:
   0777 75 82 83           2537 	mov	dpl,#0x83
   077A 12s06rC8           2538 	lcall	_send_obj_value
   077D 02s0Ar00           2539 	ljmp	00176$
   0780                    2540 00169$:
                    0780   2541 	C$fb_lpc922.c$613$2$5 ==.
                           2542 ;	..\fb_lpc922.c:613: if((telegramm[5]&0x80)==0x00) {	// Destination Adress Flag Bit 7, 0=phys. Adr., 1=Gruppenadr.
   0780 E5*0C              2543 	mov	a,(_telegramm + 0x0005)
   0782 30 E7 03           2544 	jnb	acc.7,00230$
   0785 02s09r4B           2545 	ljmp	00166$
   0788                    2546 00230$:
                    0788   2547 	C$fb_lpc922.c$614$3$6 ==.
                           2548 ;	..\fb_lpc922.c:614: if(telegramm[3]==eeprom[ADDRTAB+1] && telegramm[4]==eeprom[ADDRTAB+2]) {	// nur wenn es die eigene phys. Adr. ist
   0788 90 1D 17           2549 	mov	dptr,#(_eeprom + 0x0017)
   078B E4                 2550 	clr	a
   078C 93                 2551 	movc	a,@a+dptr
   078D FB                 2552 	mov	r3,a
   078E EC                 2553 	mov	a,r4
   078F B5 03 02           2554 	cjne	a,ar3,00231$
   0792 80 03              2555 	sjmp	00232$
   0794                    2556 00231$:
   0794 02s0Ar00           2557 	ljmp	00176$
   0797                    2558 00232$:
   0797 90 1D 18           2559 	mov	dptr,#(_eeprom + 0x0018)
   079A E4                 2560 	clr	a
   079B 93                 2561 	movc	a,@a+dptr
   079C FB                 2562 	mov	r3,a
   079D B5*0B 02           2563 	cjne	a,(_telegramm + 0x0004),00233$
   07A0 80 03              2564 	sjmp	00234$
   07A2                    2565 00233$:
   07A2 02s0Ar00           2566 	ljmp	00176$
   07A5                    2567 00234$:
                    07A5   2568 	C$fb_lpc922.c$615$4$7 ==.
                           2569 ;	..\fb_lpc922.c:615: connected_timeout=0;//wenn ein unicast uns betrifft den timeout ruecksetzen
   07A5 75*2F 00           2570 	mov	_connected_timeout,#0x00
                    07A8   2571 	C$fb_lpc922.c$618$4$7 ==.
                           2572 ;	..\fb_lpc922.c:618: switch (tpdu) {	// transport layer control field
   07A8 BE 42 02           2573 	cjne	r6,#0x42,00235$
   07AB 80 1B              2574 	sjmp	00112$
   07AD                    2575 00235$:
   07AD BE 43 03           2576 	cjne	r6,#0x43,00236$
   07B0 02s08rDF           2577 	ljmp	00130$
   07B3                    2578 00236$:
   07B3 BE 80 03           2579 	cjne	r6,#0x80,00237$
   07B6 02s09r05           2580 	ljmp	00135$
   07B9                    2581 00237$:
   07B9 BE 81 03           2582 	cjne	r6,#0x81,00238$
   07BC 02s09r27           2583 	ljmp	00138$
   07BF                    2584 00238$:
   07BF BE 83 03           2585 	cjne	r6,#0x83,00239$
   07C2 02s09r40           2586 	ljmp	00142$
   07C5                    2587 00239$:
   07C5 02s0Ar00           2588 	ljmp	00176$
                    07C8   2589 	C$fb_lpc922.c$628$5$8 ==.
                           2590 ;	..\fb_lpc922.c:628: case DATA_PDU_MEMORY_OPERATIONS:
   07C8                    2591 00112$:
                    07C8   2592 	C$fb_lpc922.c$629$5$8 ==.
                           2593 ;	..\fb_lpc922.c:629: if(connected){
   07C8 20*0D 03           2594 	jb	_connected,00240$
   07CB 02s0Ar00           2595 	ljmp	00176$
   07CE                    2596 00240$:
                    07CE   2597 	C$fb_lpc922.c$630$6$9 ==.
                           2598 ;	..\fb_lpc922.c:630: senders_pcount=telegramm[6]&0x3C;
   07CE 74 3C              2599 	mov	a,#0x3C
   07D0 5F                 2600 	anl	a,r7
   07D1 F5*06              2601 	mov	_senders_pcount,a
                    07D3   2602 	C$fb_lpc922.c$631$6$9 ==.
                           2603 ;	..\fb_lpc922.c:631: apdu &= 0xF0;						// da bei memory operations nur obere 4 Bits aktiv
   07D3 A8*00              2604 	mov	r0,_bp
   07D5 08                 2605 	inc	r0
   07D6 E6                 2606 	mov	a,@r0
   07D7 54 F0              2607 	anl	a,#0xF0
   07D9 F6                 2608 	mov	@r0,a
                    07DA   2609 	C$fb_lpc922.c$632$6$9 ==.
                           2610 ;	..\fb_lpc922.c:632: if(apdu==WRITE_MEMORY_REQUEST) {	// 01pppp10 1000xxxx
   07DA A8*00              2611 	mov	r0,_bp
   07DC 08                 2612 	inc	r0
   07DD B6 80 02           2613 	cjne	@r0,#0x80,00241$
   07E0 80 03              2614 	sjmp	00242$
   07E2                    2615 00241$:
   07E2 02s08rBE           2616 	ljmp	00125$
   07E5                    2617 00242$:
                    07E5   2618 	C$fb_lpc922.c$633$7$10 ==.
                           2619 ;	..\fb_lpc922.c:633: send_obj_value(NCD_ACK);
   07E5 75 82 81           2620 	mov	dpl,#0x81
   07E8 12s06rC8           2621 	lcall	_send_obj_value
                    07EB   2622 	C$fb_lpc922.c$636$8$11 ==.
                           2623 ;	..\fb_lpc922.c:636: ab=telegramm[7]&0x0F;		// Anzahl Bytes
   07EB 74 0F              2624 	mov	a,#0x0F
   07ED 55*0E              2625 	anl	a,(_telegramm + 0x0007)
   07EF FF                 2626 	mov	r7,a
                    07F0   2627 	C$fb_lpc922.c$638$8$11 ==.
                           2628 ;	..\fb_lpc922.c:638: while(fb_state!=0);					// warten falls noch gesendet wird
   07F0                    2629 00113$:
   07F0 E5*2A              2630 	mov	a,_fb_state
   07F2 70 FC              2631 	jnz	00113$
                    07F4   2632 	C$fb_lpc922.c$640$8$11 ==.
                           2633 ;	..\fb_lpc922.c:640: EA=0;
   07F4 C2 AF              2634 	clr	_IEN0_7
                    07F6   2635 	C$fb_lpc922.c$641$8$11 ==.
                           2636 ;	..\fb_lpc922.c:641: START_WRITECYCLE;					// load command, leert das pageregister
   07F6 75 E4 00           2637 	mov	_FMCON,#0x00
                    07F9   2638 	C$fb_lpc922.c$642$9$12 ==.
                           2639 ;	..\fb_lpc922.c:642: for(n=0;n<ab;n++) {
   07F9 AA*0F              2640 	mov	r2,(_telegramm + 0x0008)
   07FB 74 01              2641 	mov	a,#0x01
   07FD 5A                 2642 	anl	a,r2
   07FE 24 1C              2643 	add	a,#0x1C
   0800 FC                 2644 	mov	r4,a
   0801 AE*10              2645 	mov	r6,(_telegramm + 0x0009)
   0803 A8*00              2646 	mov	r0,_bp
   0805 08                 2647 	inc	r0
   0806 08                 2648 	inc	r0
   0807 76 00              2649 	mov	@r0,#0x00
   0809                    2650 00172$:
   0809 A8*00              2651 	mov	r0,_bp
   080B 08                 2652 	inc	r0
   080C 08                 2653 	inc	r0
   080D C3                 2654 	clr	c
   080E E6                 2655 	mov	a,@r0
   080F 9F                 2656 	subb	a,r7
   0810 40 03              2657 	jc	00244$
   0812 02s08rB9           2658 	ljmp	00175$
   0815                    2659 00244$:
                    0815   2660 	C$fb_lpc922.c$643$9$12 ==.
                           2661 ;	..\fb_lpc922.c:643: if(telegramm[8]==0)
   0815 EA                 2662 	mov	a,r2
   0816 70 3C              2663 	jnz	00119$
                    0818   2664 	C$fb_lpc922.c$645$1$1 ==.
                           2665 ;	..\fb_lpc922.c:645: if((telegramm[9]+n)==0x60) status60=telegramm[10+n];
   0818 C0 02              2666 	push	ar2
   081A E5*00              2667 	mov	a,_bp
   081C 24 03              2668 	add	a,#0x03
   081E F8                 2669 	mov	r0,a
   081F A6 06              2670 	mov	@r0,ar6
   0821 08                 2671 	inc	r0
   0822 76 00              2672 	mov	@r0,#0x00
   0824 A8*00              2673 	mov	r0,_bp
   0826 08                 2674 	inc	r0
   0827 08                 2675 	inc	r0
   0828 86 03              2676 	mov	ar3,@r0
   082A 7D 00              2677 	mov	r5,#0x00
   082C E5*00              2678 	mov	a,_bp
   082E 24 03              2679 	add	a,#0x03
   0830 F8                 2680 	mov	r0,a
   0831 EB                 2681 	mov	a,r3
   0832 26                 2682 	add	a,@r0
   0833 FB                 2683 	mov	r3,a
   0834 ED                 2684 	mov	a,r5
   0835 08                 2685 	inc	r0
   0836 36                 2686 	addc	a,@r0
   0837 FD                 2687 	mov	r5,a
   0838 BB 60 05           2688 	cjne	r3,#0x60,00246$
   083B BD 00 02           2689 	cjne	r5,#0x00,00246$
   083E 80 04              2690 	sjmp	00247$
   0840                    2691 00246$:
   0840 D0 02              2692 	pop	ar2
   0842 80 26              2693 	sjmp	00120$
   0844                    2694 00247$:
   0844 D0 02              2695 	pop	ar2
   0846 A8*00              2696 	mov	r0,_bp
   0848 08                 2697 	inc	r0
   0849 08                 2698 	inc	r0
   084A 74 0A              2699 	mov	a,#0x0A
   084C 26                 2700 	add	a,@r0
   084D 24r07              2701 	add	a,#_telegramm
   084F F9                 2702 	mov	r1,a
   0850 87*2E              2703 	mov	_status60,@r1
   0852 80 16              2704 	sjmp	00120$
   0854                    2705 00119$:
                    0854   2706 	C$fb_lpc922.c$656$10$14 ==.
                           2707 ;	..\fb_lpc922.c:656: WRITE_BYTE(telegramm[8],telegramm[9]+n,telegramm[n+10]);
   0854 8C E7              2708 	mov	_FMADRH,r4
   0856 A8*00              2709 	mov	r0,_bp
   0858 08                 2710 	inc	r0
   0859 08                 2711 	inc	r0
   085A E6                 2712 	mov	a,@r0
   085B 2E                 2713 	add	a,r6
   085C F5 E6              2714 	mov	_FMADRL,a
   085E A8*00              2715 	mov	r0,_bp
   0860 08                 2716 	inc	r0
   0861 08                 2717 	inc	r0
   0862 74 0A              2718 	mov	a,#0x0A
   0864 26                 2719 	add	a,@r0
   0865 24r07              2720 	add	a,#_telegramm
   0867 F9                 2721 	mov	r1,a
   0868 87 E5              2722 	mov	_FMDATA,@r1
   086A                    2723 00120$:
                    086A   2724 	C$fb_lpc922.c$658$9$12 ==.
                           2725 ;	..\fb_lpc922.c:658: if ((((telegramm[9]+n)&0x3F)==0x3F) && n!=(ab-1)) {		// Ende des 64-Byte Pageregisters, also zwischendurch flashen
   086A 8E 03              2726 	mov	ar3,r6
   086C 7D 00              2727 	mov	r5,#0x00
   086E A8*00              2728 	mov	r0,_bp
   0870 08                 2729 	inc	r0
   0871 08                 2730 	inc	r0
   0872 E5*00              2731 	mov	a,_bp
   0874 24 03              2732 	add	a,#0x03
   0876 F9                 2733 	mov	r1,a
   0877 E6                 2734 	mov	a,@r0
   0878 F7                 2735 	mov	@r1,a
   0879 09                 2736 	inc	r1
   087A 77 00              2737 	mov	@r1,#0x00
   087C E5*00              2738 	mov	a,_bp
   087E 24 03              2739 	add	a,#0x03
   0880 F8                 2740 	mov	r0,a
   0881 E6                 2741 	mov	a,@r0
   0882 2B                 2742 	add	a,r3
   0883 FB                 2743 	mov	r3,a
   0884 08                 2744 	inc	r0
   0885 E6                 2745 	mov	a,@r0
   0886 3D                 2746 	addc	a,r5
   0887 53 03 3F           2747 	anl	ar3,#0x3F
   088A 7D 00              2748 	mov	r5,#0x00
   088C BB 3F 22           2749 	cjne	r3,#0x3F,00174$
   088F BD 00 1F           2750 	cjne	r5,#0x00,00174$
   0892 8F 03              2751 	mov	ar3,r7
   0894 7D 00              2752 	mov	r5,#0x00
   0896 1B                 2753 	dec	r3
   0897 BB FF 01           2754 	cjne	r3,#0xFF,00250$
   089A 1D                 2755 	dec	r5
   089B                    2756 00250$:
   089B E5*00              2757 	mov	a,_bp
   089D 24 03              2758 	add	a,#0x03
   089F F8                 2759 	mov	r0,a
   08A0 E6                 2760 	mov	a,@r0
   08A1 B5 03 07           2761 	cjne	a,ar3,00251$
   08A4 08                 2762 	inc	r0
   08A5 E6                 2763 	mov	a,@r0
   08A6 B5 05 02           2764 	cjne	a,ar5,00251$
   08A9 80 06              2765 	sjmp	00174$
   08AB                    2766 00251$:
                    08AB   2767 	C$fb_lpc922.c$659$10$15 ==.
                           2768 ;	..\fb_lpc922.c:659: STOP_WRITECYCLE;			// write command, schreibt pageregister ins flash und versetzt CPU in idle fuer 4ms
   08AB 75 E4 68           2769 	mov	_FMCON,#0x68
                    08AE   2770 	C$fb_lpc922.c$660$10$15 ==.
                           2771 ;	..\fb_lpc922.c:660: START_WRITECYCLE;		// load command, leert das pageregister
   08AE 75 E4 00           2772 	mov	_FMCON,#0x00
   08B1                    2773 00174$:
                    08B1   2774 	C$fb_lpc922.c$642$8$11 ==.
                           2775 ;	..\fb_lpc922.c:642: for(n=0;n<ab;n++) {
   08B1 A8*00              2776 	mov	r0,_bp
   08B3 08                 2777 	inc	r0
   08B4 08                 2778 	inc	r0
   08B5 06                 2779 	inc	@r0
   08B6 02s08r09           2780 	ljmp	00172$
   08B9                    2781 00175$:
                    08B9   2782 	C$fb_lpc922.c$663$8$11 ==.
                           2783 ;	..\fb_lpc922.c:663: STOP_WRITECYCLE;					// write command, schreibt pageregister ins flash und versetzt CPU in idle fuer 4ms
   08B9 75 E4 68           2784 	mov	_FMCON,#0x68
                    08BC   2785 	C$fb_lpc922.c$664$8$11 ==.
                           2786 ;	..\fb_lpc922.c:664: EA=1;
   08BC D2 AF              2787 	setb	_IEN0_7
   08BE                    2788 00125$:
                    08BE   2789 	C$fb_lpc922.c$667$6$9 ==.
                           2790 ;	..\fb_lpc922.c:667: if(apdu==READ_MEMORY_REQUEST) {		// 01pppp10 0000xxxx
   08BE A8*00              2791 	mov	r0,_bp
   08C0 08                 2792 	inc	r0
   08C1 E6                 2793 	mov	a,@r0
   08C2 60 03              2794 	jz	00252$
   08C4 02s0Ar00           2795 	ljmp	00176$
   08C7                    2796 00252$:
                    08C7   2797 	C$fb_lpc922.c$668$7$16 ==.
                           2798 ;	..\fb_lpc922.c:668: mem_length=telegramm[7];		// Anzahl Bytes fuer spaeteres(!) memory Auslesen
   08C7 85*0E*03           2799 	mov	_mem_length,(_telegramm + 0x0007)
                    08CA   2800 	C$fb_lpc922.c$669$7$16 ==.
                           2801 ;	..\fb_lpc922.c:669: mem_adrh = telegramm[8];		// Adresse
   08CA 85*0F*04           2802 	mov	_mem_adrh,(_telegramm + 0x0008)
                    08CD   2803 	C$fb_lpc922.c$670$7$16 ==.
                           2804 ;	..\fb_lpc922.c:670: mem_adrl = telegramm[9];
   08CD 85*10*05           2805 	mov	_mem_adrl,(_telegramm + 0x0009)
                    08D0   2806 	C$fb_lpc922.c$671$7$16 ==.
                           2807 ;	..\fb_lpc922.c:671: send_obj_value(NCD_ACK);
   08D0 75 82 81           2808 	mov	dpl,#0x81
   08D3 12s06rC8           2809 	lcall	_send_obj_value
                    08D6   2810 	C$fb_lpc922.c$672$7$16 ==.
                           2811 ;	..\fb_lpc922.c:672: send_obj_value(READ_MEMORY_RESPONSE);
   08D6 75 82 84           2812 	mov	dpl,#0x84
   08D9 12s06rC8           2813 	lcall	_send_obj_value
                    08DC   2814 	C$fb_lpc922.c$675$5$8 ==.
                           2815 ;	..\fb_lpc922.c:675: break;
   08DC 02s0Ar00           2816 	ljmp	00176$
                    08DF   2817 	C$fb_lpc922.c$677$5$8 ==.
                           2818 ;	..\fb_lpc922.c:677: case DATA_PDU_MISC_OPERATIONS:
   08DF                    2819 00130$:
                    08DF   2820 	C$fb_lpc922.c$678$5$8 ==.
                           2821 ;	..\fb_lpc922.c:678: senders_pcount=telegramm[6]&0x3C;
   08DF 74 3C              2822 	mov	a,#0x3C
   08E1 5F                 2823 	anl	a,r7
   08E2 F5*06              2824 	mov	_senders_pcount,a
                    08E4   2825 	C$fb_lpc922.c$679$5$8 ==.
                           2826 ;	..\fb_lpc922.c:679: if(apdu==RESTART_REQUEST) {		// 01pppp11 10000000
   08E4 A8*00              2827 	mov	r0,_bp
   08E6 08                 2828 	inc	r0
   08E7 B6 80 03           2829 	cjne	@r0,#0x80,00132$
                    08EA   2830 	C$fb_lpc922.c$680$6$17 ==.
                           2831 ;	..\fb_lpc922.c:680: AUXR1|=0x08;				// Software Reset
   08EA 43 A2 08           2832 	orl	_AUXR1,#0x08
   08ED                    2833 00132$:
                    08ED   2834 	C$fb_lpc922.c$682$5$8 ==.
                           2835 ;	..\fb_lpc922.c:682: if(apdu==READ_MASK_VERSION_REQUEST) {		// 01pppp11 00000000
   08ED A8*00              2836 	mov	r0,_bp
   08EF 08                 2837 	inc	r0
   08F0 E6                 2838 	mov	a,@r0
   08F1 60 03              2839 	jz	00255$
   08F3 02s0Ar00           2840 	ljmp	00176$
   08F6                    2841 00255$:
                    08F6   2842 	C$fb_lpc922.c$683$6$18 ==.
                           2843 ;	..\fb_lpc922.c:683: send_obj_value(NCD_ACK);
   08F6 75 82 81           2844 	mov	dpl,#0x81
   08F9 12s06rC8           2845 	lcall	_send_obj_value
                    08FC   2846 	C$fb_lpc922.c$684$6$18 ==.
                           2847 ;	..\fb_lpc922.c:684: send_obj_value(READ_MASK_VERSION_RESPONSE);
   08FC 75 82 82           2848 	mov	dpl,#0x82
   08FF 12s06rC8           2849 	lcall	_send_obj_value
                    0902   2850 	C$fb_lpc922.c$686$5$8 ==.
                           2851 ;	..\fb_lpc922.c:686: break;
   0902 02s0Ar00           2852 	ljmp	00176$
                    0905   2853 	C$fb_lpc922.c$688$5$8 ==.
                           2854 ;	..\fb_lpc922.c:688: case CONNECT_PDU:	// 10000000 xxxxxxxx
   0905                    2855 00135$:
                    0905   2856 	C$fb_lpc922.c$689$5$8 ==.
                           2857 ;	..\fb_lpc922.c:689: if(!connected) {				// wenn bereits verbunden: ignorieren
   0905 30*0D 03           2858 	jnb	_connected,00256$
   0908 02s0Ar00           2859 	ljmp	00176$
   090B                    2860 00256$:
                    090B   2861 	C$fb_lpc922.c$690$6$19 ==.
                           2862 ;	..\fb_lpc922.c:690: connected=1;
   090B D2*0D              2863 	setb	_connected
                    090D   2864 	C$fb_lpc922.c$691$6$19 ==.
                           2865 ;	..\fb_lpc922.c:691: conh=telegramm[1];			// phys. Adresse des Verbindungspartners
   090D 85*08*00           2866 	mov	_conh,(_telegramm + 0x0001)
                    0910   2867 	C$fb_lpc922.c$692$6$19 ==.
                           2868 ;	..\fb_lpc922.c:692: conl=telegramm[2];
   0910 85*09*01           2869 	mov	_conl,(_telegramm + 0x0002)
                    0913   2870 	C$fb_lpc922.c$693$6$19 ==.
                           2871 ;	..\fb_lpc922.c:693: pcount=0;					// Paketzaehler zuruecksetzen
   0913 75*02 00           2872 	mov	_pcount,#0x00
                    0916   2873 	C$fb_lpc922.c$694$6$19 ==.
                           2874 ;	..\fb_lpc922.c:694: inc_pcount=0;
   0916 C2*0E              2875 	clr	_inc_pcount
                    0918   2876 	C$fb_lpc922.c$695$6$19 ==.
                           2877 ;	..\fb_lpc922.c:695: RTCCON=0x60;	//RTC stoppen
   0918 75 D1 60           2878 	mov	_RTCCON,#0x60
                    091B   2879 	C$fb_lpc922.c$696$6$19 ==.
                           2880 ;	..\fb_lpc922.c:696: RTCH=0x0B;      // reload Real Time Clock, 52ms
   091B 75 D2 0B           2881 	mov	_RTCH,#0x0B
                    091E   2882 	C$fb_lpc922.c$697$6$19 ==.
                           2883 ;	..\fb_lpc922.c:697: RTCL=0xB3;
   091E 75 D3 B3           2884 	mov	_RTCL,#0xB3
                    0921   2885 	C$fb_lpc922.c$698$6$19 ==.
                           2886 ;	..\fb_lpc922.c:698: RTCCON=0x61;	// RTC starten
   0921 75 D1 61           2887 	mov	_RTCCON,#0x61
                    0924   2888 	C$fb_lpc922.c$701$5$8 ==.
                           2889 ;	..\fb_lpc922.c:701: break;
   0924 02s0Ar00           2890 	ljmp	00176$
                    0927   2891 	C$fb_lpc922.c$703$5$8 ==.
                           2892 ;	..\fb_lpc922.c:703: case DISCONNECT_PDU:	// 10000001 xxxxxxxx
   0927                    2893 00138$:
                    0927   2894 	C$fb_lpc922.c$704$5$8 ==.
                           2895 ;	..\fb_lpc922.c:704: if(conh==telegramm[1] && conl==telegramm[2] )	{	// nur abbauen, wenn verbunden und Anforderung vom Verbindungspartner, kein ACK senden
   0927 E5*08              2896 	mov	a,(_telegramm + 0x0001)
   0929 B5*00 02           2897 	cjne	a,_conh,00257$
   092C 80 03              2898 	sjmp	00258$
   092E                    2899 00257$:
   092E 02s0Ar00           2900 	ljmp	00176$
   0931                    2901 00258$:
   0931 E5*09              2902 	mov	a,(_telegramm + 0x0002)
   0933 B5*01 02           2903 	cjne	a,_conl,00259$
   0936 80 03              2904 	sjmp	00260$
   0938                    2905 00259$:
   0938 02s0Ar00           2906 	ljmp	00176$
   093B                    2907 00260$:
                    093B   2908 	C$fb_lpc922.c$705$6$20 ==.
                           2909 ;	..\fb_lpc922.c:705: connected=0;// warum: && connected ???
   093B C2*0D              2910 	clr	_connected
                    093D   2911 	C$fb_lpc922.c$707$5$8 ==.
                           2912 ;	..\fb_lpc922.c:707: break;
   093D 02s0Ar00           2913 	ljmp	00176$
                    0940   2914 	C$fb_lpc922.c$709$5$8 ==.
                           2915 ;	..\fb_lpc922.c:709: case NACK_PDU:	// 11pppp11 xxxxxxxx
   0940                    2916 00142$:
                    0940   2917 	C$fb_lpc922.c$710$5$8 ==.
                           2918 ;	..\fb_lpc922.c:710: send_obj_value(T_DISCONNECT);
   0940 75 82 85           2919 	mov	dpl,#0x85
   0943 12s06rC8           2920 	lcall	_send_obj_value
                    0946   2921 	C$fb_lpc922.c$711$5$8 ==.
                           2922 ;	..\fb_lpc922.c:711: connected=0;//connected_timeout=111; spartipp 5 Byte wenn send.. weg kommt.
   0946 C2*0D              2923 	clr	_connected
                    0948   2924 	C$fb_lpc922.c$713$1$5 ==.
                           2925 ;	..\fb_lpc922.c:713: }
   0948 02s0Ar00           2926 	ljmp	00176$
   094B                    2927 00166$:
                    094B   2928 	C$fb_lpc922.c$718$2$5 ==.
                           2929 ;	..\fb_lpc922.c:718: else if(tpdu==GROUP_PDU){
   094B EE                 2930 	mov	a,r6
   094C 60 03              2931 	jz	00261$
   094E 02s0Ar00           2932 	ljmp	00176$
   0951                    2933 00261$:
                    0951   2934 	C$fb_lpc922.c$723$3$21 ==.
                           2935 ;	..\fb_lpc922.c:723: gapos = gapos_in_gat(telegramm[3], telegramm[4]);
   0951 C0*0B              2936 	push	(_telegramm + 0x0004)
   0953 8C 82              2937 	mov	dpl,r4
   0955 12s06r7A           2938 	lcall	_gapos_in_gat
   0958 AF 82              2939 	mov	r7,dpl
   095A 15 81              2940 	dec	sp
                    095C   2941 	C$fb_lpc922.c$725$3$21 ==.
                           2942 ;	..\fb_lpc922.c:725: if (gapos != 0xFF)
   095C BF FF 03           2943 	cjne	r7,#0xFF,00262$
   095F 02s0Ar00           2944 	ljmp	00176$
   0962                    2945 00262$:
                    0962   2946 	C$fb_lpc922.c$727$4$22 ==.
                           2947 ;	..\fb_lpc922.c:727: atp = eeprom[ASSOCTABPTR];  // Association Table Pointer
   0962 90 1D 11           2948 	mov	dptr,#(_eeprom + 0x0011)
   0965 E4                 2949 	clr	a
   0966 93                 2950 	movc	a,@a+dptr
                    0967   2951 	C$fb_lpc922.c$728$4$22 ==.
                           2952 ;	..\fb_lpc922.c:728: assmax = atp + eeprom[atp] * 2;	// Erster Eintrag = Anzahl Eintraege
   0967 FE                 2953 	mov	r6,a
   0968 F5 82              2954 	mov	dpl,a
   096A 75 83 1D           2955 	mov	dph,#(_eeprom >> 8)
   096D E4                 2956 	clr	a
   096E 93                 2957 	movc	a,@a+dptr
   096F 25 E0              2958 	add	a,acc
   0971 2E                 2959 	add	a,r6
   0972 FD                 2960 	mov	r5,a
                    0973   2961 	C$fb_lpc922.c$732$4$22 ==.
                           2962 ;	..\fb_lpc922.c:732: for (asspos = atp + 1; asspos < assmax; asspos+=2)
   0973 0E                 2963 	inc	r6
   0974 A8*00              2964 	mov	r0,_bp
   0976 08                 2965 	inc	r0
   0977 74 C0              2966 	mov	a,#0xC0
   0979 56                 2967 	anl	a,@r0
   097A FC                 2968 	mov	r4,a
   097B E4                 2969 	clr	a
   097C BC 80 01           2970 	cjne	r4,#0x80,00263$
   097F 04                 2971 	inc	a
   0980                    2972 00263$:
   0980 FC                 2973 	mov	r4,a
   0981                    2974 00157$:
   0981 C3                 2975 	clr	c
   0982 EE                 2976 	mov	a,r6
   0983 9D                 2977 	subb	a,r5
   0984 40 03              2978 	jc	00265$
   0986 02s0Ar00           2979 	ljmp	00176$
   0989                    2980 00265$:
                    0989   2981 	C$fb_lpc922.c$736$5$23 ==.
                           2982 ;	..\fb_lpc922.c:736: if (gapos == eeprom[asspos])
   0989 8E 82              2983 	mov	dpl,r6
   098B 75 83 1D           2984 	mov	dph,#(_eeprom >> 8)
   098E E4                 2985 	clr	a
   098F 93                 2986 	movc	a,@a+dptr
   0990 FB                 2987 	mov	r3,a
   0991 EF                 2988 	mov	a,r7
   0992 B5 03 66           2989 	cjne	a,ar3,00159$
                    0995   2990 	C$fb_lpc922.c$738$6$24 ==.
                           2991 ;	..\fb_lpc922.c:738: objno = eeprom[asspos + 1];	     // Objektnummer
   0995 EE                 2992 	mov	a,r6
   0996 04                 2993 	inc	a
   0997 90 1D 00           2994 	mov	dptr,#_eeprom
   099A 93                 2995 	movc	a,@a+dptr
                    099B   2996 	C$fb_lpc922.c$739$6$24 ==.
                           2997 ;	..\fb_lpc922.c:739: objflags = read_objflags(objno); // Objekt Flags lesen
   099B FB                 2998 	mov	r3,a
   099C F5 82              2999 	mov	dpl,a
   099E C0 07              3000 	push	ar7
   09A0 C0 06              3001 	push	ar6
   09A2 C0 05              3002 	push	ar5
   09A4 C0 04              3003 	push	ar4
   09A6 C0 03              3004 	push	ar3
   09A8 12s0Ar06           3005 	lcall	_read_objflags
   09AB AA 82              3006 	mov	r2,dpl
   09AD D0 03              3007 	pop	ar3
   09AF D0 04              3008 	pop	ar4
   09B1 D0 05              3009 	pop	ar5
   09B3 D0 06              3010 	pop	ar6
   09B5 D0 07              3011 	pop	ar7
                    09B7   3012 	C$fb_lpc922.c$742$6$24 ==.
                           3013 ;	..\fb_lpc922.c:742: if((apdu&0xC0)==WRITE_GROUP)
   09B7 EC                 3014 	mov	a,r4
   09B8 60 2E              3015 	jz	00150$
                    09BA   3016 	C$fb_lpc922.c$747$1$1 ==.
                           3017 ;	..\fb_lpc922.c:747: if ((objflags & 0x14) == 0x14)
   09BA C0 04              3018 	push	ar4
   09BC 74 14              3019 	mov	a,#0x14
   09BE 5A                 3020 	anl	a,r2
   09BF FC                 3021 	mov	r4,a
   09C0 BC 14 02           3022 	cjne	r4,#0x14,00269$
   09C3 80 04              3023 	sjmp	00270$
   09C5                    3024 00269$:
   09C5 D0 04              3025 	pop	ar4
   09C7 80 1F              3026 	sjmp	00150$
   09C9                    3027 00270$:
   09C9 D0 04              3028 	pop	ar4
                    09CB   3029 	C$fb_lpc922.c$748$7$25 ==.
                           3030 ;	..\fb_lpc922.c:748: write_value_req(objno);
   09CB 8B 82              3031 	mov	dpl,r3
   09CD C0 07              3032 	push	ar7
   09CF C0 06              3033 	push	ar6
   09D1 C0 05              3034 	push	ar5
   09D3 C0 04              3035 	push	ar4
   09D5 C0 03              3036 	push	ar3
   09D7 C0 02              3037 	push	ar2
   09D9 12s00r00           3038 	lcall	_write_value_req
   09DC D0 02              3039 	pop	ar2
   09DE D0 03              3040 	pop	ar3
   09E0 D0 04              3041 	pop	ar4
   09E2 D0 05              3042 	pop	ar5
   09E4 D0 06              3043 	pop	ar6
   09E6 D0 07              3044 	pop	ar7
   09E8                    3045 00150$:
                    09E8   3046 	C$fb_lpc922.c$750$6$24 ==.
                           3047 ;	..\fb_lpc922.c:750: if(apdu==READ_GROUP_REQUEST)
   09E8 A8*00              3048 	mov	r0,_bp
   09EA 08                 3049 	inc	r0
   09EB E6                 3050 	mov	a,@r0
   09EC 70 0D              3051 	jnz	00159$
                    09EE   3052 	C$fb_lpc922.c$752$7$26 ==.
                           3053 ;	..\fb_lpc922.c:752: if ((objflags & 0x0C) == 0x0C)
   09EE 53 02 0C           3054 	anl	ar2,#0x0C
   09F1 BA 0C 0C           3055 	cjne	r2,#0x0C,00176$
                    09F4   3056 	C$fb_lpc922.c$753$7$26 ==.
                           3057 ;	..\fb_lpc922.c:753: read_value_req(objno);	// Objektwert lesen und read_value_response senden	00000000 00000000
   09F4 8B 82              3058 	mov	dpl,r3
   09F6 12s00r00           3059 	lcall	_read_value_req
                    09F9   3060 	C$fb_lpc922.c$754$7$26 ==.
                           3061 ;	..\fb_lpc922.c:754: break;
   09F9 80 05              3062 	sjmp	00176$
   09FB                    3063 00159$:
                    09FB   3064 	C$fb_lpc922.c$732$4$22 ==.
                           3065 ;	..\fb_lpc922.c:732: for (asspos = atp + 1; asspos < assmax; asspos+=2)
   09FB 0E                 3066 	inc	r6
   09FC 0E                 3067 	inc	r6
   09FD 02s09r81           3068 	ljmp	00157$
   0A00                    3069 00176$:
   0A00 85*00 81           3070 	mov	sp,_bp
   0A03 D0*00              3071 	pop	_bp
                    0A05   3072 	C$fb_lpc922.c$761$1$1 ==.
                    0A05   3073 	XG$process_tel$0$0 ==.
   0A05 22                 3074 	ret
                           3075 ;------------------------------------------------------------
                           3076 ;Allocation info for local variables in function 'read_objflags'
                           3077 ;------------------------------------------------------------
                           3078 ;objno                     Allocated to registers r7 
                           3079 ;------------------------------------------------------------
                    0A06   3080 	G$read_objflags$0$0 ==.
                    0A06   3081 	C$fb_lpc922.c$810$1$1 ==.
                           3082 ;	..\fb_lpc922.c:810: unsigned char read_objflags(unsigned char objno)
                           3083 ;	-----------------------------------------
                           3084 ;	 function read_objflags
                           3085 ;	-----------------------------------------
   0A06                    3086 _read_objflags:
   0A06 AF 82              3087 	mov	r7,dpl
                    0A08   3088 	C$fb_lpc922.c$813$1$1 ==.
                           3089 ;	..\fb_lpc922.c:813: return(eeprom[eeprom[COMMSTABPTR]+3+objno+objno+objno]);
   0A08 90 1D 12           3090 	mov	dptr,#(_eeprom + 0x0012)
   0A0B E4                 3091 	clr	a
   0A0C 93                 3092 	movc	a,@a+dptr
   0A0D FE                 3093 	mov	r6,a
   0A0E 0E                 3094 	inc	r6
   0A0F 0E                 3095 	inc	r6
   0A10 0E                 3096 	inc	r6
   0A11 EF                 3097 	mov	a,r7
   0A12 2E                 3098 	add	a,r6
   0A13 2F                 3099 	add	a,r7
   0A14 2F                 3100 	add	a,r7
   0A15 90 1D 00           3101 	mov	dptr,#_eeprom
   0A18 93                 3102 	movc	a,@a+dptr
                    0A19   3103 	C$fb_lpc922.c$814$1$1 ==.
                    0A19   3104 	XG$read_objflags$0$0 ==.
   0A19 F5 82              3105 	mov	dpl,a
   0A1B 22                 3106 	ret
                           3107 ;------------------------------------------------------------
                           3108 ;Allocation info for local variables in function 'restart_hw'
                           3109 ;------------------------------------------------------------
                    0A1C   3110 	G$restart_hw$0$0 ==.
                    0A1C   3111 	C$fb_lpc922.c$849$1$1 ==.
                           3112 ;	..\fb_lpc922.c:849: void restart_hw(void)
                           3113 ;	-----------------------------------------
                           3114 ;	 function restart_hw
                           3115 ;	-----------------------------------------
   0A1C                    3116 _restart_hw:
                    0A1C   3117 	C$fb_lpc922.c$851$1$1 ==.
                           3118 ;	..\fb_lpc922.c:851: DIVM=0;			// Taktferquenz nicht teilen -> volles Tempo
   0A1C 75 95 00           3119 	mov	_DIVM,#0x00
                    0A1F   3120 	C$fb_lpc922.c$853$1$1 ==.
                           3121 ;	..\fb_lpc922.c:853: P1M1=0x14;		// Port 1 auf quasi-bidirektional,
   0A1F 75 91 14           3122 	mov	_P1M1,#0x14
                    0A22   3123 	C$fb_lpc922.c$854$1$1 ==.
                           3124 ;	..\fb_lpc922.c:854: P1M2=0x4C;		// ausser P1.2(T0 als PWM Ausgang)=open-drain,
   0A22 75 92 4C           3125 	mov	_P1M2,#0x4C
                    0A25   3126 	C$fb_lpc922.c$858$1$1 ==.
                           3127 ;	..\fb_lpc922.c:858: FBOUTC=0;		// Bus-Ausgang auf low
   0A25 C2 96              3128 	clr	_P1_6
                    0A27   3129 	C$fb_lpc922.c$860$1$1 ==.
                           3130 ;	..\fb_lpc922.c:860: TMOD=0x21;		// Timer 0 als 16-Bit Timer, Timer 1 als 8 Bit autoreload
   0A27 75 89 21           3131 	mov	_TMOD,#0x21
                    0A2A   3132 	C$fb_lpc922.c$861$1$1 ==.
                           3133 ;	..\fb_lpc922.c:861: TAMOD=0x00;
   0A2A 75 8F 00           3134 	mov	_TAMOD,#0x00
                    0A2D   3135 	C$fb_lpc922.c$862$1$1 ==.
                           3136 ;	..\fb_lpc922.c:862: TR0=0;			// Timer 0 (zur Verwendung in app) zunaechst stoppen
   0A2D C2 8C              3137 	clr	_TCON_4
                    0A2F   3138 	C$fb_lpc922.c$863$1$1 ==.
                           3139 ;	..\fb_lpc922.c:863: TR1=0;			// Timer 1 (Empfangs-Timer, nicht in app verwenden!) zunaechst stoppen
   0A2F C2 8E              3140 	clr	_TCON_6
                    0A31   3141 	C$fb_lpc922.c$864$1$1 ==.
                           3142 ;	..\fb_lpc922.c:864: TH1=128;		// Timer 1 auf 104us/3
   0A31 75 8D 80           3143 	mov	_TH1,#0x80
                    0A34   3144 	C$fb_lpc922.c$865$1$1 ==.
                           3145 ;	..\fb_lpc922.c:865: TL1=128;
   0A34 75 8B 80           3146 	mov	_TL1,#0x80
                    0A37   3147 	C$fb_lpc922.c$866$1$1 ==.
                           3148 ;	..\fb_lpc922.c:866: TF1=0;
   0A37 C2 8F              3149 	clr	_TCON_7
                    0A39   3150 	C$fb_lpc922.c$873$1$1 ==.
                           3151 ;	..\fb_lpc922.c:873: interrupted=0;	// wird durch die interrupt-routine auf 1 gesetzt
   0A39 C2*01              3152 	clr	_interrupted
                    0A3B   3153 	C$fb_lpc922.c$874$1$1 ==.
                           3154 ;	..\fb_lpc922.c:874: IEN0=0x80;// mit 0x80 sind die unten auskommentierten erschlagen.
   0A3B 75 A8 80           3155 	mov	_IEN0,#0x80
                    0A3E   3156 	C$fb_lpc922.c$875$1$1 ==.
                           3157 ;	..\fb_lpc922.c:875: IEN1=0x00;
   0A3E 75 E8 00           3158 	mov	_IEN1,#0x00
                    0A41   3159 	C$fb_lpc922.c$882$1$1 ==.
                           3160 ;	..\fb_lpc922.c:882: IP0=0x04;		// hÃ¶chste PrioritÃ¤t fuer ext1
   0A41 75 B8 04           3161 	mov	_IP0,#0x04
                    0A44   3162 	C$fb_lpc922.c$883$1$1 ==.
                           3163 ;	..\fb_lpc922.c:883: IP0H=0x0C;
   0A44 75 B7 0C           3164 	mov	_IP0H,#0x0C
                    0A47   3165 	C$fb_lpc922.c$884$1$1 ==.
                           3166 ;	..\fb_lpc922.c:884: IT1=1;			// Interrupt 1 flankengetriggert=1
   0A47 D2 8A              3167 	setb	_TCON_2
                    0A49   3168 	C$fb_lpc922.c$886$1$1 ==.
                           3169 ;	..\fb_lpc922.c:886: status60=0x2E;	// Status-Byte (steht normal im userram an 0x60)
   0A49 75*2E 2E           3170 	mov	_status60,#0x2E
                    0A4C   3171 	C$fb_lpc922.c$888$1$1 ==.
                           3172 ;	..\fb_lpc922.c:888: ack=0;			// ack und nack flag zurÃ¼cksetzen
   0A4C C2*03              3173 	clr	_ack
                    0A4E   3174 	C$fb_lpc922.c$889$1$1 ==.
                           3175 ;	..\fb_lpc922.c:889: nack=0;
   0A4E C2*04              3176 	clr	_nack
                    0A50   3177 	C$fb_lpc922.c$890$1$1 ==.
                           3178 ;	..\fb_lpc922.c:890: send_ack=0;
   0A50 C2*0B              3179 	clr	_send_ack
                    0A52   3180 	C$fb_lpc922.c$891$1$1 ==.
                           3181 ;	..\fb_lpc922.c:891: send_nack=0;
   0A52 C2*0C              3182 	clr	_send_nack
                    0A54   3183 	C$fb_lpc922.c$892$1$1 ==.
                           3184 ;	..\fb_lpc922.c:892: tel_arrived=0;	// kein Telegramm empfangen
   0A54 C2*06              3185 	clr	_tel_arrived
                    0A56   3186 	C$fb_lpc922.c$893$1$1 ==.
                           3187 ;	..\fb_lpc922.c:893: auto_ack=1;		// empfangene Telegramme automatisch mit ack bestaetigen
   0A56 D2*08              3188 	setb	_auto_ack
                    0A58   3189 	C$fb_lpc922.c$894$1$1 ==.
                           3190 ;	..\fb_lpc922.c:894: tx_nextwrite=0;	// Zeiger auf naechste zu schreibende Objektnr. in tx_buffer
   0A58 75*2C 00           3191 	mov	_tx_nextwrite,#0x00
                    0A5B   3192 	C$fb_lpc922.c$895$1$1 ==.
                           3193 ;	..\fb_lpc922.c:895: tx_nextsend=0;	// Zeiger auf naechste zu sendende Objektnr. in tx_buffer
   0A5B 75*2D 00           3194 	mov	_tx_nextsend,#0x00
                    0A5E   3195 	C$fb_lpc922.c$896$1$1 ==.
                           3196 ;	..\fb_lpc922.c:896: pcount=0;		// Paketzaehler initialisieren
   0A5E 75*02 00           3197 	mov	_pcount,#0x00
                    0A61   3198 	C$fb_lpc922.c$897$1$1 ==.
                           3199 ;	..\fb_lpc922.c:897: inc_pcount=0;
   0A61 C2*0E              3200 	clr	_inc_pcount
                    0A63   3201 	C$fb_lpc922.c$898$1$1 ==.
                           3202 ;	..\fb_lpc922.c:898: connected=0;	// keine Verbindung
   0A63 C2*0D              3203 	clr	_connected
                    0A65   3204 	C$fb_lpc922.c$900$1$1 ==.
                           3205 ;	..\fb_lpc922.c:900: init_rx();		// Empfang initialisieren
   0A65 12s05rEA           3206 	lcall	_init_rx
                    0A68   3207 	C$fb_lpc922.c$901$1$1 ==.
                    0A68   3208 	XG$restart_hw$0$0 ==.
   0A68 22                 3209 	ret
                           3210 	.area CSEG    (CODE)
                           3211 	.area CONST   (CODE)
                    1D00   3212 G$eeprom$0$0 == 0x1d00
                    1D00   3213 _eeprom	=	0x1d00
                    0000   3214 G$priotable$0$0 == .
   0000                    3215 _priotable:
   0000 B0                 3216 	.db #0xB0	; 176
   0001 B8                 3217 	.db #0xB8	; 184
   0002 B4                 3218 	.db #0xB4	; 180
   0003 BC                 3219 	.db #0xBC	; 188
                           3220 	.area XINIT   (CODE)
                           3221 	.area CABS    (ABS,CODE)
