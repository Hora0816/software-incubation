                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.1.0 #7066 (Nov 22 2011) (MINGW32)
                              4 ; This file was generated Sun Aug 21 21:51:58 2016
                              5 ;--------------------------------------------------------
                              6 	.module fb_lpc922
                              7 	.optsdcc -mmcs51 --model-small
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _priotable
                             13 	.globl _eeprom
                             14 	.globl _read_obj_value
                             15 	.globl _read_value_req
                             16 	.globl _write_value_req
                             17 	.globl _P3_1
                             18 	.globl _P3_0
                             19 	.globl _P1_7
                             20 	.globl _P1_6
                             21 	.globl _P1_5
                             22 	.globl _P1_4
                             23 	.globl _P1_3
                             24 	.globl _P1_2
                             25 	.globl _P1_1
                             26 	.globl _P1_0
                             27 	.globl _P0_7
                             28 	.globl _P0_6
                             29 	.globl _P0_5
                             30 	.globl _P0_4
                             31 	.globl _P0_3
                             32 	.globl _P0_2
                             33 	.globl _P0_1
                             34 	.globl _P0_0
                             35 	.globl _I2CON_0
                             36 	.globl _I2CON_2
                             37 	.globl _I2CON_3
                             38 	.globl _I2CON_4
                             39 	.globl _I2CON_5
                             40 	.globl _I2CON_6
                             41 	.globl _SCON_7
                             42 	.globl _SCON_6
                             43 	.globl _SCON_5
                             44 	.globl _SCON_4
                             45 	.globl _SCON_3
                             46 	.globl _SCON_2
                             47 	.globl _SCON_1
                             48 	.globl _SCON_0
                             49 	.globl _IP0_0
                             50 	.globl _IP0_1
                             51 	.globl _IP0_2
                             52 	.globl _IP0_3
                             53 	.globl _IP0_4
                             54 	.globl _IP0_5
                             55 	.globl _IP0_6
                             56 	.globl _IP1_0
                             57 	.globl _IP1_1
                             58 	.globl _IP1_2
                             59 	.globl _IP1_6
                             60 	.globl _IEN1_0
                             61 	.globl _IEN1_1
                             62 	.globl _IEN1_2
                             63 	.globl _IEN0_0
                             64 	.globl _IEN0_1
                             65 	.globl _IEN0_2
                             66 	.globl _IEN0_3
                             67 	.globl _IEN0_4
                             68 	.globl _IEN0_5
                             69 	.globl _IEN0_6
                             70 	.globl _IEN0_7
                             71 	.globl _TCON_0
                             72 	.globl _TCON_1
                             73 	.globl _TCON_2
                             74 	.globl _TCON_3
                             75 	.globl _TCON_4
                             76 	.globl _TCON_5
                             77 	.globl _TCON_6
                             78 	.globl _TCON_7
                             79 	.globl _PSW_7
                             80 	.globl _PSW_6
                             81 	.globl _PSW_5
                             82 	.globl _PSW_4
                             83 	.globl _PSW_3
                             84 	.globl _PSW_2
                             85 	.globl _PSW_1
                             86 	.globl _PSW_0
                             87 	.globl _IEN1
                             88 	.globl _IP0H
                             89 	.globl _WFEED2
                             90 	.globl _WFEED1
                             91 	.globl _WDL
                             92 	.globl _WDCON
                             93 	.globl _TRIM
                             94 	.globl _TAMOD
                             95 	.globl _SSTAT
                             96 	.globl _RTCL
                             97 	.globl _RTCH
                             98 	.globl _RTCCON
                             99 	.globl _RSTSRC
                            100 	.globl _PT0AD
                            101 	.globl _PCONA
                            102 	.globl _P3M2
                            103 	.globl _P3M1
                            104 	.globl _P1M2
                            105 	.globl _P1M1
                            106 	.globl _P0M2
                            107 	.globl _P0M1
                            108 	.globl _KBPATN
                            109 	.globl _KBMASK
                            110 	.globl _KBCON
                            111 	.globl _IP1H
                            112 	.globl _IP1
                            113 	.globl _I2STAT
                            114 	.globl _I2SCLL
                            115 	.globl _I2SCLH
                            116 	.globl _I2DAT
                            117 	.globl _I2CON
                            118 	.globl _I2ADR
                            119 	.globl _FMDATA
                            120 	.globl _FMCON
                            121 	.globl _FMADRL
                            122 	.globl _FMADRH
                            123 	.globl _DIVM
                            124 	.globl _CMP2
                            125 	.globl _CMP1
                            126 	.globl _BRGCON
                            127 	.globl _BRGR1
                            128 	.globl _BRGR0
                            129 	.globl _SADEN
                            130 	.globl _SADDR
                            131 	.globl _AUXR1
                            132 	.globl _SBUF
                            133 	.globl _SCON
                            134 	.globl _IP0
                            135 	.globl _IEN0
                            136 	.globl _TH1
                            137 	.globl _TH0
                            138 	.globl _TL1
                            139 	.globl _TL0
                            140 	.globl _TMOD
                            141 	.globl _TCON
                            142 	.globl _PCON
                            143 	.globl _DPH
                            144 	.globl _DPL
                            145 	.globl _SP
                            146 	.globl _B
                            147 	.globl _ACC
                            148 	.globl _PSW
                            149 	.globl _P3
                            150 	.globl _P1
                            151 	.globl _P0
                            152 	.globl _telegramm_ok
                            153 	.globl _inc_pcount
                            154 	.globl _connected
                            155 	.globl _send_nack
                            156 	.globl _send_ack
                            157 	.globl _wait_for_ack
                            158 	.globl _fbtx_bit
                            159 	.globl _auto_ack
                            160 	.globl _tel_sent
                            161 	.globl _tel_arrived
                            162 	.globl _its_me
                            163 	.globl _nack
                            164 	.globl _ack
                            165 	.globl _fb_parity
                            166 	.globl _interrupted
                            167 	.globl _parity_ok
                            168 	.globl _connected_timeout
                            169 	.globl _status60
                            170 	.globl _tx_nextsend
                            171 	.globl _tx_nextwrite
                            172 	.globl _RAM
                            173 	.globl _repeat_count
                            174 	.globl _fb_state
                            175 	.globl _fb_pattern
                            176 	.globl _fbrx_byte
                            177 	.globl _cs
                            178 	.globl _telpos
                            179 	.globl _tx_buffer
                            180 	.globl _telegramm
                            181 	.globl _senders_pcount
                            182 	.globl _mem_adrl
                            183 	.globl _mem_adrh
                            184 	.globl _mem_length
                            185 	.globl _pcount
                            186 	.globl _conl
                            187 	.globl _conh
                            188 	.globl _X1_int
                            189 	.globl _T1_int
                            190 	.globl _init_rx
                            191 	.globl _init_tx
                            192 	.globl _gapos_in_gat
                            193 	.globl _send_obj_value
                            194 	.globl _process_tel
                            195 	.globl _read_objflags
                            196 	.globl _restart_hw
                            197 ;--------------------------------------------------------
                            198 ; special function registers
                            199 ;--------------------------------------------------------
                            200 	.area RSEG    (ABS,DATA)
   0000                     201 	.org 0x0000
                    0080    202 G$P0$0$0 == 0x0080
                    0080    203 _P0	=	0x0080
                    0090    204 G$P1$0$0 == 0x0090
                    0090    205 _P1	=	0x0090
                    00B0    206 G$P3$0$0 == 0x00b0
                    00B0    207 _P3	=	0x00b0
                    00D0    208 G$PSW$0$0 == 0x00d0
                    00D0    209 _PSW	=	0x00d0
                    00E0    210 G$ACC$0$0 == 0x00e0
                    00E0    211 _ACC	=	0x00e0
                    00F0    212 G$B$0$0 == 0x00f0
                    00F0    213 _B	=	0x00f0
                    0081    214 G$SP$0$0 == 0x0081
                    0081    215 _SP	=	0x0081
                    0082    216 G$DPL$0$0 == 0x0082
                    0082    217 _DPL	=	0x0082
                    0083    218 G$DPH$0$0 == 0x0083
                    0083    219 _DPH	=	0x0083
                    0087    220 G$PCON$0$0 == 0x0087
                    0087    221 _PCON	=	0x0087
                    0088    222 G$TCON$0$0 == 0x0088
                    0088    223 _TCON	=	0x0088
                    0089    224 G$TMOD$0$0 == 0x0089
                    0089    225 _TMOD	=	0x0089
                    008A    226 G$TL0$0$0 == 0x008a
                    008A    227 _TL0	=	0x008a
                    008B    228 G$TL1$0$0 == 0x008b
                    008B    229 _TL1	=	0x008b
                    008C    230 G$TH0$0$0 == 0x008c
                    008C    231 _TH0	=	0x008c
                    008D    232 G$TH1$0$0 == 0x008d
                    008D    233 _TH1	=	0x008d
                    00A8    234 G$IEN0$0$0 == 0x00a8
                    00A8    235 _IEN0	=	0x00a8
                    00B8    236 G$IP0$0$0 == 0x00b8
                    00B8    237 _IP0	=	0x00b8
                    0098    238 G$SCON$0$0 == 0x0098
                    0098    239 _SCON	=	0x0098
                    0099    240 G$SBUF$0$0 == 0x0099
                    0099    241 _SBUF	=	0x0099
                    00A2    242 G$AUXR1$0$0 == 0x00a2
                    00A2    243 _AUXR1	=	0x00a2
                    00A9    244 G$SADDR$0$0 == 0x00a9
                    00A9    245 _SADDR	=	0x00a9
                    00B9    246 G$SADEN$0$0 == 0x00b9
                    00B9    247 _SADEN	=	0x00b9
                    00BE    248 G$BRGR0$0$0 == 0x00be
                    00BE    249 _BRGR0	=	0x00be
                    00BF    250 G$BRGR1$0$0 == 0x00bf
                    00BF    251 _BRGR1	=	0x00bf
                    00BD    252 G$BRGCON$0$0 == 0x00bd
                    00BD    253 _BRGCON	=	0x00bd
                    00AC    254 G$CMP1$0$0 == 0x00ac
                    00AC    255 _CMP1	=	0x00ac
                    00AD    256 G$CMP2$0$0 == 0x00ad
                    00AD    257 _CMP2	=	0x00ad
                    0095    258 G$DIVM$0$0 == 0x0095
                    0095    259 _DIVM	=	0x0095
                    00E7    260 G$FMADRH$0$0 == 0x00e7
                    00E7    261 _FMADRH	=	0x00e7
                    00E6    262 G$FMADRL$0$0 == 0x00e6
                    00E6    263 _FMADRL	=	0x00e6
                    00E4    264 G$FMCON$0$0 == 0x00e4
                    00E4    265 _FMCON	=	0x00e4
                    00E5    266 G$FMDATA$0$0 == 0x00e5
                    00E5    267 _FMDATA	=	0x00e5
                    00DB    268 G$I2ADR$0$0 == 0x00db
                    00DB    269 _I2ADR	=	0x00db
                    00D8    270 G$I2CON$0$0 == 0x00d8
                    00D8    271 _I2CON	=	0x00d8
                    00DA    272 G$I2DAT$0$0 == 0x00da
                    00DA    273 _I2DAT	=	0x00da
                    00DD    274 G$I2SCLH$0$0 == 0x00dd
                    00DD    275 _I2SCLH	=	0x00dd
                    00DC    276 G$I2SCLL$0$0 == 0x00dc
                    00DC    277 _I2SCLL	=	0x00dc
                    00D9    278 G$I2STAT$0$0 == 0x00d9
                    00D9    279 _I2STAT	=	0x00d9
                    00F8    280 G$IP1$0$0 == 0x00f8
                    00F8    281 _IP1	=	0x00f8
                    00F7    282 G$IP1H$0$0 == 0x00f7
                    00F7    283 _IP1H	=	0x00f7
                    0094    284 G$KBCON$0$0 == 0x0094
                    0094    285 _KBCON	=	0x0094
                    0086    286 G$KBMASK$0$0 == 0x0086
                    0086    287 _KBMASK	=	0x0086
                    0093    288 G$KBPATN$0$0 == 0x0093
                    0093    289 _KBPATN	=	0x0093
                    0084    290 G$P0M1$0$0 == 0x0084
                    0084    291 _P0M1	=	0x0084
                    0085    292 G$P0M2$0$0 == 0x0085
                    0085    293 _P0M2	=	0x0085
                    0091    294 G$P1M1$0$0 == 0x0091
                    0091    295 _P1M1	=	0x0091
                    0092    296 G$P1M2$0$0 == 0x0092
                    0092    297 _P1M2	=	0x0092
                    00B1    298 G$P3M1$0$0 == 0x00b1
                    00B1    299 _P3M1	=	0x00b1
                    00B2    300 G$P3M2$0$0 == 0x00b2
                    00B2    301 _P3M2	=	0x00b2
                    00B5    302 G$PCONA$0$0 == 0x00b5
                    00B5    303 _PCONA	=	0x00b5
                    00F6    304 G$PT0AD$0$0 == 0x00f6
                    00F6    305 _PT0AD	=	0x00f6
                    00DF    306 G$RSTSRC$0$0 == 0x00df
                    00DF    307 _RSTSRC	=	0x00df
                    00D1    308 G$RTCCON$0$0 == 0x00d1
                    00D1    309 _RTCCON	=	0x00d1
                    00D2    310 G$RTCH$0$0 == 0x00d2
                    00D2    311 _RTCH	=	0x00d2
                    00D3    312 G$RTCL$0$0 == 0x00d3
                    00D3    313 _RTCL	=	0x00d3
                    00BA    314 G$SSTAT$0$0 == 0x00ba
                    00BA    315 _SSTAT	=	0x00ba
                    008F    316 G$TAMOD$0$0 == 0x008f
                    008F    317 _TAMOD	=	0x008f
                    0096    318 G$TRIM$0$0 == 0x0096
                    0096    319 _TRIM	=	0x0096
                    00A7    320 G$WDCON$0$0 == 0x00a7
                    00A7    321 _WDCON	=	0x00a7
                    00C1    322 G$WDL$0$0 == 0x00c1
                    00C1    323 _WDL	=	0x00c1
                    00C2    324 G$WFEED1$0$0 == 0x00c2
                    00C2    325 _WFEED1	=	0x00c2
                    00C3    326 G$WFEED2$0$0 == 0x00c3
                    00C3    327 _WFEED2	=	0x00c3
                    00B7    328 G$IP0H$0$0 == 0x00b7
                    00B7    329 _IP0H	=	0x00b7
                    00E8    330 G$IEN1$0$0 == 0x00e8
                    00E8    331 _IEN1	=	0x00e8
                            332 ;--------------------------------------------------------
                            333 ; special function bits
                            334 ;--------------------------------------------------------
                            335 	.area RSEG    (ABS,DATA)
   0000                     336 	.org 0x0000
                    00D0    337 G$PSW_0$0$0 == 0x00d0
                    00D0    338 _PSW_0	=	0x00d0
                    00D1    339 G$PSW_1$0$0 == 0x00d1
                    00D1    340 _PSW_1	=	0x00d1
                    00D2    341 G$PSW_2$0$0 == 0x00d2
                    00D2    342 _PSW_2	=	0x00d2
                    00D3    343 G$PSW_3$0$0 == 0x00d3
                    00D3    344 _PSW_3	=	0x00d3
                    00D4    345 G$PSW_4$0$0 == 0x00d4
                    00D4    346 _PSW_4	=	0x00d4
                    00D5    347 G$PSW_5$0$0 == 0x00d5
                    00D5    348 _PSW_5	=	0x00d5
                    00D6    349 G$PSW_6$0$0 == 0x00d6
                    00D6    350 _PSW_6	=	0x00d6
                    00D7    351 G$PSW_7$0$0 == 0x00d7
                    00D7    352 _PSW_7	=	0x00d7
                    008F    353 G$TCON_7$0$0 == 0x008f
                    008F    354 _TCON_7	=	0x008f
                    008E    355 G$TCON_6$0$0 == 0x008e
                    008E    356 _TCON_6	=	0x008e
                    008D    357 G$TCON_5$0$0 == 0x008d
                    008D    358 _TCON_5	=	0x008d
                    008C    359 G$TCON_4$0$0 == 0x008c
                    008C    360 _TCON_4	=	0x008c
                    008B    361 G$TCON_3$0$0 == 0x008b
                    008B    362 _TCON_3	=	0x008b
                    008A    363 G$TCON_2$0$0 == 0x008a
                    008A    364 _TCON_2	=	0x008a
                    0089    365 G$TCON_1$0$0 == 0x0089
                    0089    366 _TCON_1	=	0x0089
                    0088    367 G$TCON_0$0$0 == 0x0088
                    0088    368 _TCON_0	=	0x0088
                    00AF    369 G$IEN0_7$0$0 == 0x00af
                    00AF    370 _IEN0_7	=	0x00af
                    00AE    371 G$IEN0_6$0$0 == 0x00ae
                    00AE    372 _IEN0_6	=	0x00ae
                    00AD    373 G$IEN0_5$0$0 == 0x00ad
                    00AD    374 _IEN0_5	=	0x00ad
                    00AC    375 G$IEN0_4$0$0 == 0x00ac
                    00AC    376 _IEN0_4	=	0x00ac
                    00AB    377 G$IEN0_3$0$0 == 0x00ab
                    00AB    378 _IEN0_3	=	0x00ab
                    00AA    379 G$IEN0_2$0$0 == 0x00aa
                    00AA    380 _IEN0_2	=	0x00aa
                    00A9    381 G$IEN0_1$0$0 == 0x00a9
                    00A9    382 _IEN0_1	=	0x00a9
                    00A8    383 G$IEN0_0$0$0 == 0x00a8
                    00A8    384 _IEN0_0	=	0x00a8
                    00EA    385 G$IEN1_2$0$0 == 0x00ea
                    00EA    386 _IEN1_2	=	0x00ea
                    00E9    387 G$IEN1_1$0$0 == 0x00e9
                    00E9    388 _IEN1_1	=	0x00e9
                    00E8    389 G$IEN1_0$0$0 == 0x00e8
                    00E8    390 _IEN1_0	=	0x00e8
                    00FE    391 G$IP1_6$0$0 == 0x00fe
                    00FE    392 _IP1_6	=	0x00fe
                    00FA    393 G$IP1_2$0$0 == 0x00fa
                    00FA    394 _IP1_2	=	0x00fa
                    00F9    395 G$IP1_1$0$0 == 0x00f9
                    00F9    396 _IP1_1	=	0x00f9
                    00F8    397 G$IP1_0$0$0 == 0x00f8
                    00F8    398 _IP1_0	=	0x00f8
                    00BE    399 G$IP0_6$0$0 == 0x00be
                    00BE    400 _IP0_6	=	0x00be
                    00BD    401 G$IP0_5$0$0 == 0x00bd
                    00BD    402 _IP0_5	=	0x00bd
                    00BC    403 G$IP0_4$0$0 == 0x00bc
                    00BC    404 _IP0_4	=	0x00bc
                    00BB    405 G$IP0_3$0$0 == 0x00bb
                    00BB    406 _IP0_3	=	0x00bb
                    00BA    407 G$IP0_2$0$0 == 0x00ba
                    00BA    408 _IP0_2	=	0x00ba
                    00B9    409 G$IP0_1$0$0 == 0x00b9
                    00B9    410 _IP0_1	=	0x00b9
                    00B8    411 G$IP0_0$0$0 == 0x00b8
                    00B8    412 _IP0_0	=	0x00b8
                    0098    413 G$SCON_0$0$0 == 0x0098
                    0098    414 _SCON_0	=	0x0098
                    0099    415 G$SCON_1$0$0 == 0x0099
                    0099    416 _SCON_1	=	0x0099
                    009A    417 G$SCON_2$0$0 == 0x009a
                    009A    418 _SCON_2	=	0x009a
                    009B    419 G$SCON_3$0$0 == 0x009b
                    009B    420 _SCON_3	=	0x009b
                    009C    421 G$SCON_4$0$0 == 0x009c
                    009C    422 _SCON_4	=	0x009c
                    009D    423 G$SCON_5$0$0 == 0x009d
                    009D    424 _SCON_5	=	0x009d
                    009E    425 G$SCON_6$0$0 == 0x009e
                    009E    426 _SCON_6	=	0x009e
                    009F    427 G$SCON_7$0$0 == 0x009f
                    009F    428 _SCON_7	=	0x009f
                    00DE    429 G$I2CON_6$0$0 == 0x00de
                    00DE    430 _I2CON_6	=	0x00de
                    00DD    431 G$I2CON_5$0$0 == 0x00dd
                    00DD    432 _I2CON_5	=	0x00dd
                    00DC    433 G$I2CON_4$0$0 == 0x00dc
                    00DC    434 _I2CON_4	=	0x00dc
                    00DB    435 G$I2CON_3$0$0 == 0x00db
                    00DB    436 _I2CON_3	=	0x00db
                    00DA    437 G$I2CON_2$0$0 == 0x00da
                    00DA    438 _I2CON_2	=	0x00da
                    00D8    439 G$I2CON_0$0$0 == 0x00d8
                    00D8    440 _I2CON_0	=	0x00d8
                    0080    441 G$P0_0$0$0 == 0x0080
                    0080    442 _P0_0	=	0x0080
                    0081    443 G$P0_1$0$0 == 0x0081
                    0081    444 _P0_1	=	0x0081
                    0082    445 G$P0_2$0$0 == 0x0082
                    0082    446 _P0_2	=	0x0082
                    0083    447 G$P0_3$0$0 == 0x0083
                    0083    448 _P0_3	=	0x0083
                    0084    449 G$P0_4$0$0 == 0x0084
                    0084    450 _P0_4	=	0x0084
                    0085    451 G$P0_5$0$0 == 0x0085
                    0085    452 _P0_5	=	0x0085
                    0086    453 G$P0_6$0$0 == 0x0086
                    0086    454 _P0_6	=	0x0086
                    0087    455 G$P0_7$0$0 == 0x0087
                    0087    456 _P0_7	=	0x0087
                    0090    457 G$P1_0$0$0 == 0x0090
                    0090    458 _P1_0	=	0x0090
                    0091    459 G$P1_1$0$0 == 0x0091
                    0091    460 _P1_1	=	0x0091
                    0092    461 G$P1_2$0$0 == 0x0092
                    0092    462 _P1_2	=	0x0092
                    0093    463 G$P1_3$0$0 == 0x0093
                    0093    464 _P1_3	=	0x0093
                    0094    465 G$P1_4$0$0 == 0x0094
                    0094    466 _P1_4	=	0x0094
                    0095    467 G$P1_5$0$0 == 0x0095
                    0095    468 _P1_5	=	0x0095
                    0096    469 G$P1_6$0$0 == 0x0096
                    0096    470 _P1_6	=	0x0096
                    0097    471 G$P1_7$0$0 == 0x0097
                    0097    472 _P1_7	=	0x0097
                    00B0    473 G$P3_0$0$0 == 0x00b0
                    00B0    474 _P3_0	=	0x00b0
                    00B1    475 G$P3_1$0$0 == 0x00b1
                    00B1    476 _P3_1	=	0x00b1
                            477 ;--------------------------------------------------------
                            478 ; overlayable register banks
                            479 ;--------------------------------------------------------
                            480 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     481 	.ds 8
                            482 ;--------------------------------------------------------
                            483 ; overlayable bit register bank
                            484 ;--------------------------------------------------------
                            485 	.area BIT_BANK	(REL,OVR,DATA)
   0000                     486 bits:
   0000                     487 	.ds 1
                    8000    488 	b0 = bits[0]
                    8100    489 	b1 = bits[1]
                    8200    490 	b2 = bits[2]
                    8300    491 	b3 = bits[3]
                    8400    492 	b4 = bits[4]
                    8500    493 	b5 = bits[5]
                    8600    494 	b6 = bits[6]
                    8700    495 	b7 = bits[7]
                            496 ;--------------------------------------------------------
                            497 ; internal ram data
                            498 ;--------------------------------------------------------
                            499 	.area DSEG    (DATA)
                    0000    500 G$conh$0$0==.
   0000                     501 _conh::
   0000                     502 	.ds 1
                    0001    503 G$conl$0$0==.
   0001                     504 _conl::
   0001                     505 	.ds 1
                    0002    506 G$pcount$0$0==.
   0002                     507 _pcount::
   0002                     508 	.ds 1
                    0003    509 G$mem_length$0$0==.
   0003                     510 _mem_length::
   0003                     511 	.ds 1
                    0004    512 G$mem_adrh$0$0==.
   0004                     513 _mem_adrh::
   0004                     514 	.ds 1
                    0005    515 G$mem_adrl$0$0==.
   0005                     516 _mem_adrl::
   0005                     517 	.ds 1
                    0006    518 G$senders_pcount$0$0==.
   0006                     519 _senders_pcount::
   0006                     520 	.ds 1
                    0007    521 G$telegramm$0$0==.
   0007                     522 _telegramm::
   0007                     523 	.ds 23
                    001E    524 G$tx_buffer$0$0==.
   001E                     525 _tx_buffer::
   001E                     526 	.ds 8
                    0026    527 G$telpos$0$0==.
   0026                     528 _telpos::
   0026                     529 	.ds 1
                    0027    530 G$cs$0$0==.
   0027                     531 _cs::
   0027                     532 	.ds 1
                    0028    533 G$fbrx_byte$0$0==.
   0028                     534 _fbrx_byte::
   0028                     535 	.ds 1
                    0029    536 G$fb_pattern$0$0==.
   0029                     537 _fb_pattern::
   0029                     538 	.ds 1
                    002A    539 G$fb_state$0$0==.
   002A                     540 _fb_state::
   002A                     541 	.ds 1
                    002B    542 G$repeat_count$0$0==.
   002B                     543 _repeat_count::
   002B                     544 	.ds 1
                    0000    545 G$RAM$0$0 == 0x0000
                    0000    546 _RAM	=	0x0000
                    002C    547 G$tx_nextwrite$0$0==.
   002C                     548 _tx_nextwrite::
   002C                     549 	.ds 1
                    002D    550 G$tx_nextsend$0$0==.
   002D                     551 _tx_nextsend::
   002D                     552 	.ds 1
                    002E    553 G$status60$0$0==.
   002E                     554 _status60::
   002E                     555 	.ds 1
                    002F    556 G$connected_timeout$0$0==.
   002F                     557 _connected_timeout::
   002F                     558 	.ds 1
                            559 ;--------------------------------------------------------
                            560 ; overlayable items in internal ram 
                            561 ;--------------------------------------------------------
                            562 	.area OSEG    (OVR,DATA)
                            563 ;--------------------------------------------------------
                            564 ; indirectly addressable internal ram data
                            565 ;--------------------------------------------------------
                            566 	.area ISEG    (DATA)
                            567 ;--------------------------------------------------------
                            568 ; absolute internal ram data
                            569 ;--------------------------------------------------------
                            570 	.area IABS    (ABS,DATA)
                            571 	.area IABS    (ABS,DATA)
                            572 ;--------------------------------------------------------
                            573 ; bit data
                            574 ;--------------------------------------------------------
                            575 	.area BSEG    (BIT)
                    0000    576 G$parity_ok$0$0==.
   0000                     577 _parity_ok::
   0000                     578 	.ds 1
                    0001    579 G$interrupted$0$0==.
   0001                     580 _interrupted::
   0001                     581 	.ds 1
                    0002    582 G$fb_parity$0$0==.
   0002                     583 _fb_parity::
   0002                     584 	.ds 1
                    0003    585 G$ack$0$0==.
   0003                     586 _ack::
   0003                     587 	.ds 1
                    0004    588 G$nack$0$0==.
   0004                     589 _nack::
   0004                     590 	.ds 1
                    0005    591 G$its_me$0$0==.
   0005                     592 _its_me::
   0005                     593 	.ds 1
                    0006    594 G$tel_arrived$0$0==.
   0006                     595 _tel_arrived::
   0006                     596 	.ds 1
                    0007    597 G$tel_sent$0$0==.
   0007                     598 _tel_sent::
   0007                     599 	.ds 1
                    0008    600 G$auto_ack$0$0==.
   0008                     601 _auto_ack::
   0008                     602 	.ds 1
                    0009    603 G$fbtx_bit$0$0==.
   0009                     604 _fbtx_bit::
   0009                     605 	.ds 1
                    000A    606 G$wait_for_ack$0$0==.
   000A                     607 _wait_for_ack::
   000A                     608 	.ds 1
                    000B    609 G$send_ack$0$0==.
   000B                     610 _send_ack::
   000B                     611 	.ds 1
                    000C    612 G$send_nack$0$0==.
   000C                     613 _send_nack::
   000C                     614 	.ds 1
                    000D    615 G$connected$0$0==.
   000D                     616 _connected::
   000D                     617 	.ds 1
                    000E    618 G$inc_pcount$0$0==.
   000E                     619 _inc_pcount::
   000E                     620 	.ds 1
                    000F    621 G$telegramm_ok$0$0==.
   000F                     622 _telegramm_ok::
   000F                     623 	.ds 1
                            624 ;--------------------------------------------------------
                            625 ; paged external ram data
                            626 ;--------------------------------------------------------
                            627 	.area PSEG    (PAG,XDATA)
                            628 ;--------------------------------------------------------
                            629 ; external ram data
                            630 ;--------------------------------------------------------
                            631 	.area XSEG    (XDATA)
                            632 ;--------------------------------------------------------
                            633 ; absolute external ram data
                            634 ;--------------------------------------------------------
                            635 	.area XABS    (ABS,XDATA)
                            636 ;--------------------------------------------------------
                            637 ; external initialized ram data
                            638 ;--------------------------------------------------------
                            639 	.area XISEG   (XDATA)
                            640 	.area HOME    (CODE)
                            641 	.area GSINIT0 (CODE)
                            642 	.area GSINIT1 (CODE)
                            643 	.area GSINIT2 (CODE)
                            644 	.area GSINIT3 (CODE)
                            645 	.area GSINIT4 (CODE)
                            646 	.area GSINIT5 (CODE)
                            647 	.area GSINIT  (CODE)
                            648 	.area GSFINAL (CODE)
                            649 	.area CSEG    (CODE)
                            650 ;--------------------------------------------------------
                            651 ; global & static initialisations
                            652 ;--------------------------------------------------------
                            653 	.area HOME    (CODE)
                            654 	.area GSINIT  (CODE)
                            655 	.area GSFINAL (CODE)
                            656 	.area GSINIT  (CODE)
                            657 ;--------------------------------------------------------
                            658 ; Home
                            659 ;--------------------------------------------------------
                            660 	.area HOME    (CODE)
                            661 	.area HOME    (CODE)
                            662 ;--------------------------------------------------------
                            663 ; code
                            664 ;--------------------------------------------------------
                            665 	.area CSEG    (CODE)
                            666 ;------------------------------------------------------------
                            667 ;Allocation info for local variables in function 'X1_int'
                            668 ;------------------------------------------------------------
                    0000    669 	G$X1_int$0$0 ==.
                    0000    670 	C$fb_lpc922.c$57$0$0 ==.
                            671 ;	..\fb_lpc922.c:57: void X1_int(void) __interrupt (2)		// Flanke des Startbits laest int1 aus
                            672 ;	-----------------------------------------
                            673 ;	 function X1_int
                            674 ;	-----------------------------------------
   0000                     675 _X1_int:
                    0007    676 	ar7 = 0x07
                    0006    677 	ar6 = 0x06
                    0005    678 	ar5 = 0x05
                    0004    679 	ar4 = 0x04
                    0003    680 	ar3 = 0x03
                    0002    681 	ar2 = 0x02
                    0001    682 	ar1 = 0x01
                    0000    683 	ar0 = 0x00
   0000 C0 E0               684 	push	acc
   0002 C0 D0               685 	push	psw
                    0004    686 	C$fb_lpc922.c$60$1$1 ==.
                            687 ;	..\fb_lpc922.c:60: EX1=0;			// int1 stoppen								1 cycle = 0,27127us
   0004 C2 AA               688 	clr	_IEN0_2
                    0006    689 	C$fb_lpc922.c$61$1$1 ==.
                            690 ;	..\fb_lpc922.c:61: TR1=0;			// Timer 1 stoppen
   0006 C2 8E               691 	clr	_TCON_6
                    0008    692 	C$fb_lpc922.c$62$1$1 ==.
                            693 ;	..\fb_lpc922.c:62: TMOD=(TMOD & 0x0F) + 0x20;	// Timer 1 als 8-Bit autoreload
   0008 74 0F               694 	mov	a,#0x0F
   000A 55 89               695 	anl	a,_TMOD
   000C 24 20               696 	add	a,#0x20
   000E F5 89               697 	mov	_TMOD,a
                    0010    698 	C$fb_lpc922.c$63$1$1 ==.
                            699 ;	..\fb_lpc922.c:63: TL1=53;//108;//128;		// Timer laden so dass in state 2 bei 75Âµs abgefragt wird
   0010 75 8B 35            700 	mov	_TL1,#0x35
                    0013    701 	C$fb_lpc922.c$64$1$1 ==.
                            702 ;	..\fb_lpc922.c:64: TH1=128;//128;			// autoreload auf 35Âµs setzen (gilt fuer sprung von 2 auf 3)
   0013 75 8D 80            703 	mov	_TH1,#0x80
                    0016    704 	C$fb_lpc922.c$65$1$1 ==.
                            705 ;	..\fb_lpc922.c:65: TF1=0;			// Timer1-flag loeschen						1 cycle
   0016 C2 8F               706 	clr	_TCON_7
                    0018    707 	C$fb_lpc922.c$66$1$1 ==.
                            708 ;	..\fb_lpc922.c:66: TR1=1;			// Timer1 starten							1 cycle
   0018 D2 8E               709 	setb	_TCON_6
                    001A    710 	C$fb_lpc922.c$67$1$1 ==.
                            711 ;	..\fb_lpc922.c:67: ET1=1;			// Timer1-int aktiv							1 cycle
   001A D2 AB               712 	setb	_IEN0_3
                    001C    713 	C$fb_lpc922.c$68$1$1 ==.
                            714 ;	..\fb_lpc922.c:68: fb_state=2;		// naechster state
   001C 75*2A 02            715 	mov	_fb_state,#0x02
                    001F    716 	C$fb_lpc922.c$69$1$1 ==.
                            717 ;	..\fb_lpc922.c:69: fb_parity=0;	// Parity Bit loeschen
   001F C2*02               718 	clr	_fb_parity
                    0021    719 	C$fb_lpc922.c$70$1$1 ==.
                            720 ;	..\fb_lpc922.c:70: parity_ok=1;	// wird bei Fehler geloescht
   0021 D2*00               721 	setb	_parity_ok
                    0023    722 	C$fb_lpc922.c$71$1$1 ==.
                            723 ;	..\fb_lpc922.c:71: fb_pattern=0;
   0023 75*29 00            724 	mov	_fb_pattern,#0x00
                    0026    725 	C$fb_lpc922.c$72$1$1 ==.
                            726 ;	..\fb_lpc922.c:72: fbrx_byte=0;
   0026 75*28 00            727 	mov	_fbrx_byte,#0x00
                    0029    728 	C$fb_lpc922.c$73$1$1 ==.
                            729 ;	..\fb_lpc922.c:73: interrupted=1;	// signalisiert app, dass unterbrochen wurde
   0029 D2*01               730 	setb	_interrupted
   002B D0 D0               731 	pop	psw
   002D D0 E0               732 	pop	acc
                    002F    733 	C$fb_lpc922.c$74$1$1 ==.
                    002F    734 	XG$X1_int$0$0 ==.
   002F 32                  735 	reti
                            736 ;	eliminated unneeded mov psw,# (no regs used in bank)
                            737 ;	eliminated unneeded push/pop dpl
                            738 ;	eliminated unneeded push/pop dph
                            739 ;	eliminated unneeded push/pop b
                            740 ;------------------------------------------------------------
                            741 ;Allocation info for local variables in function 'T1_int'
                            742 ;------------------------------------------------------------
                            743 ;fbrx_bit                  Allocated to registers b0 
                            744 ;send_byte                 Allocated to registers r7 
                            745 ;objno                     Allocated to registers r7 
                            746 ;build_ok                  Allocated to registers b0 
                            747 ;objvalue                  Allocated to stack - _bp +1
                            748 ;gapos                     Allocated to registers r5 r6 
                            749 ;objtype                   Allocated to registers r6 
                            750 ;n                         Allocated to registers r4 
                            751 ;length                    Allocated to registers r6 
                            752 ;asspos                    Allocated to registers r4 
                            753 ;type                      Allocated to registers b2 
                            754 ;repeatflag                Allocated to registers b1 
                            755 ;------------------------------------------------------------
                    0030    756 	G$T1_int$0$0 ==.
                    0030    757 	C$fb_lpc922.c$78$1$1 ==.
                            758 ;	..\fb_lpc922.c:78: void T1_int(void) __interrupt (3) 	// Timer 1 Interrupt
                            759 ;	-----------------------------------------
                            760 ;	 function T1_int
                            761 ;	-----------------------------------------
   0030                     762 _T1_int:
   0030 C0*00               763 	push	bits
   0032 C0 E0               764 	push	acc
   0034 C0 F0               765 	push	b
   0036 C0 82               766 	push	dpl
   0038 C0 83               767 	push	dph
   003A C0 07               768 	push	(0+7)
   003C C0 06               769 	push	(0+6)
   003E C0 05               770 	push	(0+5)
   0040 C0 04               771 	push	(0+4)
   0042 C0 03               772 	push	(0+3)
   0044 C0 02               773 	push	(0+2)
   0046 C0 01               774 	push	(0+1)
   0048 C0 00               775 	push	(0+0)
   004A C0 D0               776 	push	psw
   004C 75 D0 00            777 	mov	psw,#0x00
   004F C0*00               778 	push	_bp
   0051 E5 81               779 	mov	a,sp
   0053 F5*00               780 	mov	_bp,a
   0055 24 04               781 	add	a,#0x04
   0057 F5 81               782 	mov	sp,a
                    0059    783 	C$fb_lpc922.c$84$1$1 ==.
                            784 ;	..\fb_lpc922.c:84: switch (fb_state){
   0059 E5*2A               785 	mov	a,_fb_state
   005B FF                  786 	mov	r7,a
   005C 24 F1               787 	add	a,#0xff - 0x0E
   005E 50 03               788 	jnc	00331$
   0060 02s05rEB            789 	ljmp	00254$
   0063                     790 00331$:
   0063 EF                  791 	mov	a,r7
   0064 2F                  792 	add	a,r7
   0065 2F                  793 	add	a,r7
   0066 90s00r6A            794 	mov	dptr,#00332$
   0069 73                  795 	jmp	@a+dptr
   006A                     796 00332$:
   006A 02s00r97            797 	ljmp	00101$
   006D 02s05rEB            798 	ljmp	00254$
   0070 02s03r41            799 	ljmp	00150$
   0073 02s04r0B            800 	ljmp	00187$
   0076 02s04r14            801 	ljmp	00188$
   0079 02s04rA3            802 	ljmp	00209$
   007C 02s05rEB            803 	ljmp	00254$
   007F 02s05rEB            804 	ljmp	00254$
   0082 02s05rEB            805 	ljmp	00254$
   0085 02s04rD4            806 	ljmp	00216$
   0088 02s04rEB            807 	ljmp	00217$
   008B 02s05r53            808 	ljmp	00238$
   008E 02s05rEB            809 	ljmp	00254$
   0091 02s05r7C            810 	ljmp	00245$
   0094 02s05rD4            811 	ljmp	00253$
                    0097    812 	C$fb_lpc922.c$88$2$2 ==.
                            813 ;	..\fb_lpc922.c:88: case 0:
   0097                     814 00101$:
                    0097    815 	C$fb_lpc922.c$97$2$2 ==.
                            816 ;	..\fb_lpc922.c:97: if(tx_nextsend != tx_nextwrite) { 			// wenn zu sendendes Objekt vorhanden
   0097 E5*2C               817 	mov	a,_tx_nextwrite
   0099 B5*2D 03            818 	cjne	a,_tx_nextsend,00333$
   009C 02s03r3A            819 	ljmp	00148$
   009F                     820 00333$:
                    009F    821 	C$fb_lpc922.c$101$3$3 ==.
                            822 ;	..\fb_lpc922.c:101: unsigned char objno=tx_buffer[tx_nextsend];
   009F E5*2D               823 	mov	a,_tx_nextsend
   00A1 24r1E               824 	add	a,#_tx_buffer
   00A3 F9                  825 	mov	r1,a
   00A4 87 07               826 	mov	ar7,@r1
                    00A6    827 	C$fb_lpc922.c$102$3$3 ==.
                            828 ;	..\fb_lpc922.c:102: __bit build_ok=0;
   00A6 C2*00               829 	clr	b0
                    00A8    830 	C$fb_lpc922.c$104$3$3 ==.
                            831 ;	..\fb_lpc922.c:104: unsigned int gapos=0xFE;
   00A8 7D FE               832 	mov	r5,#0xFE
   00AA 7E 00               833 	mov	r6,#0x00
                    00AC    834 	C$fb_lpc922.c$109$3$3 ==.
                            835 ;	..\fb_lpc922.c:109: repeatflag=objno&0x20;
   00AC EF                  836 	mov	a,r7
   00AD A2 E5               837 	mov	c,acc[5]
   00AF E4                  838 	clr	a
   00B0 33                  839 	rlc	a
   00B1 24 FF               840 	add	a,#0xff
   00B3 92*00               841 	mov	b1,c
                    00B5    842 	C$fb_lpc922.c$111$3$3 ==.
                            843 ;	..\fb_lpc922.c:111: telegramm[1]=eeprom[ADDRTAB+1];
   00B5 90 1D 17            844 	mov	dptr,#(_eeprom + 0x0017)
   00B8 E4                  845 	clr	a
   00B9 93                  846 	movc	a,@a+dptr
   00BA FC                  847 	mov	r4,a
   00BB 8C*08               848 	mov	(_telegramm + 0x0001),r4
                    00BD    849 	C$fb_lpc922.c$112$3$3 ==.
                            850 ;	..\fb_lpc922.c:112: telegramm[2]=eeprom[ADDRTAB+2];
   00BD 90 1D 18            851 	mov	dptr,#(_eeprom + 0x0018)
   00C0 E4                  852 	clr	a
   00C1 93                  853 	movc	a,@a+dptr
   00C2 FC                  854 	mov	r4,a
   00C3 8C*09               855 	mov	(_telegramm + 0x0002),r4
                    00C5    856 	C$fb_lpc922.c$114$3$3 ==.
                            857 ;	..\fb_lpc922.c:114: if(objno<128) {		// Multicast
   00C5 BF 80 00            858 	cjne	r7,#0x80,00334$
   00C8                     859 00334$:
   00C8 40 03               860 	jc	00335$
   00CA 02s01rF7            861 	ljmp	00133$
   00CD                     862 00335$:
                    00CD    863 	C$fb_lpc922.c$115$1$1 ==.
                            864 ;	..\fb_lpc922.c:115: type=(objno&0x40);	// bei Multicast ist type0 normal und type1 response telegramm
   00CD C0 05               865 	push	ar5
   00CF C0 06               866 	push	ar6
   00D1 EF                  867 	mov	a,r7
   00D2 23                  868 	rl	a
   00D3 23                  869 	rl	a
   00D4 54 01               870 	anl	a,#0x01
   00D6 24 FF               871 	add	a,#0xff
   00D8 92*00               872 	mov	b2,c
                    00DA    873 	C$fb_lpc922.c$116$4$4 ==.
                            874 ;	..\fb_lpc922.c:116: objno&=0x1F;
   00DA 53 07 1F            875 	anl	ar7,#0x1F
                    00DD    876 	C$fb_lpc922.c$118$4$4 ==.
                            877 ;	..\fb_lpc922.c:118: objvalue=read_obj_value(objno);		// Objektwert lesen
   00DD 8F 82               878 	mov	dpl,r7
   00DF C0 07               879 	push	ar7
   00E1 C0 05               880 	push	ar5
   00E3 C0*00               881 	push	bits
   00E5 12s00r00            882 	lcall	_read_obj_value
   00E8 AA 82               883 	mov	r2,dpl
   00EA AB 83               884 	mov	r3,dph
   00EC AC F0               885 	mov	r4,b
   00EE FE                  886 	mov	r6,a
   00EF D0*00               887 	pop	bits
   00F1 D0 05               888 	pop	ar5
   00F3 D0 07               889 	pop	ar7
   00F5 A8*00               890 	mov	r0,_bp
   00F7 08                  891 	inc	r0
   00F8 A6 02               892 	mov	@r0,ar2
   00FA 08                  893 	inc	r0
   00FB A6 03               894 	mov	@r0,ar3
   00FD 08                  895 	inc	r0
   00FE A6 04               896 	mov	@r0,ar4
   0100 08                  897 	inc	r0
   0101 A6 06               898 	mov	@r0,ar6
                    0103    899 	C$fb_lpc922.c$121$4$4 ==.
                            900 ;	..\fb_lpc922.c:121: asspos=eeprom[ASSOCTABPTR]+1+2*objno;
   0103 90 1D 11            901 	mov	dptr,#(_eeprom + 0x0011)
   0106 E4                  902 	clr	a
   0107 93                  903 	movc	a,@a+dptr
   0108 FE                  904 	mov	r6,a
   0109 0E                  905 	inc	r6
   010A EF                  906 	mov	a,r7
   010B 2F                  907 	add	a,r7
   010C FD                  908 	mov	r5,a
   010D 2E                  909 	add	a,r6
                    010E    910 	C$fb_lpc922.c$122$4$4 ==.
                            911 ;	..\fb_lpc922.c:122: if(eeprom[asspos+1]==objno) gapos=eeprom[asspos];
   010E FC                  912 	mov	r4,a
   010F 04                  913 	inc	a
   0110 90 1D 00            914 	mov	dptr,#_eeprom
   0113 93                  915 	movc	a,@a+dptr
   0114 FE                  916 	mov	r6,a
   0115 B5 07 02            917 	cjne	a,ar7,00336$
   0118 80 06               918 	sjmp	00337$
   011A                     919 00336$:
   011A D0 06               920 	pop	ar6
   011C D0 05               921 	pop	ar5
   011E 80 0F               922 	sjmp	00103$
   0120                     923 00337$:
   0120 D0 06               924 	pop	ar6
   0122 D0 05               925 	pop	ar5
   0124 8C 82               926 	mov	dpl,r4
   0126 75 83 1D            927 	mov	dph,#(_eeprom >> 8)
   0129 E4                  928 	clr	a
   012A 93                  929 	movc	a,@a+dptr
   012B FC                  930 	mov	r4,a
   012C FD                  931 	mov	r5,a
   012D 7E 00               932 	mov	r6,#0x00
   012F                     933 00103$:
                    012F    934 	C$fb_lpc922.c$124$4$4 ==.
                            935 ;	..\fb_lpc922.c:124: if (gapos!=0xFE) // wenn keine Gruppenadresse hinterlegt nix tun
   012F BD FE 06            936 	cjne	r5,#0xFE,00338$
   0132 BE 00 03            937 	cjne	r6,#0x00,00338$
   0135 02s02rC2            938 	ljmp	00134$
   0138                     939 00338$:
                    0138    940 	C$fb_lpc922.c$126$5$5 ==.
                            941 ;	..\fb_lpc922.c:126: n=eeprom[COMMSTABPTR]+objno+objno+objno+3; //Adresse obj flags für Priorität holen
   0138 90 1D 12            942 	mov	dptr,#(_eeprom + 0x0012)
   013B E4                  943 	clr	a
   013C 93                  944 	movc	a,@a+dptr
   013D 2F                  945 	add	a,r7
   013E 2F                  946 	add	a,r7
   013F 2F                  947 	add	a,r7
   0140 FC                  948 	mov	r4,a
   0141 0C                  949 	inc	r4
   0142 0C                  950 	inc	r4
   0143 0C                  951 	inc	r4
                    0144    952 	C$fb_lpc922.c$128$5$5 ==.
                            953 ;	..\fb_lpc922.c:128: telegramm[0]=priotable[eeprom[n]&0x03];// die prio ins erste Byte des tele einfügen
   0144 8C 82               954 	mov	dpl,r4
   0146 75 83 1D            955 	mov	dph,#(_eeprom >> 8)
   0149 E4                  956 	clr	a
   014A 93                  957 	movc	a,@a+dptr
   014B FB                  958 	mov	r3,a
   014C 74 03               959 	mov	a,#0x03
   014E 5B                  960 	anl	a,r3
   014F 90s00r00            961 	mov	dptr,#_priotable
   0152 93                  962 	movc	a,@a+dptr
   0153 FB                  963 	mov	r3,a
   0154 8B*07               964 	mov	_telegramm,r3
                    0156    965 	C$fb_lpc922.c$129$5$5 ==.
                            966 ;	..\fb_lpc922.c:129: telegramm[3]=eeprom[ADDRTAB+1+gapos*2];
   0156 ED                  967 	mov	a,r5
   0157 2D                  968 	add	a,r5
   0158 FD                  969 	mov	r5,a
   0159 24 17               970 	add	a,#0x17
   015B 90 1D 00            971 	mov	dptr,#_eeprom
   015E 93                  972 	movc	a,@a+dptr
   015F FE                  973 	mov	r6,a
   0160 8E*0A               974 	mov	(_telegramm + 0x0003),r6
                    0162    975 	C$fb_lpc922.c$130$5$5 ==.
                            976 ;	..\fb_lpc922.c:130: telegramm[4]=eeprom[ADDRTAB+2+gapos*2];
   0162 74 18               977 	mov	a,#0x18
   0164 2D                  978 	add	a,r5
   0165 90 1D 00            979 	mov	dptr,#_eeprom
   0168 93                  980 	movc	a,@a+dptr
   0169 FE                  981 	mov	r6,a
   016A 8E*0B               982 	mov	(_telegramm + 0x0004),r6
                    016C    983 	C$fb_lpc922.c$131$5$5 ==.
                            984 ;	..\fb_lpc922.c:131: telegramm[6]=0x00;
   016C 75*0D 00            985 	mov	(_telegramm + 0x0006),#0x00
                    016F    986 	C$fb_lpc922.c$132$5$5 ==.
                            987 ;	..\fb_lpc922.c:132: if (type) telegramm[7]=0x40;		// read_value_response Telegramm (angefordert)
   016F 30*00 05            988 	jnb	b2,00105$
   0172 75*0E 40            989 	mov	(_telegramm + 0x0007),#0x40
   0175 80 03               990 	sjmp	00106$
   0177                     991 00105$:
                    0177    992 	C$fb_lpc922.c$133$5$5 ==.
                            993 ;	..\fb_lpc922.c:133: else telegramm[7]=0x80;				// write_value_request Telegramm (nicht angefordert)
   0177 75*0E 80            994 	mov	(_telegramm + 0x0007),#0x80
   017A                     995 00106$:
                    017A    996 	C$fb_lpc922.c$135$5$5 ==.
                            997 ;	..\fb_lpc922.c:135: objtype=eeprom[n+1];		// eine Adresse höher als obj flags ist objecttype
   017A EC                  998 	mov	a,r4
   017B 04                  999 	inc	a
   017C 90 1D 00           1000 	mov	dptr,#_eeprom
   017F 93                 1001 	movc	a,@a+dptr
                    0180   1002 	C$fb_lpc922.c$137$5$5 ==.
                           1003 ;	..\fb_lpc922.c:137: if(objtype>6) length=objtype-5; else length=1;
   0180 FE                 1004 	mov  r6,a
   0181 24 F9              1005 	add	a,#0xff - 0x06
   0183 50 06              1006 	jnc	00108$
   0185 EE                 1007 	mov	a,r6
   0186 24 FB              1008 	add	a,#0xFB
   0188 FE                 1009 	mov	r6,a
   0189 80 02              1010 	sjmp	00109$
   018B                    1011 00108$:
   018B 7E 01              1012 	mov	r6,#0x01
   018D                    1013 00109$:
                    018D   1014 	C$fb_lpc922.c$138$5$5 ==.
                           1015 ;	..\fb_lpc922.c:138: telegramm[5]=0xE0+length;
   018D 74 E0              1016 	mov	a,#0xE0
   018F 2E                 1017 	add	a,r6
   0190 F5*0C              1018 	mov	(_telegramm + 0x0005),a
                    0192   1019 	C$fb_lpc922.c$139$5$5 ==.
                           1020 ;	..\fb_lpc922.c:139: if (length>1) telegramm[length+6]=objvalue; else telegramm[7]+=(objvalue&0x3F);
   0192 EE                 1021 	mov	a,r6
   0193 24 FE              1022 	add	a,#0xff - 0x01
   0195 50 0F              1023 	jnc	00111$
   0197 74 06              1024 	mov	a,#0x06
   0199 2E                 1025 	add	a,r6
   019A 24r07              1026 	add	a,#_telegramm
   019C F9                 1027 	mov	r1,a
   019D A8*00              1028 	mov	r0,_bp
   019F 08                 1029 	inc	r0
   01A0 86 05              1030 	mov	ar5,@r0
   01A2 A7 05              1031 	mov	@r1,ar5
   01A4 80 10              1032 	sjmp	00112$
   01A6                    1033 00111$:
   01A6 A8*00              1034 	mov	r0,_bp
   01A8 08                 1035 	inc	r0
   01A9 74 3F              1036 	mov	a,#0x3F
   01AB 56                 1037 	anl	a,@r0
   01AC FA                 1038 	mov	r2,a
   01AD E4                 1039 	clr	a
   01AE FB                 1040 	mov	r3,a
   01AF FC                 1041 	mov	r4,a
   01B0 FD                 1042 	mov	r5,a
   01B1 EA                 1043 	mov	a,r2
   01B2 25*0E              1044 	add	a,(_telegramm + 0x0007)
   01B4 F5*0E              1045 	mov	(_telegramm + 0x0007),a
   01B6                    1046 00112$:
                    01B6   1047 	C$fb_lpc922.c$140$5$5 ==.
                           1048 ;	..\fb_lpc922.c:140: if (length>2) telegramm[length+5]=objvalue>>8;
   01B6 EE                 1049 	mov	a,r6
   01B7 24 FD              1050 	add	a,#0xff - 0x02
   01B9 50 0E              1051 	jnc	00114$
   01BB 74 05              1052 	mov	a,#0x05
   01BD 2E                 1053 	add	a,r6
   01BE 24r07              1054 	add	a,#_telegramm
   01C0 F9                 1055 	mov	r1,a
   01C1 A8*00              1056 	mov	r0,_bp
   01C3 08                 1057 	inc	r0
   01C4 08                 1058 	inc	r0
   01C5 86 05              1059 	mov	ar5,@r0
   01C7 A7 05              1060 	mov	@r1,ar5
   01C9                    1061 00114$:
                    01C9   1062 	C$fb_lpc922.c$141$5$5 ==.
                           1063 ;	..\fb_lpc922.c:141: if (length>3) telegramm[length+4]=objvalue>>16;
   01C9 EE                 1064 	mov	a,r6
   01CA 24 FC              1065 	add	a,#0xff - 0x03
   01CC 50 0F              1066 	jnc	00116$
   01CE 74 04              1067 	mov	a,#0x04
   01D0 2E                 1068 	add	a,r6
   01D1 24r07              1069 	add	a,#_telegramm
   01D3 F9                 1070 	mov	r1,a
   01D4 A8*00              1071 	mov	r0,_bp
   01D6 08                 1072 	inc	r0
   01D7 08                 1073 	inc	r0
   01D8 08                 1074 	inc	r0
   01D9 86 05              1075 	mov	ar5,@r0
   01DB A7 05              1076 	mov	@r1,ar5
   01DD                    1077 00116$:
                    01DD   1078 	C$fb_lpc922.c$142$5$5 ==.
                           1079 ;	..\fb_lpc922.c:142: if (length>4) telegramm[length+3]=objvalue>>24;
   01DD EE                 1080 	mov	a,r6
   01DE 24 FB              1081 	add	a,#0xff - 0x04
   01E0 50 10              1082 	jnc	00118$
   01E2 74 03              1083 	mov	a,#0x03
   01E4 2E                 1084 	add	a,r6
   01E5 24r07              1085 	add	a,#_telegramm
   01E7 F9                 1086 	mov	r1,a
   01E8 A8*00              1087 	mov	r0,_bp
   01EA 08                 1088 	inc	r0
   01EB 08                 1089 	inc	r0
   01EC 08                 1090 	inc	r0
   01ED 08                 1091 	inc	r0
   01EE 86 06              1092 	mov	ar6,@r0
   01F0 A7 06              1093 	mov	@r1,ar6
   01F2                    1094 00118$:
                    01F2   1095 	C$fb_lpc922.c$144$5$5 ==.
                           1096 ;	..\fb_lpc922.c:144: build_ok=1;
   01F2 D2*00              1097 	setb	b0
   01F4 02s02rC2           1098 	ljmp	00134$
   01F7                    1099 00133$:
                    01F7   1100 	C$fb_lpc922.c$148$4$6 ==.
                           1101 ;	..\fb_lpc922.c:148: telegramm[0]=0xB0;				// Control Byte
   01F7 75*07 B0           1102 	mov	_telegramm,#0xB0
                    01FA   1103 	C$fb_lpc922.c$151$4$6 ==.
                           1104 ;	..\fb_lpc922.c:151: telegramm[3]=conh;
   01FA 85*00*0A           1105 	mov	(_telegramm + 0x0003),_conh
                    01FD   1106 	C$fb_lpc922.c$152$4$6 ==.
                           1107 ;	..\fb_lpc922.c:152: telegramm[4]=conl;
   01FD 85*01*0B           1108 	mov	(_telegramm + 0x0004),_conl
                    0200   1109 	C$fb_lpc922.c$154$4$6 ==.
                           1110 ;	..\fb_lpc922.c:154: switch(objno&0x1F) {
   0200 53 07 1F           1111 	anl	ar7,#0x1F
   0203 EF                 1112 	mov	a,r7
   0204 24 FA              1113 	add	a,#0xff - 0x05
   0206 50 03              1114 	jnc	00345$
   0208 02s02rC0           1115 	ljmp	00131$
   020B                    1116 00345$:
   020B EF                 1117 	mov	a,r7
   020C 2F                 1118 	add	a,r7
   020D 2F                 1119 	add	a,r7
   020E 90s02r12           1120 	mov	dptr,#00346$
   0211 73                 1121 	jmp	@a+dptr
   0212                    1122 00346$:
   0212 02s02rC0           1123 	ljmp	00131$
   0215 02s02r24           1124 	ljmp	00121$
   0218 02s02r30           1125 	ljmp	00122$
   021B 02s02r47           1126 	ljmp	00123$
   021E 02s02r58           1127 	ljmp	00124$
   0221 02s02rB8           1128 	ljmp	00130$
                    0224   1129 	C$fb_lpc922.c$155$5$7 ==.
                           1130 ;	..\fb_lpc922.c:155: case 1:	// NCD ACK Quittierung (129) mit Paketnummer vom Sender, nicht der Eigenen!!!
   0224                    1131 00121$:
                    0224   1132 	C$fb_lpc922.c$156$5$7 ==.
                           1133 ;	..\fb_lpc922.c:156: telegramm[5]=0x60;					// DRL
   0224 75*0C 60           1134 	mov	(_telegramm + 0x0005),#0x60
                    0227   1135 	C$fb_lpc922.c$157$5$7 ==.
                           1136 ;	..\fb_lpc922.c:157: telegramm[6]=senders_pcount + 0xC2;	// Bit 6,7(TCPI = 11 NCD Quittierung) und Bit 0,1 (10=ACK)
   0227 74 C2              1137 	mov	a,#0xC2
   0229 25*06              1138 	add	a,_senders_pcount
   022B F5*0D              1139 	mov	(_telegramm + 0x0006),a
                    022D   1140 	C$fb_lpc922.c$158$5$7 ==.
                           1141 ;	..\fb_lpc922.c:158: break;
   022D 02s02rC0           1142 	ljmp	00131$
                    0230   1143 	C$fb_lpc922.c$159$5$7 ==.
                           1144 ;	..\fb_lpc922.c:159: case 2:	// read mask response (130)
   0230                    1145 00122$:
                    0230   1146 	C$fb_lpc922.c$160$5$7 ==.
                           1147 ;	..\fb_lpc922.c:160: telegramm[5]=0x63;					// DRL
   0230 75*0C 63           1148 	mov	(_telegramm + 0x0005),#0x63
                    0233   1149 	C$fb_lpc922.c$161$5$7 ==.
                           1150 ;	..\fb_lpc922.c:161: telegramm[6]=pcount + 0x43;			// bei response immer eigene Paketnummer senden
   0233 74 43              1151 	mov	a,#0x43
   0235 25*02              1152 	add	a,_pcount
   0237 F5*0D              1153 	mov	(_telegramm + 0x0006),a
                    0239   1154 	C$fb_lpc922.c$162$5$7 ==.
                           1155 ;	..\fb_lpc922.c:162: telegramm[7]=0x40;
   0239 75*0E 40           1156 	mov	(_telegramm + 0x0007),#0x40
                    023C   1157 	C$fb_lpc922.c$163$5$7 ==.
                           1158 ;	..\fb_lpc922.c:163: telegramm[8]=0x00;                  // Medium Type 0 (TP1), FW Type 0
   023C 75*0F 00           1159 	mov	(_telegramm + 0x0008),#0x00
                    023F   1160 	C$fb_lpc922.c$164$5$7 ==.
                           1161 ;	..\fb_lpc922.c:164: telegramm[9]=0x12;					// FW Version 1.2 (Maskenversion 1.2 = BCU1)
   023F 75*10 12           1162 	mov	(_telegramm + 0x0009),#0x12
                    0242   1163 	C$fb_lpc922.c$165$5$7 ==.
                           1164 ;	..\fb_lpc922.c:165: inc_pcount=1;
   0242 D2*0E              1165 	setb	_inc_pcount
                    0244   1166 	C$fb_lpc922.c$166$5$7 ==.
                           1167 ;	..\fb_lpc922.c:166: break;
   0244 02s02rC0           1168 	ljmp	00131$
                    0247   1169 	C$fb_lpc922.c$167$5$7 ==.
                           1170 ;	..\fb_lpc922.c:167: case 3:	// read PA response (131)
   0247                    1171 00123$:
                    0247   1172 	C$fb_lpc922.c$168$5$7 ==.
                           1173 ;	..\fb_lpc922.c:168: telegramm[3]=0x00;			// Zieladresse auf 0000, da Broadcast
   0247 75*0A 00           1174 	mov	(_telegramm + 0x0003),#0x00
                    024A   1175 	C$fb_lpc922.c$169$5$7 ==.
                           1176 ;	..\fb_lpc922.c:169: telegramm[4]=0x00;
   024A 75*0B 00           1177 	mov	(_telegramm + 0x0004),#0x00
                    024D   1178 	C$fb_lpc922.c$170$5$7 ==.
                           1179 ;	..\fb_lpc922.c:170: telegramm[5]=0xE1;			// DRL
   024D 75*0C E1           1180 	mov	(_telegramm + 0x0005),#0xE1
                    0250   1181 	C$fb_lpc922.c$171$5$7 ==.
                           1182 ;	..\fb_lpc922.c:171: telegramm[6]=0x01;
   0250 75*0D 01           1183 	mov	(_telegramm + 0x0006),#0x01
                    0253   1184 	C$fb_lpc922.c$172$5$7 ==.
                           1185 ;	..\fb_lpc922.c:172: telegramm[7]=0x40;
   0253 75*0E 40           1186 	mov	(_telegramm + 0x0007),#0x40
                    0256   1187 	C$fb_lpc922.c$173$5$7 ==.
                           1188 ;	..\fb_lpc922.c:173: break;
                    0256   1189 	C$fb_lpc922.c$174$5$7 ==.
                           1190 ;	..\fb_lpc922.c:174: case 4:	// memory_read_response (132)
   0256 80 68              1191 	sjmp	00131$
   0258                    1192 00124$:
                    0258   1193 	C$fb_lpc922.c$175$1$1 ==.
                           1194 ;	..\fb_lpc922.c:175: for(n=0;n<mem_length;n++) {
   0258 7F 00              1195 	mov	r7,#0x00
   025A                    1196 00255$:
   025A C3                 1197 	clr	c
   025B EF                 1198 	mov	a,r7
   025C 95*03              1199 	subb	a,_mem_length
   025E 50 3C              1200 	jnc	00258$
                    0260   1201 	C$fb_lpc922.c$176$6$8 ==.
                           1202 ;	..\fb_lpc922.c:176: if (mem_adrh==0) {
   0260 E5*04              1203 	mov	a,_mem_adrh
   0262 70 26              1204 	jnz	00128$
                    0264   1205 	C$fb_lpc922.c$177$7$9 ==.
                           1206 ;	..\fb_lpc922.c:177: telegramm[n+10]=0;//userram[mem_adrl+n];
   0264 74 0A              1207 	mov	a,#0x0A
   0266 2F                 1208 	add	a,r7
   0267 24r07              1209 	add	a,#_telegramm
   0269 F8                 1210 	mov	r0,a
   026A 76 00              1211 	mov	@r0,#0x00
                    026C   1212 	C$fb_lpc922.c$178$7$9 ==.
                           1213 ;	..\fb_lpc922.c:178: if(mem_adrl+n==0x60) telegramm[n+10]=status60;	// ausser bei 0x60
   026C AD*05              1214 	mov	r5,_mem_adrl
   026E 7E 00              1215 	mov	r6,#0x00
   0270 8F 03              1216 	mov	ar3,r7
   0272 7C 00              1217 	mov	r4,#0x00
   0274 EB                 1218 	mov	a,r3
   0275 2D                 1219 	add	a,r5
   0276 FD                 1220 	mov	r5,a
   0277 EC                 1221 	mov	a,r4
   0278 3E                 1222 	addc	a,r6
   0279 FE                 1223 	mov	r6,a
   027A BD 60 1C           1224 	cjne	r5,#0x60,00257$
   027D BE 00 19           1225 	cjne	r6,#0x00,00257$
   0280 74 0A              1226 	mov	a,#0x0A
   0282 2F                 1227 	add	a,r7
   0283 24r07              1228 	add	a,#_telegramm
   0285 F8                 1229 	mov	r0,a
   0286 A6*2E              1230 	mov	@r0,_status60
   0288 80 0F              1231 	sjmp	00257$
   028A                    1232 00128$:
                    028A   1233 	C$fb_lpc922.c$180$6$8 ==.
                           1234 ;	..\fb_lpc922.c:180: else telegramm[n+10]=eeprom[mem_adrl+n];//else if (mem_adrh==1)
   028A 74 0A              1235 	mov	a,#0x0A
   028C 2F                 1236 	add	a,r7
   028D 24r07              1237 	add	a,#_telegramm
   028F F9                 1238 	mov	r1,a
   0290 EF                 1239 	mov	a,r7
   0291 25*05              1240 	add	a,_mem_adrl
   0293 90 1D 00           1241 	mov	dptr,#_eeprom
   0296 93                 1242 	movc	a,@a+dptr
   0297 FE                 1243 	mov	r6,a
   0298 F7                 1244 	mov	@r1,a
   0299                    1245 00257$:
                    0299   1246 	C$fb_lpc922.c$175$5$7 ==.
                           1247 ;	..\fb_lpc922.c:175: for(n=0;n<mem_length;n++) {
   0299 0F                 1248 	inc	r7
   029A 80 BE              1249 	sjmp	00255$
   029C                    1250 00258$:
                    029C   1251 	C$fb_lpc922.c$183$5$7 ==.
                           1252 ;	..\fb_lpc922.c:183: telegramm[5]=mem_length+0x63;		// DRL (Anzahl Bytes + 3)
   029C 74 63              1253 	mov	a,#0x63
   029E 25*03              1254 	add	a,_mem_length
   02A0 F5*0C              1255 	mov	(_telegramm + 0x0005),a
                    02A2   1256 	C$fb_lpc922.c$184$5$7 ==.
                           1257 ;	..\fb_lpc922.c:184: telegramm[6]=pcount|0x42;			// eigener Paketzaehler, TCPI und ersten beiden Befehlsbits
   02A2 74 42              1258 	mov	a,#0x42
   02A4 45*02              1259 	orl	a,_pcount
   02A6 F5*0D              1260 	mov	(_telegramm + 0x0006),a
                    02A8   1261 	C$fb_lpc922.c$185$5$7 ==.
                           1262 ;	..\fb_lpc922.c:185: telegramm[7]=mem_length|0x40;		// letzten 2 Befehlsbits
   02A8 74 40              1263 	mov	a,#0x40
   02AA 45*03              1264 	orl	a,_mem_length
   02AC F5*0E              1265 	mov	(_telegramm + 0x0007),a
                    02AE   1266 	C$fb_lpc922.c$186$5$7 ==.
                           1267 ;	..\fb_lpc922.c:186: telegramm[8]=mem_adrh;
   02AE 85*04*0F           1268 	mov	(_telegramm + 0x0008),_mem_adrh
                    02B1   1269 	C$fb_lpc922.c$187$5$7 ==.
                           1270 ;	..\fb_lpc922.c:187: telegramm[9]=mem_adrl;
   02B1 85*05*10           1271 	mov	(_telegramm + 0x0009),_mem_adrl
                    02B4   1272 	C$fb_lpc922.c$188$5$7 ==.
                           1273 ;	..\fb_lpc922.c:188: inc_pcount=1;
   02B4 D2*0E              1274 	setb	_inc_pcount
                    02B6   1275 	C$fb_lpc922.c$189$5$7 ==.
                           1276 ;	..\fb_lpc922.c:189: break;
                    02B6   1277 	C$fb_lpc922.c$190$5$7 ==.
                           1278 ;	..\fb_lpc922.c:190: case 5:	// T-disconnect (133)
   02B6 80 08              1279 	sjmp	00131$
   02B8                    1280 00130$:
                    02B8   1281 	C$fb_lpc922.c$191$5$7 ==.
                           1282 ;	..\fb_lpc922.c:191: telegramm[5]=0x60;
   02B8 75*0C 60           1283 	mov	(_telegramm + 0x0005),#0x60
                    02BB   1284 	C$fb_lpc922.c$192$5$7 ==.
                           1285 ;	..\fb_lpc922.c:192: telegramm[6]=0x81;
   02BB 75*0D 81           1286 	mov	(_telegramm + 0x0006),#0x81
                    02BE   1287 	C$fb_lpc922.c$193$5$7 ==.
                           1288 ;	..\fb_lpc922.c:193: connected=0;
   02BE C2*0D              1289 	clr	_connected
                    02C0   1290 	C$fb_lpc922.c$211$4$6 ==.
                           1291 ;	..\fb_lpc922.c:211: }
   02C0                    1292 00131$:
                    02C0   1293 	C$fb_lpc922.c$212$4$6 ==.
                           1294 ;	..\fb_lpc922.c:212: build_ok=1;
   02C0 D2*00              1295 	setb	b0
   02C2                    1296 00134$:
                    02C2   1297 	C$fb_lpc922.c$214$3$3 ==.
                           1298 ;	..\fb_lpc922.c:214: if(repeatflag) telegramm[0]&=0xDF;		// Wiederholungsbit loeschen fuer Wiederholtelegramm
   02C2 30*00 06           1299 	jnb	b1,00136$
   02C5 74 DF              1300 	mov	a,#0xDF
   02C7 55*07              1301 	anl	a,_telegramm
   02C9 F5*07              1302 	mov	_telegramm,a
   02CB                    1303 00136$:
                    02CB   1304 	C$fb_lpc922.c$217$3$3 ==.
                           1305 ;	..\fb_lpc922.c:217: if(build_ok){//(build_tel(tx_buffer[tx_nextsend])) {	// wenn Telegramm gebildet werden konnte
   02CB 30*00 64           1306 	jnb	b0,00145$
                    02CE   1307 	C$fb_lpc922.c$218$4$10 ==.
                           1308 ;	..\fb_lpc922.c:218: EX1=0; 				//Um zu vermeiden dass man in die Abfrage hinein-empfaengt
   02CE C2 AA              1309 	clr	_IEN0_2
                    02D0   1310 	C$fb_lpc922.c$219$4$10 ==.
                           1311 ;	..\fb_lpc922.c:219: if(!fb_state) { 	//nur senden wenn vorher kein rx_intit durch ext int kam
   02D0 E5*2A              1312 	mov	a,_fb_state
   02D2 70 59              1313 	jnz	00143$
                    02D4   1314 	C$fb_lpc922.c$220$5$11 ==.
                           1315 ;	..\fb_lpc922.c:220: if(!repeatflag) {	// wenn erstmaliges Senden des Objektes
   02D4 20*00 0E           1316 	jb	b1,00138$
                    02D7   1317 	C$fb_lpc922.c$221$6$12 ==.
                           1318 ;	..\fb_lpc922.c:221: tx_buffer[tx_nextsend]|=0x20;		// Bit fuer "wird gerade gesendet" (war vorher im state 0 )
   02D7 E5*2D              1319 	mov	a,_tx_nextsend
   02D9 24r1E              1320 	add	a,#_tx_buffer
   02DB F9                 1321 	mov	r1,a
   02DC 87 07              1322 	mov	ar7,@r1
   02DE 74 20              1323 	mov	a,#0x20
   02E0 4F                 1324 	orl	a,r7
   02E1 F7                 1325 	mov	@r1,a
                    02E2   1326 	C$fb_lpc922.c$222$6$12 ==.
                           1327 ;	..\fb_lpc922.c:222: repeat_count=0;						// Wiederholungszaehler fuer nicht geackte Telegramme
   02E2 75*2B 00           1328 	mov	_repeat_count,#0x00
   02E5                    1329 00138$:
                    02E5   1330 	C$fb_lpc922.c$224$5$11 ==.
                           1331 ;	..\fb_lpc922.c:224: if (repeat_count<4) init_tx((__bit)(telegramm[0]&0x01)&& !repeat_count);// Senden starten (eventuell mit 3 Bit verzögerung)
   02E5 74 FC              1332 	mov	a,#0x100 - 0x04
   02E7 25*2B              1333 	add	a,_repeat_count
   02E9 40 27              1334 	jc	00140$
   02EB E5*07              1335 	mov	a,_telegramm
   02ED 54 01              1336 	anl	a,#0x01
   02EF FF                 1337 	mov	r7,a
   02F0 24 FF              1338 	add	a,#0xff
   02F2 92*00              1339 	mov	b0,c
   02F4 50 0A              1340 	jnc	00261$
   02F6 E5*2B              1341 	mov	a,_repeat_count
   02F8 B4 01 00           1342 	cjne	a,#0x01,00357$
   02FB                    1343 00357$:
   02FB E4                 1344 	clr	a
   02FC 33                 1345 	rlc	a
   02FD FF                 1346 	mov	r7,a
   02FE 70 04              1347 	jnz	00262$
   0300                    1348 00261$:
   0300 C2*00              1349 	clr	b0
   0302 80 02              1350 	sjmp	00263$
   0304                    1351 00262$:
   0304 D2*00              1352 	setb	b0
   0306                    1353 00263$:
   0306 A2*00              1354 	mov	c,b0
   0308 92 F0              1355 	mov	b[0],c
   030A 85 F0*00           1356 	mov	bits,b
   030D 12s06r45           1357 	lcall	_init_tx
   0310 80 1B              1358 	sjmp	00143$
   0312                    1359 00140$:
                    0312   1360 	C$fb_lpc922.c$226$6$13 ==.
                           1361 ;	..\fb_lpc922.c:226: tx_nextsend++;
   0312 05*2D              1362 	inc	_tx_nextsend
                    0314   1363 	C$fb_lpc922.c$227$6$13 ==.
                           1364 ;	..\fb_lpc922.c:227: tx_nextsend&=0x07;
   0314 53*2D 07           1365 	anl	_tx_nextsend,#0x07
                    0317   1366 	C$fb_lpc922.c$228$6$13 ==.
                           1367 ;	..\fb_lpc922.c:228: wait_for_ack=0;
   0317 C2*0A              1368 	clr	_wait_for_ack
                    0319   1369 	C$fb_lpc922.c$229$6$13 ==.
                           1370 ;	..\fb_lpc922.c:229: inc_pcount=0;
   0319 C2*0E              1371 	clr	_inc_pcount
                    031B   1372 	C$fb_lpc922.c$230$6$13 ==.
                           1373 ;	..\fb_lpc922.c:230: init_rx(0);
   031B C2 F0              1374 	clr	b[0]
   031D 85 F0*00           1375 	mov	bits,b
   0320 12s06r0F           1376 	lcall	_init_rx
                    0323   1377 	C$fb_lpc922.c$231$6$13 ==.
                           1378 ;	..\fb_lpc922.c:231: TR1=0;		// hier nicht noch einmal die ganze busfree Zeit warten
   0323 C2 8E              1379 	clr	_TCON_6
                    0325   1380 	C$fb_lpc922.c$232$6$13 ==.
                           1381 ;	..\fb_lpc922.c:232: TH1=0xF0;
   0325 75 8D F0           1382 	mov	_TH1,#0xF0
                    0328   1383 	C$fb_lpc922.c$233$6$13 ==.
                           1384 ;	..\fb_lpc922.c:233: TL1=0x00;
   0328 75 8B 00           1385 	mov	_TL1,#0x00
                    032B   1386 	C$fb_lpc922.c$234$6$13 ==.
                           1387 ;	..\fb_lpc922.c:234: TR1=1;
   032B D2 8E              1388 	setb	_TCON_6
   032D                    1389 00143$:
                    032D   1390 	C$fb_lpc922.c$237$4$10 ==.
                           1391 ;	..\fb_lpc922.c:237: EX1=1;	// ext1 int einschalten falls Empfang...
   032D D2 AA              1392 	setb	_IEN0_2
   032F 02s05rEB           1393 	ljmp	00254$
   0332                    1394 00145$:
                    0332   1395 	C$fb_lpc922.c$240$4$14 ==.
                           1396 ;	..\fb_lpc922.c:240: tx_nextsend++; //hier Zeiger erhoehen wenn Telegramm nicht gebildet werden konnte
   0332 05*2D              1397 	inc	_tx_nextsend
                    0334   1398 	C$fb_lpc922.c$241$4$14 ==.
                           1399 ;	..\fb_lpc922.c:241: tx_nextsend&=0x07;
   0334 53*2D 07           1400 	anl	_tx_nextsend,#0x07
   0337 02s05rEB           1401 	ljmp	00254$
   033A                    1402 00148$:
                    033A   1403 	C$fb_lpc922.c$245$3$15 ==.
                           1404 ;	..\fb_lpc922.c:245: TR1=0;		// nichts mehr zu tun, also statemachine stoppen
   033A C2 8E              1405 	clr	_TCON_6
                    033C   1406 	C$fb_lpc922.c$246$3$15 ==.
                           1407 ;	..\fb_lpc922.c:246: EX1=1;		// sicherstellen, dass ext. Int. 1 aktiv ist
   033C D2 AA              1408 	setb	_IEN0_2
                    033E   1409 	C$fb_lpc922.c$248$2$2 ==.
                           1410 ;	..\fb_lpc922.c:248: break;
   033E 02s05rEB           1411 	ljmp	00254$
                    0341   1412 	C$fb_lpc922.c$251$2$2 ==.
                           1413 ;	..\fb_lpc922.c:251: case 2: // T=75us
   0341                    1414 00150$:
                    0341   1415 	C$fb_lpc922.c$252$2$2 ==.
                           1416 ;	..\fb_lpc922.c:252: fbrx_bit=!IE1;				// Flipflop des ext. Int. 1 auslesen, ist 1 bei fallender Flanke am Pin
   0341 A2 8B              1417 	mov	c,_TCON_3
   0343 B3                 1418 	cpl	c
   0344 92*00              1419 	mov	b0,c
                    0346   1420 	C$fb_lpc922.c$253$2$2 ==.
                           1421 ;	..\fb_lpc922.c:253: IE1=0;						// Flipflop zuruecksetzen
   0346 C2 8B              1422 	clr	_TCON_3
                    0348   1423 	C$fb_lpc922.c$254$2$2 ==.
                           1424 ;	..\fb_lpc922.c:254: fb_state=3;// naechster state: 3
   0348 75*2A 03           1425 	mov	_fb_state,#0x03
                    034B   1426 	C$fb_lpc922.c$255$2$2 ==.
                           1427 ;	..\fb_lpc922.c:255: TH1=0;// reload auf 70µs (zeit swischen state 3 und 2)
   034B 75 8D 00           1428 	mov	_TH1,#0x00
                    034E   1429 	C$fb_lpc922.c$256$2$2 ==.
                           1430 ;	..\fb_lpc922.c:256: if(fb_pattern==0) {			// fb_pattern=0 bedeutet, dass bisher nur das Startbit empfangen wurde
   034E E5*29              1431 	mov	a,_fb_pattern
   0350 70 0A              1432 	jnz	00185$
                    0352   1433 	C$fb_lpc922.c$257$3$16 ==.
                           1434 ;	..\fb_lpc922.c:257: fb_pattern=1;			// 70us nach Startbit, als naecstes kommt Datenbit 0
   0352 75*29 01           1435 	mov	_fb_pattern,#0x01
                    0355   1436 	C$fb_lpc922.c$258$3$16 ==.
                           1437 ;	..\fb_lpc922.c:258: ack=0;					// Empfang eines neuen Bytes, also ack/nack Flags zuruecksetzen
   0355 C2*03              1438 	clr	_ack
                    0357   1439 	C$fb_lpc922.c$259$3$16 ==.
                           1440 ;	..\fb_lpc922.c:259: nack=0;
   0357 C2*04              1441 	clr	_nack
   0359 02s05rEB           1442 	ljmp	00254$
   035C                    1443 00185$:
                    035C   1444 	C$fb_lpc922.c$262$3$17 ==.
                           1445 ;	..\fb_lpc922.c:262: if(fb_pattern<129) {					// Daten-Bit LSB first
   035C 74 7F              1446 	mov	a,#0x100 - 0x81
   035E 25*29              1447 	add	a,_fb_pattern
   0360 40 1C              1448 	jc	00182$
                    0362   1449 	C$fb_lpc922.c$263$4$18 ==.
                           1450 ;	..\fb_lpc922.c:263: if(fbrx_bit) {
   0362 30*00 08           1451 	jnb	b0,00152$
                    0365   1452 	C$fb_lpc922.c$264$5$19 ==.
                           1453 ;	..\fb_lpc922.c:264: fb_parity=!fb_parity;			// Paritybit berechnen
   0365 B2*02              1454 	cpl	_fb_parity
                    0367   1455 	C$fb_lpc922.c$265$5$19 ==.
                           1456 ;	..\fb_lpc922.c:265: fbrx_byte+=fb_pattern;			// Datenbit speichern
   0367 E5*29              1457 	mov	a,_fb_pattern
   0369 25*28              1458 	add	a,_fbrx_byte
   036B F5*28              1459 	mov	_fbrx_byte,a
   036D                    1460 00152$:
                    036D   1461 	C$fb_lpc922.c$267$4$18 ==.
                           1462 ;	..\fb_lpc922.c:267: fb_pattern=fb_pattern<<1;			// naechstes Bit
   036D E5*29              1463 	mov	a,_fb_pattern
   036F 25*29              1464 	add	a,_fb_pattern
                    0371   1465 	C$fb_lpc922.c$268$4$18 ==.
                           1466 ;	..\fb_lpc922.c:268: if(fb_pattern==0) fb_pattern=129;	// alle Daten-Bits gelesen, Parity-Bit folgt
   0371 F5*29              1467 	mov	_fb_pattern,a
   0373 60 03              1468 	jz	00362$
   0375 02s05rEB           1469 	ljmp	00254$
   0378                    1470 00362$:
   0378 75*29 81           1471 	mov	_fb_pattern,#0x81
   037B 02s05rEB           1472 	ljmp	00254$
   037E                    1473 00182$:
                    037E   1474 	C$fb_lpc922.c$271$4$20 ==.
                           1475 ;	..\fb_lpc922.c:271: TR1=0;
   037E C2 8E              1476 	clr	_TCON_6
                    0380   1477 	C$fb_lpc922.c$272$4$20 ==.
                           1478 ;	..\fb_lpc922.c:272: TF1=0; //pruefen ob erforderlich!!!
   0380 C2 8F              1479 	clr	_TCON_7
                    0382   1480 	C$fb_lpc922.c$273$4$20 ==.
                           1481 ;	..\fb_lpc922.c:273: if(fb_parity==fbrx_bit) {				// Parity-Bit OK
   0382 A2*02              1482 	mov	c,_fb_parity
   0384 20*00 01           1483 	jb	b0,00363$
   0387 B3                 1484 	cpl	c
   0388                    1485 00363$:
   0388 50 2C              1486 	jnc	00166$
                    038A   1487 	C$fb_lpc922.c$274$5$21 ==.
                           1488 ;	..\fb_lpc922.c:274: if (telpos==0) {						// erstes empfangenes Byte
   038A E5*26              1489 	mov	a,_telpos
   038C 70 0E              1490 	jnz	00160$
                    038E   1491 	C$fb_lpc922.c$275$6$22 ==.
                           1492 ;	..\fb_lpc922.c:275: if (fbrx_byte==0xCC) ack=1;				// ACK empfangen
   038E 74 CC              1493 	mov	a,#0xCC
   0390 B5*28 02           1494 	cjne	a,_fbrx_byte,00156$
   0393 D2*03              1495 	setb	_ack
   0395                    1496 00156$:
                    0395   1497 	C$fb_lpc922.c$276$6$22 ==.
                           1498 ;	..\fb_lpc922.c:276: if (fbrx_byte==0x0C) nack=1;			// NACK empfangen
   0395 74 0C              1499 	mov	a,#0x0C
   0397 B5*28 02           1500 	cjne	a,_fbrx_byte,00160$
   039A D2*04              1501 	setb	_nack
   039C                    1502 00160$:
                    039C   1503 	C$fb_lpc922.c$278$5$21 ==.
                           1504 ;	..\fb_lpc922.c:278: if (!ack && !nack && telpos<=22) {			// Datenbyte empfangen, pointer auf Arraygroesse begrenzen
   039C 20*03 19           1505 	jb	_ack,00167$
   039F 20*04 16           1506 	jb	_nack,00167$
   03A2 E5*26              1507 	mov	a,_telpos
   03A4 24 E9              1508 	add	a,#0xff - 0x16
   03A6 40 10              1509 	jc	00167$
                    03A8   1510 	C$fb_lpc922.c$279$6$23 ==.
                           1511 ;	..\fb_lpc922.c:279: telegramm[telpos]=fbrx_byte;			// Byte speichern
   03A8 E5*26              1512 	mov	a,_telpos
   03AA 24r07              1513 	add	a,#_telegramm
   03AC F8                 1514 	mov	r0,a
                    03AD   1515 	C$fb_lpc922.c$280$6$23 ==.
                           1516 ;	..\fb_lpc922.c:280: cs^=fbrx_byte;							// Checksum berechnen
   03AD E5*28              1517 	mov	a,_fbrx_byte
   03AF F6                 1518 	mov	@r0,a
   03B0 62*27              1519 	xrl	_cs,a
                    03B2   1520 	C$fb_lpc922.c$281$6$23 ==.
                           1521 ;	..\fb_lpc922.c:281: telpos++;								// Telegrammzeiger erhoehen
   03B2 05*26              1522 	inc	_telpos
   03B4 80 02              1523 	sjmp	00167$
   03B6                    1524 00166$:
                    03B6   1525 	C$fb_lpc922.c$284$4$20 ==.
                           1526 ;	..\fb_lpc922.c:284: else parity_ok=0;						// Parity Error
   03B6 C2*00              1527 	clr	_parity_ok
   03B8                    1528 00167$:
                    03B8   1529 	C$fb_lpc922.c$286$4$20 ==.
                           1530 ;	..\fb_lpc922.c:286: if (wait_for_ack) {						// es wird ein ACK erwartet
                    03B8   1531 	C$fb_lpc922.c$287$5$24 ==.
                           1532 ;	..\fb_lpc922.c:287: wait_for_ack=0;							// Flag zurücksetzen, da wir es ja gerade abarbeiten
   03B8 10*0A 02           1533 	jbc	_wait_for_ack,00373$
   03BB 80 22              1534 	sjmp	00179$
   03BD                    1535 00373$:
                    03BD   1536 	C$fb_lpc922.c$288$5$24 ==.
                           1537 ;	..\fb_lpc922.c:288: if (ack && parity_ok) {					// ACK empfangen und auch erwartet
   03BD 30*03 14           1538 	jnb	_ack,00171$
   03C0 30*00 11           1539 	jnb	_parity_ok,00171$
                    03C3   1540 	C$fb_lpc922.c$289$6$25 ==.
                           1541 ;	..\fb_lpc922.c:289: repeat_count=4;						// keine Wiederholtelegramme mehr senden
   03C3 75*2B 04           1542 	mov	_repeat_count,#0x04
                    03C6   1543 	C$fb_lpc922.c$293$6$25 ==.
                           1544 ;	..\fb_lpc922.c:293: if(inc_pcount) {
                    03C6   1545 	C$fb_lpc922.c$294$7$26 ==.
                           1546 ;	..\fb_lpc922.c:294: inc_pcount=0;
   03C6 10*0E 02           1547 	jbc	_inc_pcount,00376$
   03C9 80 09              1548 	sjmp	00171$
   03CB                    1549 00376$:
                    03CB   1550 	C$fb_lpc922.c$295$7$26 ==.
                           1551 ;	..\fb_lpc922.c:295: pcount+=4;
   03CB E5*02              1552 	mov	a,_pcount
   03CD 24 04              1553 	add	a,#0x04
   03CF F5*02              1554 	mov	_pcount,a
                    03D1   1555 	C$fb_lpc922.c$296$7$26 ==.
                           1556 ;	..\fb_lpc922.c:296: pcount&=0x3C;
   03D1 53*02 3C           1557 	anl	_pcount,#0x3C
   03D4                    1558 00171$:
                    03D4   1559 	C$fb_lpc922.c$299$5$24 ==.
                           1560 ;	..\fb_lpc922.c:299: init_rx(0);
   03D4 C2 F0              1561 	clr	b[0]
   03D6 85 F0*00           1562 	mov	bits,b
   03D9 12s06r0F           1563 	lcall	_init_rx
   03DC 02s05rEB           1564 	ljmp	00254$
   03DF                    1565 00179$:
                    03DF   1566 	C$fb_lpc922.c$302$5$27 ==.
                           1567 ;	..\fb_lpc922.c:302: if (parity_ok && (!ack && !nack)) {		// ganz normales Datenbyte
   03DF 30*00 1E           1568 	jnb	_parity_ok,00174$
   03E2 20*03 1B           1569 	jb	_ack,00174$
   03E5 20*04 18           1570 	jb	_nack,00174$
                    03E8   1571 	C$fb_lpc922.c$303$6$28 ==.
                           1572 ;	..\fb_lpc922.c:303: TMOD=(TMOD & 0x0F) +0x10;			// Timer 1 als 16-Bit Timer
   03E8 74 0F              1573 	mov	a,#0x0F
   03EA 55 89              1574 	anl	a,_TMOD
   03EC 24 10              1575 	add	a,#0x10
   03EE F5 89              1576 	mov	_TMOD,a
                    03F0   1577 	C$fb_lpc922.c$304$6$28 ==.
                           1578 ;	..\fb_lpc922.c:304: TH1=0xFA;//0xFA;							// Timer 1 auf Timeout-Position setzen (370us)
   03F0 75 8D FA           1579 	mov	_TH1,#0xFA
                    03F3   1580 	C$fb_lpc922.c$305$6$28 ==.
                           1581 ;	..\fb_lpc922.c:305: TL1=0x70;//4f 0xAB; (bis hierher sinds 91Âµs)
   03F3 75 8B 70           1582 	mov	_TL1,#0x70
                    03F6   1583 	C$fb_lpc922.c$306$6$28 ==.
                           1584 ;	..\fb_lpc922.c:306: TR1=1;
   03F6 D2 8E              1585 	setb	_TCON_6
                    03F8   1586 	C$fb_lpc922.c$307$6$28 ==.
                           1587 ;	..\fb_lpc922.c:307: fb_state=4;							// naechster state: timeout = Telegramm fertig
   03F8 75*2A 04           1588 	mov	_fb_state,#0x04
                    03FB   1589 	C$fb_lpc922.c$308$6$28 ==.
                           1590 ;	..\fb_lpc922.c:308: EX1=1;								// int1 aktiv, falls noch ein Byte kommt
   03FB D2 AA              1591 	setb	_IEN0_2
   03FD 02s05rEB           1592 	ljmp	00254$
   0400                    1593 00174$:
                    0400   1594 	C$fb_lpc922.c$310$5$27 ==.
                           1595 ;	..\fb_lpc922.c:310: else init_rx(0);							// irgendwas empfangen
   0400 C2 F0              1596 	clr	b[0]
   0402 85 F0*00           1597 	mov	bits,b
   0405 12s06r0F           1598 	lcall	_init_rx
                    0408   1599 	C$fb_lpc922.c$314$2$2 ==.
                           1600 ;	..\fb_lpc922.c:314: break;
   0408 02s05rEB           1601 	ljmp	00254$
                    040B   1602 	C$fb_lpc922.c$316$2$2 ==.
                           1603 ;	..\fb_lpc922.c:316: case 3: // T=104us=0us
   040B                    1604 00187$:
                    040B   1605 	C$fb_lpc922.c$317$2$2 ==.
                           1606 ;	..\fb_lpc922.c:317: TH1=128;// reload auf 35Âµs (Zeit zwischen State 2 und 3)
   040B 75 8D 80           1607 	mov	_TH1,#0x80
                    040E   1608 	C$fb_lpc922.c$318$2$2 ==.
                           1609 ;	..\fb_lpc922.c:318: fb_state=2;//1
   040E 75*2A 02           1610 	mov	_fb_state,#0x02
                    0411   1611 	C$fb_lpc922.c$319$2$2 ==.
                           1612 ;	..\fb_lpc922.c:319: break;
   0411 02s05rEB           1613 	ljmp	00254$
                    0414   1614 	C$fb_lpc922.c$321$2$2 ==.
                           1615 ;	..\fb_lpc922.c:321: case 4:	//	Timeout, d.h. Telegramm-Ende
   0414                    1616 00188$:
                    0414   1617 	C$fb_lpc922.c$322$2$2 ==.
                           1618 ;	..\fb_lpc922.c:322: if (auto_ack && telpos>7) {//>4		// wenn ACK/NACK gesendet werden soll und Telegramm zumindest 7 Bytes hat, da sonst ein NACK wenig Sinn macht
   0414 20*08 03           1619 	jb	_auto_ack,00380$
   0417 02s04r98           1620 	ljmp	00206$
   041A                    1621 00380$:
   041A E5*26              1622 	mov	a,_telpos
   041C 24 F8              1623 	add	a,#0xff - 0x07
   041E 50 78              1624 	jnc	00206$
                    0420   1625 	C$fb_lpc922.c$323$3$29 ==.
                           1626 ;	..\fb_lpc922.c:323: TR1=0;
   0420 C2 8E              1627 	clr	_TCON_6
                    0422   1628 	C$fb_lpc922.c$324$3$29 ==.
                           1629 ;	..\fb_lpc922.c:324: TMOD=(TMOD & 0x0F) +0x10;	// Timer 1 als 16-Bit Timer
   0422 74 0F              1630 	mov	a,#0x0F
   0424 55 89              1631 	anl	a,_TMOD
   0426 24 10              1632 	add	a,#0x10
   0428 F5 89              1633 	mov	_TMOD,a
                    042A   1634 	C$fb_lpc922.c$325$3$29 ==.
                           1635 ;	..\fb_lpc922.c:325: TH1=0xEF;					// Timer 1 auf ACK / NACK -Position setzen (15 Bit Pause = 2708Âµs (26 Bit) nach Beginn Startbit vom letzten Datenbyte)
   042A 75 8D EF           1636 	mov	_TH1,#0xEF
                    042D   1637 	C$fb_lpc922.c$326$3$29 ==.
                           1638 ;	..\fb_lpc922.c:326: TL1=0x42;
   042D 75 8B 42           1639 	mov	_TL1,#0x42
                    0430   1640 	C$fb_lpc922.c$327$3$29 ==.
                           1641 ;	..\fb_lpc922.c:327: TR1=1;
   0430 D2 8E              1642 	setb	_TCON_6
                    0432   1643 	C$fb_lpc922.c$328$3$29 ==.
                           1644 ;	..\fb_lpc922.c:328: its_me=0;//transparency; // indiziert, ob dieses Geraet adressiert wurde, bei transparecy=1 immer
   0432 C2*05              1645 	clr	_its_me
                    0434   1646 	C$fb_lpc922.c$329$3$29 ==.
                           1647 ;	..\fb_lpc922.c:329: if(telegramm[5]&0x80) {
   0434 E5*0C              1648 	mov	a,(_telegramm + 0x0005)
   0436 30 E7 1F           1649 	jnb	acc.7,00198$
                    0439   1650 	C$fb_lpc922.c$330$4$30 ==.
                           1651 ;	..\fb_lpc922.c:330: if (gapos_in_gat(telegramm[3],telegramm[4])!=0xFF) its_me=1;	// Gruppenadresse
   0439 85*0A 82           1652 	mov	dpl,(_telegramm + 0x0003)
   043C C0*0B              1653 	push	(_telegramm + 0x0004)
   043E 12s06rA7           1654 	lcall	_gapos_in_gat
   0441 AF 82              1655 	mov	r7,dpl
   0443 15 81              1656 	dec	sp
   0445 BF FF 02           1657 	cjne	r7,#0xFF,00383$
   0448 80 02              1658 	sjmp	00190$
   044A                    1659 00383$:
   044A D2*05              1660 	setb	_its_me
   044C                    1661 00190$:
                    044C   1662 	C$fb_lpc922.c$331$4$30 ==.
                           1663 ;	..\fb_lpc922.c:331: if (telegramm[3]==0 && telegramm[4]==0) its_me=1;				// Broadcast
   044C E5*0A              1664 	mov	a,(_telegramm + 0x0003)
   044E 70 1C              1665 	jnz	00199$
   0450 E5*0B              1666 	mov	a,(_telegramm + 0x0004)
   0452 70 18              1667 	jnz	00199$
   0454 D2*05              1668 	setb	_its_me
   0456 80 14              1669 	sjmp	00199$
   0458                    1670 00198$:
                    0458   1671 	C$fb_lpc922.c$333$3$29 ==.
                           1672 ;	..\fb_lpc922.c:333: else if(telegramm[3]==eeprom[ADDRTAB+1] && telegramm[4]==eeprom[ADDRTAB+2]) its_me=1;	// phys. Adresse
   0458 90 1D 17           1673 	mov	dptr,#(_eeprom + 0x0017)
   045B E4                 1674 	clr	a
   045C 93                 1675 	movc	a,@a+dptr
   045D FF                 1676 	mov	r7,a
   045E B5*0A 0B           1677 	cjne	a,(_telegramm + 0x0003),00199$
   0461 90 1D 18           1678 	mov	dptr,#(_eeprom + 0x0018)
   0464 E4                 1679 	clr	a
   0465 93                 1680 	movc	a,@a+dptr
   0466 FF                 1681 	mov	r7,a
   0467 B5*0B 02           1682 	cjne	a,(_telegramm + 0x0004),00199$
   046A D2*05              1683 	setb	_its_me
   046C                    1684 00199$:
                    046C   1685 	C$fb_lpc922.c$336$3$29 ==.
                           1686 ;	..\fb_lpc922.c:336: if ((cs==0xFF)&&((telegramm[5]&0x0F)+8)== (telpos))
   046C 74 FF              1687 	mov	a,#0xFF
   046E B5*27 21           1688 	cjne	a,_cs,00203$
   0471 74 0F              1689 	mov	a,#0x0F
   0473 55*0C              1690 	anl	a,(_telegramm + 0x0005)
   0475 FF                 1691 	mov	r7,a
   0476 7E 00              1692 	mov	r6,#0x00
   0478 74 08              1693 	mov	a,#0x08
   047A 2F                 1694 	add	a,r7
   047B FF                 1695 	mov	r7,a
   047C E4                 1696 	clr	a
   047D 3E                 1697 	addc	a,r6
   047E FE                 1698 	mov	r6,a
   047F AC*26              1699 	mov	r4,_telpos
   0481 7D 00              1700 	mov	r5,#0x00
   0483 EF                 1701 	mov	a,r7
   0484 B5 04 0B           1702 	cjne	a,ar4,00203$
   0487 EE                 1703 	mov	a,r6
   0488 B5 05 07           1704 	cjne	a,ar5,00203$
                    048B   1705 	C$fb_lpc922.c$338$4$31 ==.
                           1706 ;	..\fb_lpc922.c:338: telegramm_ok=1;
   048B D2*0F              1707 	setb	_telegramm_ok
                    048D   1708 	C$fb_lpc922.c$339$4$31 ==.
                           1709 ;	..\fb_lpc922.c:339: if(its_me)tel_arrived=1;//&&(telegramm[5]&0x0F== telpos-8)
   048D 30*05 02           1710 	jnb	_its_me,00203$
   0490 D2*06              1711 	setb	_tel_arrived
   0492                    1712 00203$:
                    0492   1713 	C$fb_lpc922.c$341$3$29 ==.
                           1714 ;	..\fb_lpc922.c:341: fb_state=5;					// naechster state: ACK-Position erreicht
   0492 75*2A 05           1715 	mov	_fb_state,#0x05
   0495 02s05rEB           1716 	ljmp	00254$
   0498                    1717 00206$:
                    0498   1718 	C$fb_lpc922.c$346$3$32 ==.
                           1719 ;	..\fb_lpc922.c:346: init_rx(1);						// wieder in den Empfang zurück
   0498 D2 F0              1720 	setb	b[0]
   049A 85 F0*00           1721 	mov	bits,b
   049D 12s06r0F           1722 	lcall	_init_rx
                    04A0   1723 	C$fb_lpc922.c$348$2$2 ==.
                           1724 ;	..\fb_lpc922.c:348: break;
   04A0 02s05rEB           1725 	ljmp	00254$
                    04A3   1726 	C$fb_lpc922.c$350$2$2 ==.
                           1727 ;	..\fb_lpc922.c:350: case 5:	// ACK-Position erreicht
   04A3                    1728 00209$:
                    04A3   1729 	C$fb_lpc922.c$351$2$2 ==.
                           1730 ;	..\fb_lpc922.c:351: TR1=0;
   04A3 C2 8E              1731 	clr	_TCON_6
                    04A5   1732 	C$fb_lpc922.c$352$2$2 ==.
                           1733 ;	..\fb_lpc922.c:352: if (telegramm_ok) {	// Checksum und Laenge OK
   04A5 30*0F 1D           1734 	jnb	_telegramm_ok,00214$
                    04A8   1735 	C$fb_lpc922.c$353$3$33 ==.
                           1736 ;	..\fb_lpc922.c:353: if (its_me) {					// Gerät adressiert
   04A8 30*05 0F           1737 	jnb	_its_me,00211$
                    04AB   1738 	C$fb_lpc922.c$354$4$34 ==.
                           1739 ;	..\fb_lpc922.c:354: send_ack=1;
   04AB D2*0B              1740 	setb	_send_ack
                    04AD   1741 	C$fb_lpc922.c$355$4$34 ==.
                           1742 ;	..\fb_lpc922.c:355: init_tx(0);						// Senden initiieren
   04AD C2 F0              1743 	clr	b[0]
   04AF 85 F0*00           1744 	mov	bits,b
   04B2 12s06r45           1745 	lcall	_init_tx
                    04B5   1746 	C$fb_lpc922.c$356$4$34 ==.
                           1747 ;	..\fb_lpc922.c:356: wait_for_ack=0;					// bei ACK senden nicht erneut auf ACK warten
   04B5 C2*0A              1748 	clr	_wait_for_ack
   04B7 02s05rEB           1749 	ljmp	00254$
   04BA                    1750 00211$:
                    04BA   1751 	C$fb_lpc922.c$358$3$33 ==.
                           1752 ;	..\fb_lpc922.c:358: else init_rx(0);					// Gerät nicht adressiert, also zurück zu Empfang
   04BA C2 F0              1753 	clr	b[0]
   04BC 85 F0*00           1754 	mov	bits,b
   04BF 12s06r0F           1755 	lcall	_init_rx
   04C2 02s05rEB           1756 	ljmp	00254$
   04C5                    1757 00214$:
                    04C5   1758 	C$fb_lpc922.c$361$3$35 ==.
                           1759 ;	..\fb_lpc922.c:361: send_nack=1;
   04C5 D2*0C              1760 	setb	_send_nack
                    04C7   1761 	C$fb_lpc922.c$362$3$35 ==.
                           1762 ;	..\fb_lpc922.c:362: init_tx(0);
   04C7 C2 F0              1763 	clr	b[0]
   04C9 85 F0*00           1764 	mov	bits,b
   04CC 12s06r45           1765 	lcall	_init_tx
                    04CF   1766 	C$fb_lpc922.c$363$3$35 ==.
                           1767 ;	..\fb_lpc922.c:363: wait_for_ack=0;					// bei NACK senden nicht erneut auf ACK warten
   04CF C2*0A              1768 	clr	_wait_for_ack
                    04D1   1769 	C$fb_lpc922.c$365$2$2 ==.
                           1770 ;	..\fb_lpc922.c:365: break;
   04D1 02s05rEB           1771 	ljmp	00254$
                    04D4   1772 	C$fb_lpc922.c$367$2$2 ==.
                           1773 ;	..\fb_lpc922.c:367: case 9:
   04D4                    1774 00216$:
                    04D4   1775 	C$fb_lpc922.c$368$2$2 ==.
                           1776 ;	..\fb_lpc922.c:368: TR1=0;			// Timer 1 stoppen
   04D4 C2 8E              1777 	clr	_TCON_6
                    04D6   1778 	C$fb_lpc922.c$369$2$2 ==.
                           1779 ;	..\fb_lpc922.c:369: TMOD=(TMOD & 0x0F) + 0x20;	// Timer 1 als 8-Bit autoreload
   04D6 74 0F              1780 	mov	a,#0x0F
   04D8 55 89              1781 	anl	a,_TMOD
   04DA 24 20              1782 	add	a,#0x20
   04DC F5 89              1783 	mov	_TMOD,a
                    04DE   1784 	C$fb_lpc922.c$370$2$2 ==.
                           1785 ;	..\fb_lpc922.c:370: TL1=128;		// Timer laden
   04DE 75 8B 80           1786 	mov	_TL1,#0x80
                    04E1   1787 	C$fb_lpc922.c$371$2$2 ==.
                           1788 ;	..\fb_lpc922.c:371: TH1=110;
   04E1 75 8D 6E           1789 	mov	_TH1,#0x6E
                    04E4   1790 	C$fb_lpc922.c$372$2$2 ==.
                           1791 ;	..\fb_lpc922.c:372: TF1=0;			// Timer1-flag loeschen						1 cycle
   04E4 C2 8F              1792 	clr	_TCON_7
                    04E6   1793 	C$fb_lpc922.c$373$2$2 ==.
                           1794 ;	..\fb_lpc922.c:373: TR1=1;			// Timer1 starten							1 cycle
   04E6 D2 8E              1795 	setb	_TCON_6
                    04E8   1796 	C$fb_lpc922.c$374$2$2 ==.
                           1797 ;	..\fb_lpc922.c:374: fb_state=10;
   04E8 75*2A 0A           1798 	mov	_fb_state,#0x0A
                    04EB   1799 	C$fb_lpc922.c$377$2$2 ==.
                           1800 ;	..\fb_lpc922.c:377: case 10:	// Byte Senden, T=0us
   04EB                    1801 00217$:
                    04EB   1802 	C$fb_lpc922.c$378$2$2 ==.
                           1803 ;	..\fb_lpc922.c:378: send_byte=telegramm[telpos];
   04EB E5*26              1804 	mov	a,_telpos
   04ED 24r07              1805 	add	a,#_telegramm
   04EF F9                 1806 	mov	r1,a
   04F0 87 07              1807 	mov	ar7,@r1
                    04F2   1808 	C$fb_lpc922.c$379$2$2 ==.
                           1809 ;	..\fb_lpc922.c:379: if (send_ack) send_byte=0xCC;
   04F2 30*0B 02           1810 	jnb	_send_ack,00219$
   04F5 7F CC              1811 	mov	r7,#0xCC
   04F7                    1812 00219$:
                    04F7   1813 	C$fb_lpc922.c$380$2$2 ==.
                           1814 ;	..\fb_lpc922.c:380: if (send_nack) send_byte=0x0C;
   04F7 30*0C 02           1815 	jnb	_send_nack,00221$
   04FA 7F 0C              1816 	mov	r7,#0x0C
   04FC                    1817 00221$:
                    04FC   1818 	C$fb_lpc922.c$381$2$2 ==.
                           1819 ;	..\fb_lpc922.c:381: EX1=0;					// Empfang verhindern
   04FC C2 AA              1820 	clr	_IEN0_2
                    04FE   1821 	C$fb_lpc922.c$382$2$2 ==.
                           1822 ;	..\fb_lpc922.c:382: if(fb_state==10){
   04FE 74 0A              1823 	mov	a,#0x0A
   0500 B5*2A 02           1824 	cjne	a,_fb_state,00399$
   0503 80 03              1825 	sjmp	00400$
   0505                    1826 00399$:
   0505 02s05rEB           1827 	ljmp	00254$
   0508                    1828 00400$:
                    0508   1829 	C$fb_lpc922.c$383$3$36 ==.
                           1830 ;	..\fb_lpc922.c:383: if (fb_pattern<=128) {			// Startbit und Datenbits (pattern=0:startbit, 1 2 4 8 .. 128 Datenbits, 129 parity)
   0508 E5*29              1831 	mov	a,_fb_pattern
   050A 24 7F              1832 	add	a,#0xff - 0x80
   050C 40 2C              1833 	jc	00234$
                    050E   1834 	C$fb_lpc922.c$384$4$37 ==.
                           1835 ;	..\fb_lpc922.c:384: if ((send_byte & fb_pattern)==0) {	// wenn Bit logisch 0 ist
   050E E5*29              1836 	mov	a,_fb_pattern
   0510 5F                 1837 	anl	a,r7
   0511 70 08              1838 	jnz	00223$
                    0513   1839 	C$fb_lpc922.c$386$5$38 ==.
                           1840 ;	..\fb_lpc922.c:386: FBOUTC=1;						// Bus runter ziehen
   0513 D2 96              1841 	setb	_P1_6
                    0515   1842 	C$fb_lpc922.c$388$5$38 ==.
                           1843 ;	..\fb_lpc922.c:388: fbtx_bit=0;						// fbtx_bit dient zur spaeteren Kollisionspruefung
   0515 C2*09              1844 	clr	_fbtx_bit
                    0517   1845 	C$fb_lpc922.c$389$5$38 ==.
                           1846 ;	..\fb_lpc922.c:389: fb_parity=!fb_parity;			// Parity-Bit berechnen
   0517 B2*02              1847 	cpl	_fb_parity
   0519 80 02              1848 	sjmp	00224$
   051B                    1849 00223$:
                    051B   1850 	C$fb_lpc922.c$391$4$37 ==.
                           1851 ;	..\fb_lpc922.c:391: else fbtx_bit=1;
   051B D2*09              1852 	setb	_fbtx_bit
   051D                    1853 00224$:
                    051D   1854 	C$fb_lpc922.c$392$4$37 ==.
                           1855 ;	..\fb_lpc922.c:392: if (fb_pattern==0) {				// wenn Startbit: parity zuruecksetzen
   051D E5*29              1856 	mov	a,_fb_pattern
   051F 70 07              1857 	jnz	00226$
                    0521   1858 	C$fb_lpc922.c$393$5$39 ==.
                           1859 ;	..\fb_lpc922.c:393: fb_pattern=1;					// auf erstes Datenbit zeigen
   0521 75*29 01           1860 	mov	_fb_pattern,#0x01
                    0524   1861 	C$fb_lpc922.c$394$5$39 ==.
                           1862 ;	..\fb_lpc922.c:394: fb_parity=0;
   0524 C2*02              1863 	clr	_fb_parity
   0526 80 06              1864 	sjmp	00227$
   0528                    1865 00226$:
                    0528   1866 	C$fb_lpc922.c$396$4$37 ==.
                           1867 ;	..\fb_lpc922.c:396: else fb_pattern=fb_pattern<<1;		// naechstes Datenbit
   0528 E5*29              1868 	mov	a,_fb_pattern
   052A 25*29              1869 	add	a,_fb_pattern
   052C F5*29              1870 	mov	_fb_pattern,a
   052E                    1871 00227$:
                    052E   1872 	C$fb_lpc922.c$397$4$37 ==.
                           1873 ;	..\fb_lpc922.c:397: if(fb_pattern==0) fb_pattern=129;	// alle Daten-Bits gesendet, Parity-Bit folgt
   052E E5*29              1874 	mov	a,_fb_pattern
   0530 70 03              1875 	jnz	00229$
   0532 75*29 81           1876 	mov	_fb_pattern,#0x81
   0535                    1877 00229$:
                    0535   1878 	C$fb_lpc922.c$398$4$37 ==.
                           1879 ;	..\fb_lpc922.c:398: fb_state=11;
   0535 75*2A 0B           1880 	mov	_fb_state,#0x0B
   0538 80 13              1881 	sjmp	00235$
   053A                    1882 00234$:
                    053A   1883 	C$fb_lpc922.c$401$4$40 ==.
                           1884 ;	..\fb_lpc922.c:401: if (!fb_parity) {				// wenn Parity-Bit logisch 0
   053A 20*02 06           1885 	jb	_fb_parity,00231$
                    053D   1886 	C$fb_lpc922.c$402$5$41 ==.
                           1887 ;	..\fb_lpc922.c:402: FBOUTC=1;						// Bus runterziehen
   053D D2 96              1888 	setb	_P1_6
                    053F   1889 	C$fb_lpc922.c$403$5$41 ==.
                           1890 ;	..\fb_lpc922.c:403: fbtx_bit=0;						// fbtx_bit dient zur spaeteren Kollisionspruefung
   053F C2*09              1891 	clr	_fbtx_bit
   0541 80 02              1892 	sjmp	00232$
   0543                    1893 00231$:
                    0543   1894 	C$fb_lpc922.c$405$4$40 ==.
                           1895 ;	..\fb_lpc922.c:405: else fbtx_bit=1;
   0543 D2*09              1896 	setb	_fbtx_bit
   0545                    1897 00232$:
                    0545   1898 	C$fb_lpc922.c$406$4$40 ==.
                           1899 ;	..\fb_lpc922.c:406: telpos++;					// naechstes Byte
   0545 05*26              1900 	inc	_telpos
                    0547   1901 	C$fb_lpc922.c$407$4$40 ==.
                           1902 ;	..\fb_lpc922.c:407: fb_pattern=0;				// wieder mit Startbit beginnen
   0547 75*29 00           1903 	mov	_fb_pattern,#0x00
                    054A   1904 	C$fb_lpc922.c$408$4$40 ==.
                           1905 ;	..\fb_lpc922.c:408: fb_state=13;				// Pruefen ob Telegramm fertig
   054A 75*2A 0D           1906 	mov	_fb_state,#0x0D
   054D                    1907 00235$:
                    054D   1908 	C$fb_lpc922.c$410$3$36 ==.
                           1909 ;	..\fb_lpc922.c:410: TH1=18; //reload 70µ -delay interrupt (von state 11 auf 13)
   054D 75 8D 12           1910 	mov	_TH1,#0x12
                    0550   1911 	C$fb_lpc922.c$412$2$2 ==.
                           1912 ;	..\fb_lpc922.c:412: break;
   0550 02s05rEB           1913 	ljmp	00254$
                    0553   1914 	C$fb_lpc922.c$414$2$2 ==.
                           1915 ;	..\fb_lpc922.c:414: case 11:	// Sendestufe aus, T=35us
   0553                    1916 00238$:
                    0553   1917 	C$fb_lpc922.c$415$2$2 ==.
                           1918 ;	..\fb_lpc922.c:415: if(telpos==0 && fb_pattern==1) {	// 1. Byte Startbit
   0553 E5*26              1919 	mov	a,_telpos
   0555 70 07              1920 	jnz	00240$
   0557 74 01              1921 	mov	a,#0x01
   0559 B5*29 02           1922 	cjne	a,_fb_pattern,00240$
                    055C   1923 	C$fb_lpc922.c$416$3$42 ==.
                           1924 ;	..\fb_lpc922.c:416: repeat_count++;		// angefangener Sendeversuch, also Zaehler erhoehen
   055C 05*2B              1925 	inc	_repeat_count
   055E                    1926 00240$:
                    055E   1927 	C$fb_lpc922.c$418$2$2 ==.
                           1928 ;	..\fb_lpc922.c:418: FBOUTC=0;				// Sendestufe aus
   055E C2 96              1929 	clr	_P1_6
                    0560   1930 	C$fb_lpc922.c$419$2$2 ==.
                           1931 ;	..\fb_lpc922.c:419: if (fbtx_bit & IE1) {	// Kollision
   0560 A2*09              1932 	mov	c,_fbtx_bit
   0562 82 8B              1933 	anl	c,_TCON_3
   0564 50 0C              1934 	jnc	00243$
                    0566   1935 	C$fb_lpc922.c$420$3$43 ==.
                           1936 ;	..\fb_lpc922.c:420: wait_for_ack=0;
   0566 C2*0A              1937 	clr	_wait_for_ack
                    0568   1938 	C$fb_lpc922.c$421$3$43 ==.
                           1939 ;	..\fb_lpc922.c:421: init_rx(0);				// Senden abbrechen und Empfang initialisieren
   0568 C2 F0              1940 	clr	b[0]
   056A 85 F0*00           1941 	mov	bits,b
   056D 12s06r0F           1942 	lcall	_init_rx
   0570 80 06              1943 	sjmp	00244$
   0572                    1944 00243$:
                    0572   1945 	C$fb_lpc922.c$424$3$44 ==.
                           1946 ;	..\fb_lpc922.c:424: fb_state=10;//12;
   0572 75*2A 0A           1947 	mov	_fb_state,#0x0A
                    0575   1948 	C$fb_lpc922.c$425$3$44 ==.
                           1949 ;	..\fb_lpc922.c:425: TH1=110;// 35Âµs + delay (von state 10 auf 11)
   0575 75 8D 6E           1950 	mov	_TH1,#0x6E
   0578                    1951 00244$:
                    0578   1952 	C$fb_lpc922.c$427$2$2 ==.
                           1953 ;	..\fb_lpc922.c:427: IE1=0;					// Flipflop loeschen
   0578 C2 8B              1954 	clr	_TCON_3
                    057A   1955 	C$fb_lpc922.c$428$2$2 ==.
                           1956 ;	..\fb_lpc922.c:428: break;
                    057A   1957 	C$fb_lpc922.c$434$2$2 ==.
                           1958 ;	..\fb_lpc922.c:434: case 13:	// Byte uebertragen, T=35us, pruefen ob Telegramm fertig
   057A 80 6F              1959 	sjmp	00254$
   057C                    1960 00245$:
                    057C   1961 	C$fb_lpc922.c$435$2$2 ==.
                           1962 ;	..\fb_lpc922.c:435: FBOUTC=0;
   057C C2 96              1963 	clr	_P1_6
                    057E   1964 	C$fb_lpc922.c$436$2$2 ==.
                           1965 ;	..\fb_lpc922.c:436: TR1=0;
   057E C2 8E              1966 	clr	_TCON_6
                    0580   1967 	C$fb_lpc922.c$437$2$2 ==.
                           1968 ;	..\fb_lpc922.c:437: TMOD=(TMOD & 0x0F) +0x10;	// Timer 1 als 16-Bit Timer
   0580 74 0F              1969 	mov	a,#0x0F
   0582 55 89              1970 	anl	a,_TMOD
   0584 24 10              1971 	add	a,#0x10
   0586 F5 89              1972 	mov	_TMOD,a
                    0588   1973 	C$fb_lpc922.c$438$2$2 ==.
                           1974 ;	..\fb_lpc922.c:438: TH1=0xFB;					// Timer 1 auf Interbyte Abstand setzen (3 Bit Pause = 312Âµs
   0588 75 8D FB           1975 	mov	_TH1,#0xFB
                    058B   1976 	C$fb_lpc922.c$439$2$2 ==.
                           1977 ;	..\fb_lpc922.c:439: TL1=0x90;
   058B 75 8B 90           1978 	mov	_TL1,#0x90
                    058E   1979 	C$fb_lpc922.c$440$2$2 ==.
                           1980 ;	..\fb_lpc922.c:440: TR1=1;
   058E D2 8E              1981 	setb	_TCON_6
                    0590   1982 	C$fb_lpc922.c$441$2$2 ==.
                           1983 ;	..\fb_lpc922.c:441: if (send_ack || send_nack) {	// ACK/NACK senden
   0590 20*0B 03           1984 	jb	_send_ack,00249$
   0593 30*0C 0A           1985 	jnb	_send_nack,00250$
   0596                    1986 00249$:
                    0596   1987 	C$fb_lpc922.c$442$3$45 ==.
                           1988 ;	..\fb_lpc922.c:442: init_rx(0);					// ACK senden abgeschlossen, also statemachine auf Anfang
   0596 C2 F0              1989 	clr	b[0]
   0598 85 F0*00           1990 	mov	bits,b
   059B 12s06r0F           1991 	lcall	_init_rx
   059E 80 30              1992 	sjmp	00251$
   05A0                    1993 00250$:
                    05A0   1994 	C$fb_lpc922.c$445$3$46 ==.
                           1995 ;	..\fb_lpc922.c:445: if (telpos>((telegramm[5]&0x0F)+7)) {		// Telegramm fertig gesendet
   05A0 74 0F              1996 	mov	a,#0x0F
   05A2 55*0C              1997 	anl	a,(_telegramm + 0x0005)
   05A4 FF                 1998 	mov	r7,a
   05A5 7E 00              1999 	mov	r6,#0x00
   05A7 74 07              2000 	mov	a,#0x07
   05A9 2F                 2001 	add	a,r7
   05AA FF                 2002 	mov	r7,a
   05AB E4                 2003 	clr	a
   05AC 3E                 2004 	addc	a,r6
   05AD FE                 2005 	mov	r6,a
   05AE AC*26              2006 	mov	r4,_telpos
   05B0 7D 00              2007 	mov	r5,#0x00
   05B2 C3                 2008 	clr	c
   05B3 EF                 2009 	mov	a,r7
   05B4 9C                 2010 	subb	a,r4
   05B5 EE                 2011 	mov	a,r6
   05B6 64 80              2012 	xrl	a,#0x80
   05B8 8D F0              2013 	mov	b,r5
   05BA 63 F0 80           2014 	xrl	b,#0x80
   05BD 95 F0              2015 	subb	a,b
   05BF 50 0C              2016 	jnc	00247$
                    05C1   2017 	C$fb_lpc922.c$446$4$47 ==.
                           2018 ;	..\fb_lpc922.c:446: tel_sent=1;
   05C1 D2*07              2019 	setb	_tel_sent
                    05C3   2020 	C$fb_lpc922.c$447$4$47 ==.
                           2021 ;	..\fb_lpc922.c:447: init_rx(1);	// Telegramm senden abgeschlossen, ggf. wiederholen wenn nicht geackt wird
   05C3 D2 F0              2022 	setb	b[0]
   05C5 85 F0*00           2023 	mov	bits,b
   05C8 12s06r0F           2024 	lcall	_init_rx
   05CB 80 03              2025 	sjmp	00251$
   05CD                    2026 00247$:
                    05CD   2027 	C$fb_lpc922.c$449$3$46 ==.
                           2028 ;	..\fb_lpc922.c:449: else fb_state=14;		// naechstes Byte: Interbyte Abstand einhalten
   05CD 75*2A 0E           2029 	mov	_fb_state,#0x0E
   05D0                    2030 00251$:
                    05D0   2031 	C$fb_lpc922.c$451$2$2 ==.
                           2032 ;	..\fb_lpc922.c:451: IE1=0;
   05D0 C2 8B              2033 	clr	_TCON_3
                    05D2   2034 	C$fb_lpc922.c$452$2$2 ==.
                           2035 ;	..\fb_lpc922.c:452: break;
                    05D2   2036 	C$fb_lpc922.c$454$2$2 ==.
                           2037 ;	..\fb_lpc922.c:454: case 14:	// Interbyte Abstand erreicht (=Stopbit + 2 Bit)
   05D2 80 17              2038 	sjmp	00254$
   05D4                    2039 00253$:
                    05D4   2040 	C$fb_lpc922.c$455$2$2 ==.
                           2041 ;	..\fb_lpc922.c:455: TR1=0;
   05D4 C2 8E              2042 	clr	_TCON_6
                    05D6   2043 	C$fb_lpc922.c$456$2$2 ==.
                           2044 ;	..\fb_lpc922.c:456: TMOD=(TMOD & 0x0F) +0x20;			// Timer 1 als 8-Bit autoreload
   05D6 74 0F              2045 	mov	a,#0x0F
   05D8 55 89              2046 	anl	a,_TMOD
   05DA 24 20              2047 	add	a,#0x20
   05DC F5 89              2048 	mov	_TMOD,a
                    05DE   2049 	C$fb_lpc922.c$457$2$2 ==.
                           2050 ;	..\fb_lpc922.c:457: TH1=110;							// Timer 1 auf 104/3 us laden
   05DE 75 8D 6E           2051 	mov	_TH1,#0x6E
                    05E1   2052 	C$fb_lpc922.c$458$2$2 ==.
                           2053 ;	..\fb_lpc922.c:458: TL1=128;
   05E1 75 8B 80           2054 	mov	_TL1,#0x80
                    05E4   2055 	C$fb_lpc922.c$459$2$2 ==.
                           2056 ;	..\fb_lpc922.c:459: TF1=0;
   05E4 C2 8F              2057 	clr	_TCON_7
                    05E6   2058 	C$fb_lpc922.c$460$2$2 ==.
                           2059 ;	..\fb_lpc922.c:460: TR1=1;
   05E6 D2 8E              2060 	setb	_TCON_6
                    05E8   2061 	C$fb_lpc922.c$461$2$2 ==.
                           2062 ;	..\fb_lpc922.c:461: fb_state=10;
   05E8 75*2A 0A           2063 	mov	_fb_state,#0x0A
                    05EB   2064 	C$fb_lpc922.c$466$1$1 ==.
                           2065 ;	..\fb_lpc922.c:466: }
   05EB                    2066 00254$:
                    05EB   2067 	C$fb_lpc922.c$467$1$1 ==.
                           2068 ;	..\fb_lpc922.c:467: interrupted=1;			// zeigt der app, dass sie unterbrochen wurde
   05EB D2*01              2069 	setb	_interrupted
   05ED 85*00 81           2070 	mov	sp,_bp
   05F0 D0*00              2071 	pop	_bp
   05F2 D0 D0              2072 	pop	psw
   05F4 D0 00              2073 	pop	(0+0)
   05F6 D0 01              2074 	pop	(0+1)
   05F8 D0 02              2075 	pop	(0+2)
   05FA D0 03              2076 	pop	(0+3)
   05FC D0 04              2077 	pop	(0+4)
   05FE D0 05              2078 	pop	(0+5)
   0600 D0 06              2079 	pop	(0+6)
   0602 D0 07              2080 	pop	(0+7)
   0604 D0 83              2081 	pop	dph
   0606 D0 82              2082 	pop	dpl
   0608 D0 F0              2083 	pop	b
   060A D0 E0              2084 	pop	acc
   060C D0*00              2085 	pop	bits
                    060E   2086 	C$fb_lpc922.c$468$1$1 ==.
                    060E   2087 	XG$T1_int$0$0 ==.
   060E 32                 2088 	reti
                           2089 ;------------------------------------------------------------
                           2090 ;Allocation info for local variables in function 'init_rx'
                           2091 ;------------------------------------------------------------
                           2092 ;longwait                  Allocated to registers b0 
                           2093 ;------------------------------------------------------------
                    060F   2094 	G$init_rx$0$0 ==.
                    060F   2095 	C$fb_lpc922.c$471$1$1 ==.
                           2096 ;	..\fb_lpc922.c:471: void init_rx(__bit longwait) 	// Empfangen initiieren (statemachine auf Anfang)
                           2097 ;	-----------------------------------------
                           2098 ;	 function init_rx
                           2099 ;	-----------------------------------------
   060F                    2100 _init_rx:
                    060F   2101 	C$fb_lpc922.c$473$1$1 ==.
                           2102 ;	..\fb_lpc922.c:473: fb_state=0;
   060F 75*2A 00           2103 	mov	_fb_state,#0x00
                    0612   2104 	C$fb_lpc922.c$474$1$1 ==.
                           2105 ;	..\fb_lpc922.c:474: IE1=0;
   0612 C2 8B              2106 	clr	_TCON_3
                    0614   2107 	C$fb_lpc922.c$475$1$1 ==.
                           2108 ;	..\fb_lpc922.c:475: TR1=0;
   0614 C2 8E              2109 	clr	_TCON_6
                    0616   2110 	C$fb_lpc922.c$476$1$1 ==.
                           2111 ;	..\fb_lpc922.c:476: ET1=0;
   0616 C2 AB              2112 	clr	_IEN0_3
                    0618   2113 	C$fb_lpc922.c$477$1$1 ==.
                           2114 ;	..\fb_lpc922.c:477: cs=0;
   0618 75*27 00           2115 	mov	_cs,#0x00
                    061B   2116 	C$fb_lpc922.c$478$1$1 ==.
                           2117 ;	..\fb_lpc922.c:478: telpos=0;
   061B 75*26 00           2118 	mov	_telpos,#0x00
                    061E   2119 	C$fb_lpc922.c$479$1$1 ==.
                           2120 ;	..\fb_lpc922.c:479: TR1=0;
   061E C2 8E              2121 	clr	_TCON_6
                    0620   2122 	C$fb_lpc922.c$480$1$1 ==.
                           2123 ;	..\fb_lpc922.c:480: TMOD=(TMOD & 0x0F) +0x10;	// Timer 1 als 16-Bit Timer
   0620 74 0F              2124 	mov	a,#0x0F
   0622 55 89              2125 	anl	a,_TMOD
   0624 24 10              2126 	add	a,#0x10
   0626 F5 89              2127 	mov	_TMOD,a
                    0628   2128 	C$fb_lpc922.c$481$1$1 ==.
                           2129 ;	..\fb_lpc922.c:481: if(longwait){
   0628 30*00 05           2130 	jnb	b0,00102$
                    062B   2131 	C$fb_lpc922.c$482$2$2 ==.
                           2132 ;	..\fb_lpc922.c:482: TH1=0x89;					// busfree Zeit = 15 Bit (auf ACK) + 11 Bit (ACK) + 53 Bit
   062B 75 8D 89           2133 	mov	_TH1,#0x89
   062E 80 03              2134 	sjmp	00103$
   0630                    2135 00102$:
                    0630   2136 	C$fb_lpc922.c$485$2$3 ==.
                           2137 ;	..\fb_lpc922.c:485: TH1=0xB0;					// busfree Zeit =  53 Bit
   0630 75 8D B0           2138 	mov	_TH1,#0xB0
   0633                    2139 00103$:
                    0633   2140 	C$fb_lpc922.c$487$1$1 ==.
                           2141 ;	..\fb_lpc922.c:487: TL1=0xAF;
   0633 75 8B AF           2142 	mov	_TL1,#0xAF
                    0636   2143 	C$fb_lpc922.c$488$1$1 ==.
                           2144 ;	..\fb_lpc922.c:488: send_ack=0;
   0636 C2*0B              2145 	clr	_send_ack
                    0638   2146 	C$fb_lpc922.c$489$1$1 ==.
                           2147 ;	..\fb_lpc922.c:489: send_nack=0;
   0638 C2*0C              2148 	clr	_send_nack
                    063A   2149 	C$fb_lpc922.c$490$1$1 ==.
                           2150 ;	..\fb_lpc922.c:490: TF1=0;
   063A C2 8F              2151 	clr	_TCON_7
                    063C   2152 	C$fb_lpc922.c$491$1$1 ==.
                           2153 ;	..\fb_lpc922.c:491: TR1=1;
   063C D2 8E              2154 	setb	_TCON_6
                    063E   2155 	C$fb_lpc922.c$492$1$1 ==.
                           2156 ;	..\fb_lpc922.c:492: EX1=1;
   063E D2 AA              2157 	setb	_IEN0_2
                    0640   2158 	C$fb_lpc922.c$493$1$1 ==.
                           2159 ;	..\fb_lpc922.c:493: ET1=1;
   0640 D2 AB              2160 	setb	_IEN0_3
                    0642   2161 	C$fb_lpc922.c$494$1$1 ==.
                           2162 ;	..\fb_lpc922.c:494: telegramm_ok=0;
   0642 C2*0F              2163 	clr	_telegramm_ok
                    0644   2164 	C$fb_lpc922.c$495$1$1 ==.
                    0644   2165 	XG$init_rx$0$0 ==.
   0644 22                 2166 	ret
                           2167 ;------------------------------------------------------------
                           2168 ;Allocation info for local variables in function 'init_tx'
                           2169 ;------------------------------------------------------------
                           2170 ;low_prio_time             Allocated to registers b0 
                           2171 ;n                         Allocated to registers r6 
                           2172 ;cs_pos                    Allocated to registers r7 
                           2173 ;------------------------------------------------------------
                    0645   2174 	G$init_tx$0$0 ==.
                    0645   2175 	C$fb_lpc922.c$498$1$1 ==.
                           2176 ;	..\fb_lpc922.c:498: void init_tx(__bit low_prio_time) 		// Checksum des Telegramms berechnen und Senden initiieren
                           2177 ;	-----------------------------------------
                           2178 ;	 function init_tx
                           2179 ;	-----------------------------------------
   0645                    2180 _init_tx:
                    0645   2181 	C$fb_lpc922.c$502$1$1 ==.
                           2182 ;	..\fb_lpc922.c:502: TR1=0;
   0645 C2 8E              2183 	clr	_TCON_6
                    0647   2184 	C$fb_lpc922.c$503$1$1 ==.
                           2185 ;	..\fb_lpc922.c:503: TMOD=(TMOD & 0x0F) +0x20;			// Timer 1 als 8-Bit autoreload
   0647 74 0F              2186 	mov	a,#0x0F
   0649 55 89              2187 	anl	a,_TMOD
   064B 24 20              2188 	add	a,#0x20
   064D F5 89              2189 	mov	_TMOD,a
                    064F   2190 	C$fb_lpc922.c$504$1$1 ==.
                           2191 ;	..\fb_lpc922.c:504: TH1=110;							// von state 10 auf 11
   064F 75 8D 6E           2192 	mov	_TH1,#0x6E
                    0652   2193 	C$fb_lpc922.c$505$1$1 ==.
                           2194 ;	..\fb_lpc922.c:505: TL1=128;							// von hier bis state 10
   0652 75 8B 80           2195 	mov	_TL1,#0x80
                    0655   2196 	C$fb_lpc922.c$506$1$1 ==.
                           2197 ;	..\fb_lpc922.c:506: TF1=0;
   0655 C2 8F              2198 	clr	_TCON_7
                    0657   2199 	C$fb_lpc922.c$508$1$1 ==.
                           2200 ;	..\fb_lpc922.c:508: cs_pos=(telegramm[5]&0x0F)+7;		// Position der Checksum im Telegramm
   0657 74 0F              2201 	mov	a,#0x0F
   0659 55*0C              2202 	anl	a,(_telegramm + 0x0005)
   065B 24 07              2203 	add	a,#0x07
   065D FF                 2204 	mov	r7,a
                    065E   2205 	C$fb_lpc922.c$509$1$1 ==.
                           2206 ;	..\fb_lpc922.c:509: cs=0xFF;
   065E 75*27 FF           2207 	mov	_cs,#0xFF
                    0661   2208 	C$fb_lpc922.c$510$1$1 ==.
                           2209 ;	..\fb_lpc922.c:510: for(n=0;n<cs_pos;n++) {
   0661 7E 00              2210 	mov	r6,#0x00
   0663                    2211 00103$:
   0663 C3                 2212 	clr	c
   0664 EE                 2213 	mov	a,r6
   0665 9F                 2214 	subb	a,r7
   0666 50 0B              2215 	jnc	00106$
                    0668   2216 	C$fb_lpc922.c$511$2$2 ==.
                           2217 ;	..\fb_lpc922.c:511: cs^=telegramm[n];				// Checksum berechnen
   0668 EE                 2218 	mov	a,r6
   0669 24r07              2219 	add	a,#_telegramm
   066B F9                 2220 	mov	r1,a
   066C E7                 2221 	mov	a,@r1
   066D FD                 2222 	mov	r5,a
   066E 62*27              2223 	xrl	_cs,a
                    0670   2224 	C$fb_lpc922.c$510$1$1 ==.
                           2225 ;	..\fb_lpc922.c:510: for(n=0;n<cs_pos;n++) {
   0670 0E                 2226 	inc	r6
   0671 80 F0              2227 	sjmp	00103$
   0673                    2228 00106$:
                    0673   2229 	C$fb_lpc922.c$513$1$1 ==.
                           2230 ;	..\fb_lpc922.c:513: telegramm[cs_pos]=cs;				// Checksum hinter Nutzdaten anfaegen
   0673 EF                 2231 	mov	a,r7
   0674 24r07              2232 	add	a,#_telegramm
   0676 F8                 2233 	mov	r0,a
   0677 A6*27              2234 	mov	@r0,_cs
                    0679   2235 	C$fb_lpc922.c$514$1$1 ==.
                           2236 ;	..\fb_lpc922.c:514: ack=0;
   0679 C2*03              2237 	clr	_ack
                    067B   2238 	C$fb_lpc922.c$515$1$1 ==.
                           2239 ;	..\fb_lpc922.c:515: nack=0;
   067B C2*04              2240 	clr	_nack
                    067D   2241 	C$fb_lpc922.c$516$1$1 ==.
                           2242 ;	..\fb_lpc922.c:516: wait_for_ack=1;
   067D D2*0A              2243 	setb	_wait_for_ack
                    067F   2244 	C$fb_lpc922.c$517$1$1 ==.
                           2245 ;	..\fb_lpc922.c:517: fb_state=10;						// naechster state: senden
   067F 75*2A 0A           2246 	mov	_fb_state,#0x0A
                    0682   2247 	C$fb_lpc922.c$518$1$1 ==.
                           2248 ;	..\fb_lpc922.c:518: if (low_prio_time){
   0682 30*00 15           2249 	jnb	b0,00102$
                    0685   2250 	C$fb_lpc922.c$519$2$3 ==.
                           2251 ;	..\fb_lpc922.c:519: fb_state=9;
   0685 75*2A 09           2252 	mov	_fb_state,#0x09
                    0688   2253 	C$fb_lpc922.c$520$2$3 ==.
                           2254 ;	..\fb_lpc922.c:520: TR1=0;
   0688 C2 8E              2255 	clr	_TCON_6
                    068A   2256 	C$fb_lpc922.c$521$2$3 ==.
                           2257 ;	..\fb_lpc922.c:521: TMOD=(TMOD & 0x0F) +0x10;	// Timer 1 als 16-Bit Timer
   068A 74 0F              2258 	mov	a,#0x0F
   068C 55 89              2259 	anl	a,_TMOD
   068E 24 10              2260 	add	a,#0x10
   0690 F5 89              2261 	mov	_TMOD,a
                    0692   2262 	C$fb_lpc922.c$522$2$3 ==.
                           2263 ;	..\fb_lpc922.c:522: TH1=0xFB;					// Timer 1 auf Low Prio Abstand setzen (3 Bit Pause = 312Âµs
   0692 75 8D FB           2264 	mov	_TH1,#0xFB
                    0695   2265 	C$fb_lpc922.c$523$2$3 ==.
                           2266 ;	..\fb_lpc922.c:523: TL1=0x90;
   0695 75 8B 90           2267 	mov	_TL1,#0x90
                    0698   2268 	C$fb_lpc922.c$524$2$3 ==.
                           2269 ;	..\fb_lpc922.c:524: TR1=1;
   0698 D2 8E              2270 	setb	_TCON_6
   069A                    2271 00102$:
                    069A   2272 	C$fb_lpc922.c$526$1$1 ==.
                           2273 ;	..\fb_lpc922.c:526: fb_pattern=0;						// naechstes zu sendendes Bit, 0=Startbit
   069A 75*29 00           2274 	mov	_fb_pattern,#0x00
                    069D   2275 	C$fb_lpc922.c$527$1$1 ==.
                           2276 ;	..\fb_lpc922.c:527: telpos=0;							// naechstes zu sendende Byte
   069D 75*26 00           2277 	mov	_telpos,#0x00
                    06A0   2278 	C$fb_lpc922.c$528$1$1 ==.
                           2279 ;	..\fb_lpc922.c:528: EX1=0;								// ext. int1 inaktiv
   06A0 C2 AA              2280 	clr	_IEN0_2
                    06A2   2281 	C$fb_lpc922.c$529$1$1 ==.
                           2282 ;	..\fb_lpc922.c:529: TR1=1;								// Timer 1 starten
   06A2 D2 8E              2283 	setb	_TCON_6
                    06A4   2284 	C$fb_lpc922.c$530$1$1 ==.
                           2285 ;	..\fb_lpc922.c:530: ET1=1;								// Timer 1 int. aktiv
   06A4 D2 AB              2286 	setb	_IEN0_3
                    06A6   2287 	C$fb_lpc922.c$531$1$1 ==.
                    06A6   2288 	XG$init_tx$0$0 ==.
   06A6 22                 2289 	ret
                           2290 ;------------------------------------------------------------
                           2291 ;Allocation info for local variables in function 'gapos_in_gat'
                           2292 ;------------------------------------------------------------
                           2293 ;gal                       Allocated to stack - _bp -3
                           2294 ;gah                       Allocated to registers r7 
                           2295 ;ga_position               Allocated to registers r6 
                           2296 ;n                         Allocated to registers r5 
                           2297 ;------------------------------------------------------------
                    06A7   2298 	G$gapos_in_gat$0$0 ==.
                    06A7   2299 	C$fb_lpc922.c$538$1$1 ==.
                           2300 ;	..\fb_lpc922.c:538: unsigned char gapos_in_gat(unsigned char gah, unsigned char gal)
                           2301 ;	-----------------------------------------
                           2302 ;	 function gapos_in_gat
                           2303 ;	-----------------------------------------
   06A7                    2304 _gapos_in_gat:
   06A7 C0*00              2305 	push	_bp
   06A9 85 81*00           2306 	mov	_bp,sp
   06AC AF 82              2307 	mov	r7,dpl
                    06AE   2308 	C$fb_lpc922.c$542$1$1 ==.
                           2309 ;	..\fb_lpc922.c:542: ga_position=0xFF; 			// default return Wert 0xFF = nicht gefunden
   06AE 7E FF              2310 	mov	r6,#0xFF
                    06B0   2311 	C$fb_lpc922.c$543$1$1 ==.
                           2312 ;	..\fb_lpc922.c:543: if (eeprom[ADDRTAB]<0xFF){ // && !transparency
   06B0 90 1D 16           2313 	mov	dptr,#(_eeprom + 0x0016)
   06B3 E4                 2314 	clr	a
   06B4 93                 2315 	movc	a,@a+dptr
   06B5 FD                 2316 	mov	r5,a
   06B6 BD FF 00           2317 	cjne	r5,#0xFF,00121$
   06B9                    2318 00121$:
   06B9 50 35              2319 	jnc	00107$
                    06BB   2320 	C$fb_lpc922.c$544$2$2 ==.
                           2321 ;	..\fb_lpc922.c:544: if (eeprom[ADDRTAB]) {
   06BB 90 1D 16           2322 	mov	dptr,#(_eeprom + 0x0016)
   06BE E4                 2323 	clr	a
   06BF 93                 2324 	movc	a,@a+dptr
   06C0 60 2E              2325 	jz	00107$
                    06C2   2326 	C$fb_lpc922.c$545$3$3 ==.
                           2327 ;	..\fb_lpc922.c:545: for (n=eeprom[ADDRTAB]-1;n;n--) {
   06C2 90 1D 16           2328 	mov	dptr,#(_eeprom + 0x0016)
   06C5 E4                 2329 	clr	a
   06C6 93                 2330 	movc	a,@a+dptr
   06C7 FD                 2331 	mov	r5,a
   06C8 1D                 2332 	dec	r5
   06C9                    2333 00108$:
   06C9 ED                 2334 	mov	a,r5
   06CA 60 24              2335 	jz	00107$
                    06CC   2336 	C$fb_lpc922.c$546$4$4 ==.
                           2337 ;	..\fb_lpc922.c:546: if (gah==eeprom[ADDRTAB+n*2+1] && gal==eeprom[ADDRTAB+n*2+2])
   06CC ED                 2338 	mov	a,r5
   06CD 2D                 2339 	add	a,r5
   06CE FC                 2340 	mov	r4,a
   06CF 24 17              2341 	add	a,#0x17
   06D1 90 1D 00           2342 	mov	dptr,#_eeprom
   06D4 93                 2343 	movc	a,@a+dptr
   06D5 FB                 2344 	mov	r3,a
   06D6 EF                 2345 	mov	a,r7
   06D7 B5 03 13           2346 	cjne	a,ar3,00110$
   06DA 74 18              2347 	mov	a,#0x18
   06DC 2C                 2348 	add	a,r4
   06DD 90 1D 00           2349 	mov	dptr,#_eeprom
   06E0 93                 2350 	movc	a,@a+dptr
   06E1 FC                 2351 	mov	r4,a
   06E2 E5*00              2352 	mov	a,_bp
   06E4 24 FD              2353 	add	a,#0xfd
   06E6 F8                 2354 	mov	r0,a
   06E7 E6                 2355 	mov	a,@r0
   06E8 B5 04 02           2356 	cjne	a,ar4,00110$
                    06EB   2357 	C$fb_lpc922.c$547$4$4 ==.
                           2358 ;	..\fb_lpc922.c:547: ga_position=n;
   06EB 8D 06              2359 	mov	ar6,r5
   06ED                    2360 00110$:
                    06ED   2361 	C$fb_lpc922.c$545$3$3 ==.
                           2362 ;	..\fb_lpc922.c:545: for (n=eeprom[ADDRTAB]-1;n;n--) {
   06ED 1D                 2363 	dec	r5
   06EE 80 D9              2364 	sjmp	00108$
   06F0                    2365 00107$:
                    06F0   2366 	C$fb_lpc922.c$551$1$1 ==.
                           2367 ;	..\fb_lpc922.c:551: return (ga_position);
   06F0 8E 82              2368 	mov	dpl,r6
   06F2 D0*00              2369 	pop	_bp
                    06F4   2370 	C$fb_lpc922.c$552$1$1 ==.
                    06F4   2371 	XG$gapos_in_gat$0$0 ==.
   06F4 22                 2372 	ret
                           2373 ;------------------------------------------------------------
                           2374 ;Allocation info for local variables in function 'send_obj_value'
                           2375 ;------------------------------------------------------------
                           2376 ;objno                     Allocated to registers r7 
                           2377 ;success                   Allocated to registers b0 
                           2378 ;------------------------------------------------------------
                    06F5   2379 	G$send_obj_value$0$0 ==.
                    06F5   2380 	C$fb_lpc922.c$559$1$1 ==.
                           2381 ;	..\fb_lpc922.c:559: __bit send_obj_value(unsigned char objno)
                           2382 ;	-----------------------------------------
                           2383 ;	 function send_obj_value
                           2384 ;	-----------------------------------------
   06F5                    2385 _send_obj_value:
   06F5 AF 82              2386 	mov	r7,dpl
                    06F7   2387 	C$fb_lpc922.c$561$1$1 ==.
                           2388 ;	..\fb_lpc922.c:561: __bit success=0;
   06F7 C2*00              2389 	clr	b0
                    06F9   2390 	C$fb_lpc922.c$563$1$1 ==.
                           2391 ;	..\fb_lpc922.c:563: if (objno < 0x40 && (read_objflags(objno) & 0x44) != 0x44)
   06F9 BF 40 00           2392 	cjne	r7,#0x40,00112$
   06FC                    2393 00112$:
   06FC 50 1B              2394 	jnc	00104$
   06FE 8F 82              2395 	mov	dpl,r7
   0700 C0 07              2396 	push	ar7
   0702 C0*00              2397 	push	bits
   0704 12s0Ar33           2398 	lcall	_read_objflags
   0707 E5 82              2399 	mov	a,dpl
   0709 D0*00              2400 	pop	bits
   070B D0 07              2401 	pop	ar7
   070D 54 44              2402 	anl	a,#0x44
   070F FE                 2403 	mov	r6,a
   0710 BE 44 02           2404 	cjne	r6,#0x44,00114$
   0713 80 04              2405 	sjmp	00104$
   0715                    2406 00114$:
                    0715   2407 	C$fb_lpc922.c$565$2$2 ==.
                           2408 ;	..\fb_lpc922.c:565: success=1;
   0715 D2*00              2409 	setb	b0
   0717 80 2A              2410 	sjmp	00105$
   0719                    2411 00104$:
                    0719   2412 	C$fb_lpc922.c$567$1$1 ==.
                           2413 ;	..\fb_lpc922.c:567: else if(tx_nextsend!=((tx_nextwrite+1)&0x07)) {
   0719 AD*2C              2414 	mov	r5,_tx_nextwrite
   071B 7E 00              2415 	mov	r6,#0x00
   071D 0D                 2416 	inc	r5
   071E BD 00 01           2417 	cjne	r5,#0x00,00115$
   0721 0E                 2418 	inc	r6
   0722                    2419 00115$:
   0722 53 05 07           2420 	anl	ar5,#0x07
   0725 7E 00              2421 	mov	r6,#0x00
   0727 AB*2D              2422 	mov	r3,_tx_nextsend
   0729 7C 00              2423 	mov	r4,#0x00
   072B EB                 2424 	mov	a,r3
   072C B5 05 06           2425 	cjne	a,ar5,00116$
   072F EC                 2426 	mov	a,r4
   0730 B5 06 02           2427 	cjne	a,ar6,00116$
   0733 80 0E              2428 	sjmp	00105$
   0735                    2429 00116$:
                    0735   2430 	C$fb_lpc922.c$568$2$3 ==.
                           2431 ;	..\fb_lpc922.c:568: tx_buffer[tx_nextwrite]=objno;
   0735 E5*2C              2432 	mov	a,_tx_nextwrite
   0737 24r1E              2433 	add	a,#_tx_buffer
   0739 F8                 2434 	mov	r0,a
   073A A6 07              2435 	mov	@r0,ar7
                    073C   2436 	C$fb_lpc922.c$569$2$3 ==.
                           2437 ;	..\fb_lpc922.c:569: tx_nextwrite++;
   073C 05*2C              2438 	inc	_tx_nextwrite
                    073E   2439 	C$fb_lpc922.c$570$2$3 ==.
                           2440 ;	..\fb_lpc922.c:570: tx_nextwrite&=0x07;
   073E 53*2C 07           2441 	anl	_tx_nextwrite,#0x07
                    0741   2442 	C$fb_lpc922.c$571$2$3 ==.
                           2443 ;	..\fb_lpc922.c:571: success=1;
   0741 D2*00              2444 	setb	b0
   0743                    2445 00105$:
                    0743   2446 	C$fb_lpc922.c$574$1$1 ==.
                           2447 ;	..\fb_lpc922.c:574: TR1=1;	// statemachine starten falls vorher in state 0 gestoppt
   0743 D2 8E              2448 	setb	_TCON_6
                    0745   2449 	C$fb_lpc922.c$575$1$1 ==.
                           2450 ;	..\fb_lpc922.c:575: return(success);
   0745 A2*00              2451 	mov	c,b0
                    0747   2452 	C$fb_lpc922.c$576$1$1 ==.
                    0747   2453 	XG$send_obj_value$0$0 ==.
   0747 22                 2454 	ret
                           2455 ;------------------------------------------------------------
                           2456 ;Allocation info for local variables in function 'process_tel'
                           2457 ;------------------------------------------------------------
                           2458 ;tpdu                      Allocated to registers r6 
                           2459 ;apdu                      Allocated to stack - _bp +1
                           2460 ;ab                        Allocated to registers r7 
                           2461 ;n                         Allocated to stack - _bp +2
                           2462 ;objno                     Allocated to registers r3 
                           2463 ;objflags                  Allocated to registers r2 
                           2464 ;gapos                     Allocated to registers r7 
                           2465 ;atp                       Allocated to registers r6 
                           2466 ;assmax                    Allocated to registers r5 
                           2467 ;asspos                    Allocated to registers r6 
                           2468 ;sloc0                     Allocated to stack - _bp +11
                           2469 ;sloc1                     Allocated to stack - _bp +12
                           2470 ;sloc2                     Allocated to stack - _bp +3
                           2471 ;------------------------------------------------------------
                    0748   2472 	G$process_tel$0$0 ==.
                    0748   2473 	C$fb_lpc922.c$581$1$1 ==.
                           2474 ;	..\fb_lpc922.c:581: void process_tel(void)
                           2475 ;	-----------------------------------------
                           2476 ;	 function process_tel
                           2477 ;	-----------------------------------------
   0748                    2478 _process_tel:
   0748 C0*00              2479 	push	_bp
   074A E5 81              2480 	mov	a,sp
   074C F5*00              2481 	mov	_bp,a
   074E 24 04              2482 	add	a,#0x04
   0750 F5 81              2483 	mov	sp,a
                    0752   2484 	C$fb_lpc922.c$586$1$1 ==.
                           2485 ;	..\fb_lpc922.c:586: tel_arrived=0;
   0752 C2*06              2486 	clr	_tel_arrived
                    0754   2487 	C$fb_lpc922.c$587$1$1 ==.
                           2488 ;	..\fb_lpc922.c:587: tpdu=telegramm[6]&0xC3;
   0754 AF*0D              2489 	mov	r7,(_telegramm + 0x0006)
   0756 74 C3              2490 	mov	a,#0xC3
   0758 5F                 2491 	anl	a,r7
   0759 FE                 2492 	mov	r6,a
                    075A   2493 	C$fb_lpc922.c$588$1$1 ==.
                           2494 ;	..\fb_lpc922.c:588: apdu=telegramm[7];
   075A A8*00              2495 	mov	r0,_bp
   075C 08                 2496 	inc	r0
   075D A6*0E              2497 	mov	@r0,(_telegramm + 0x0007)
                    075F   2498 	C$fb_lpc922.c$591$1$1 ==.
                           2499 ;	..\fb_lpc922.c:591: if(telegramm[3]==0 && telegramm[4]==0) {	// nur wenn wenn Zieladresse = 0
   075F E5*0A              2500 	mov	a,(_telegramm + 0x0003)
   0761 FC                 2501 	mov	r4,a
   0762 70 49              2502 	jnz	00169$
   0764 E5*0B              2503 	mov	a,(_telegramm + 0x0004)
   0766 70 45              2504 	jnz	00169$
                    0768   2505 	C$fb_lpc922.c$592$2$2 ==.
                           2506 ;	..\fb_lpc922.c:592: if(status60 & 0x01) {					// und nur im prog mode
   0768 E5*2E              2507 	mov	a,_status60
   076A 20 E0 03           2508 	jb	acc.0,00222$
   076D 02s0Ar2D           2509 	ljmp	00176$
   0770                    2510 00222$:
                    0770   2511 	C$fb_lpc922.c$593$3$3 ==.
                           2512 ;	..\fb_lpc922.c:593: if(tpdu==BROADCAST_PDU_SET_PA_REQ && apdu==SET_PHYSADDR_REQUEST) //set_pa();				// 00000000 11000000
   0770 EE                 2513 	mov	a,r6
   0771 70 20              2514 	jnz	00105$
   0773 A8*00              2515 	mov	r0,_bp
   0775 08                 2516 	inc	r0
   0776 B6 C0 1A           2517 	cjne	@r0,#0xC0,00105$
                    0779   2518 	C$fb_lpc922.c$596$4$4 ==.
                           2519 ;	..\fb_lpc922.c:596: while(fb_state!=0);		// warten falls noch gesendet wird
   0779                    2520 00101$:
   0779 E5*2A              2521 	mov	a,_fb_state
   077B 70 FC              2522 	jnz	00101$
                    077D   2523 	C$fb_lpc922.c$597$4$4 ==.
                           2524 ;	..\fb_lpc922.c:597: EA=0;
   077D C2 AF              2525 	clr	_IEN0_7
                    077F   2526 	C$fb_lpc922.c$598$4$4 ==.
                           2527 ;	..\fb_lpc922.c:598: FMCON=0x00;				// load command, leert das pageregister
   077F 75 E4 00           2528 	mov	_FMCON,#0x00
                    0782   2529 	C$fb_lpc922.c$599$4$4 ==.
                           2530 ;	..\fb_lpc922.c:599: FMADRH=EEPROM_ADDR_H;	// 0x1D bei 922;
   0782 75 E7 1D           2531 	mov	_FMADRH,#0x1D
                    0785   2532 	C$fb_lpc922.c$600$4$4 ==.
                           2533 ;	..\fb_lpc922.c:600: FMADRL=ADDRTAB+1;
   0785 75 E6 17           2534 	mov	_FMADRL,#0x17
                    0788   2535 	C$fb_lpc922.c$601$4$4 ==.
                           2536 ;	..\fb_lpc922.c:601: FMDATA=telegramm[8];
   0788 85*0F E5           2537 	mov	_FMDATA,(_telegramm + 0x0008)
                    078B   2538 	C$fb_lpc922.c$602$4$4 ==.
                           2539 ;	..\fb_lpc922.c:602: FMDATA=telegramm[9];	// naechstes Byte, da autoinkrement
   078B 85*10 E5           2540 	mov	_FMDATA,(_telegramm + 0x0009)
                    078E   2541 	C$fb_lpc922.c$603$4$4 ==.
                           2542 ;	..\fb_lpc922.c:603: FMCON=0x68;				// write command, schreibt pageregister ins flash und versetzt CPU in idle fuer 4ms
   078E 75 E4 68           2543 	mov	_FMCON,#0x68
                    0791   2544 	C$fb_lpc922.c$604$4$4 ==.
                           2545 ;	..\fb_lpc922.c:604: EA=1;
   0791 D2 AF              2546 	setb	_IEN0_7
   0793                    2547 00105$:
                    0793   2548 	C$fb_lpc922.c$611$3$3 ==.
                           2549 ;	..\fb_lpc922.c:611: if(tpdu==BROADCAST_PDU_READ_PA && apdu==READ_PHYSADDR_REQUEST) send_obj_value(READ_PHYSADDR_RESPONSE);	// 00000001 00000000
   0793 BE 01 02           2550 	cjne	r6,#0x01,00227$
   0796 80 03              2551 	sjmp	00228$
   0798                    2552 00227$:
   0798 02s0Ar2D           2553 	ljmp	00176$
   079B                    2554 00228$:
   079B A8*00              2555 	mov	r0,_bp
   079D 08                 2556 	inc	r0
   079E E6                 2557 	mov	a,@r0
   079F 60 03              2558 	jz	00229$
   07A1 02s0Ar2D           2559 	ljmp	00176$
   07A4                    2560 00229$:
   07A4 75 82 83           2561 	mov	dpl,#0x83
   07A7 12s06rF5           2562 	lcall	_send_obj_value
   07AA 02s0Ar2D           2563 	ljmp	00176$
   07AD                    2564 00169$:
                    07AD   2565 	C$fb_lpc922.c$616$2$5 ==.
                           2566 ;	..\fb_lpc922.c:616: if((telegramm[5]&0x80)==0x00) {	// Destination Adress Flag Bit 7, 0=phys. Adr., 1=Gruppenadr.
   07AD E5*0C              2567 	mov	a,(_telegramm + 0x0005)
   07AF 30 E7 03           2568 	jnb	acc.7,00230$
   07B2 02s09r78           2569 	ljmp	00166$
   07B5                    2570 00230$:
                    07B5   2571 	C$fb_lpc922.c$617$3$6 ==.
                           2572 ;	..\fb_lpc922.c:617: if(telegramm[3]==eeprom[ADDRTAB+1] && telegramm[4]==eeprom[ADDRTAB+2]) {	// nur wenn es die eigene phys. Adr. ist
   07B5 90 1D 17           2573 	mov	dptr,#(_eeprom + 0x0017)
   07B8 E4                 2574 	clr	a
   07B9 93                 2575 	movc	a,@a+dptr
   07BA FB                 2576 	mov	r3,a
   07BB EC                 2577 	mov	a,r4
   07BC B5 03 02           2578 	cjne	a,ar3,00231$
   07BF 80 03              2579 	sjmp	00232$
   07C1                    2580 00231$:
   07C1 02s0Ar2D           2581 	ljmp	00176$
   07C4                    2582 00232$:
   07C4 90 1D 18           2583 	mov	dptr,#(_eeprom + 0x0018)
   07C7 E4                 2584 	clr	a
   07C8 93                 2585 	movc	a,@a+dptr
   07C9 FB                 2586 	mov	r3,a
   07CA B5*0B 02           2587 	cjne	a,(_telegramm + 0x0004),00233$
   07CD 80 03              2588 	sjmp	00234$
   07CF                    2589 00233$:
   07CF 02s0Ar2D           2590 	ljmp	00176$
   07D2                    2591 00234$:
                    07D2   2592 	C$fb_lpc922.c$618$4$7 ==.
                           2593 ;	..\fb_lpc922.c:618: connected_timeout=0;//wenn ein unicast uns betrifft den timeout ruecksetzen
   07D2 75*2F 00           2594 	mov	_connected_timeout,#0x00
                    07D5   2595 	C$fb_lpc922.c$621$4$7 ==.
                           2596 ;	..\fb_lpc922.c:621: switch (tpdu) {	// transport layer control field
   07D5 BE 42 02           2597 	cjne	r6,#0x42,00235$
   07D8 80 1B              2598 	sjmp	00112$
   07DA                    2599 00235$:
   07DA BE 43 03           2600 	cjne	r6,#0x43,00236$
   07DD 02s09r0C           2601 	ljmp	00130$
   07E0                    2602 00236$:
   07E0 BE 80 03           2603 	cjne	r6,#0x80,00237$
   07E3 02s09r32           2604 	ljmp	00135$
   07E6                    2605 00237$:
   07E6 BE 81 03           2606 	cjne	r6,#0x81,00238$
   07E9 02s09r54           2607 	ljmp	00138$
   07EC                    2608 00238$:
   07EC BE 83 03           2609 	cjne	r6,#0x83,00239$
   07EF 02s09r6D           2610 	ljmp	00142$
   07F2                    2611 00239$:
   07F2 02s0Ar2D           2612 	ljmp	00176$
                    07F5   2613 	C$fb_lpc922.c$631$5$8 ==.
                           2614 ;	..\fb_lpc922.c:631: case DATA_PDU_MEMORY_OPERATIONS:
   07F5                    2615 00112$:
                    07F5   2616 	C$fb_lpc922.c$632$5$8 ==.
                           2617 ;	..\fb_lpc922.c:632: if(connected){
   07F5 20*0D 03           2618 	jb	_connected,00240$
   07F8 02s0Ar2D           2619 	ljmp	00176$
   07FB                    2620 00240$:
                    07FB   2621 	C$fb_lpc922.c$633$6$9 ==.
                           2622 ;	..\fb_lpc922.c:633: senders_pcount=telegramm[6]&0x3C;
   07FB 74 3C              2623 	mov	a,#0x3C
   07FD 5F                 2624 	anl	a,r7
   07FE F5*06              2625 	mov	_senders_pcount,a
                    0800   2626 	C$fb_lpc922.c$634$6$9 ==.
                           2627 ;	..\fb_lpc922.c:634: apdu &= 0xF0;						// da bei memory operations nur obere 4 Bits aktiv
   0800 A8*00              2628 	mov	r0,_bp
   0802 08                 2629 	inc	r0
   0803 E6                 2630 	mov	a,@r0
   0804 54 F0              2631 	anl	a,#0xF0
   0806 F6                 2632 	mov	@r0,a
                    0807   2633 	C$fb_lpc922.c$635$6$9 ==.
                           2634 ;	..\fb_lpc922.c:635: if(apdu==WRITE_MEMORY_REQUEST) {	// 01pppp10 1000xxxx
   0807 A8*00              2635 	mov	r0,_bp
   0809 08                 2636 	inc	r0
   080A B6 80 02           2637 	cjne	@r0,#0x80,00241$
   080D 80 03              2638 	sjmp	00242$
   080F                    2639 00241$:
   080F 02s08rEB           2640 	ljmp	00125$
   0812                    2641 00242$:
                    0812   2642 	C$fb_lpc922.c$636$7$10 ==.
                           2643 ;	..\fb_lpc922.c:636: send_obj_value(NCD_ACK);
   0812 75 82 81           2644 	mov	dpl,#0x81
   0815 12s06rF5           2645 	lcall	_send_obj_value
                    0818   2646 	C$fb_lpc922.c$639$8$11 ==.
                           2647 ;	..\fb_lpc922.c:639: ab=telegramm[7]&0x0F;		// Anzahl Bytes
   0818 74 0F              2648 	mov	a,#0x0F
   081A 55*0E              2649 	anl	a,(_telegramm + 0x0007)
   081C FF                 2650 	mov	r7,a
                    081D   2651 	C$fb_lpc922.c$641$8$11 ==.
                           2652 ;	..\fb_lpc922.c:641: while(fb_state!=0);					// warten falls noch gesendet wird
   081D                    2653 00113$:
   081D E5*2A              2654 	mov	a,_fb_state
   081F 70 FC              2655 	jnz	00113$
                    0821   2656 	C$fb_lpc922.c$643$8$11 ==.
                           2657 ;	..\fb_lpc922.c:643: EA=0;
   0821 C2 AF              2658 	clr	_IEN0_7
                    0823   2659 	C$fb_lpc922.c$644$8$11 ==.
                           2660 ;	..\fb_lpc922.c:644: START_WRITECYCLE;					// load command, leert das pageregister
   0823 75 E4 00           2661 	mov	_FMCON,#0x00
                    0826   2662 	C$fb_lpc922.c$645$9$12 ==.
                           2663 ;	..\fb_lpc922.c:645: for(n=0;n<ab;n++) {
   0826 AA*0F              2664 	mov	r2,(_telegramm + 0x0008)
   0828 74 01              2665 	mov	a,#0x01
   082A 5A                 2666 	anl	a,r2
   082B 24 1C              2667 	add	a,#0x1C
   082D FC                 2668 	mov	r4,a
   082E AE*10              2669 	mov	r6,(_telegramm + 0x0009)
   0830 A8*00              2670 	mov	r0,_bp
   0832 08                 2671 	inc	r0
   0833 08                 2672 	inc	r0
   0834 76 00              2673 	mov	@r0,#0x00
   0836                    2674 00172$:
   0836 A8*00              2675 	mov	r0,_bp
   0838 08                 2676 	inc	r0
   0839 08                 2677 	inc	r0
   083A C3                 2678 	clr	c
   083B E6                 2679 	mov	a,@r0
   083C 9F                 2680 	subb	a,r7
   083D 40 03              2681 	jc	00244$
   083F 02s08rE6           2682 	ljmp	00175$
   0842                    2683 00244$:
                    0842   2684 	C$fb_lpc922.c$646$9$12 ==.
                           2685 ;	..\fb_lpc922.c:646: if(telegramm[8]==0)
   0842 EA                 2686 	mov	a,r2
   0843 70 3C              2687 	jnz	00119$
                    0845   2688 	C$fb_lpc922.c$648$1$1 ==.
                           2689 ;	..\fb_lpc922.c:648: if((telegramm[9]+n)==0x60) status60=telegramm[10+n];
   0845 C0 02              2690 	push	ar2
   0847 E5*00              2691 	mov	a,_bp
   0849 24 03              2692 	add	a,#0x03
   084B F8                 2693 	mov	r0,a
   084C A6 06              2694 	mov	@r0,ar6
   084E 08                 2695 	inc	r0
   084F 76 00              2696 	mov	@r0,#0x00
   0851 A8*00              2697 	mov	r0,_bp
   0853 08                 2698 	inc	r0
   0854 08                 2699 	inc	r0
   0855 86 03              2700 	mov	ar3,@r0
   0857 7D 00              2701 	mov	r5,#0x00
   0859 E5*00              2702 	mov	a,_bp
   085B 24 03              2703 	add	a,#0x03
   085D F8                 2704 	mov	r0,a
   085E EB                 2705 	mov	a,r3
   085F 26                 2706 	add	a,@r0
   0860 FB                 2707 	mov	r3,a
   0861 ED                 2708 	mov	a,r5
   0862 08                 2709 	inc	r0
   0863 36                 2710 	addc	a,@r0
   0864 FD                 2711 	mov	r5,a
   0865 BB 60 05           2712 	cjne	r3,#0x60,00246$
   0868 BD 00 02           2713 	cjne	r5,#0x00,00246$
   086B 80 04              2714 	sjmp	00247$
   086D                    2715 00246$:
   086D D0 02              2716 	pop	ar2
   086F 80 26              2717 	sjmp	00120$
   0871                    2718 00247$:
   0871 D0 02              2719 	pop	ar2
   0873 A8*00              2720 	mov	r0,_bp
   0875 08                 2721 	inc	r0
   0876 08                 2722 	inc	r0
   0877 74 0A              2723 	mov	a,#0x0A
   0879 26                 2724 	add	a,@r0
   087A 24r07              2725 	add	a,#_telegramm
   087C F9                 2726 	mov	r1,a
   087D 87*2E              2727 	mov	_status60,@r1
   087F 80 16              2728 	sjmp	00120$
   0881                    2729 00119$:
                    0881   2730 	C$fb_lpc922.c$659$10$14 ==.
                           2731 ;	..\fb_lpc922.c:659: WRITE_BYTE(telegramm[8],telegramm[9]+n,telegramm[n+10]);
   0881 8C E7              2732 	mov	_FMADRH,r4
   0883 A8*00              2733 	mov	r0,_bp
   0885 08                 2734 	inc	r0
   0886 08                 2735 	inc	r0
   0887 E6                 2736 	mov	a,@r0
   0888 2E                 2737 	add	a,r6
   0889 F5 E6              2738 	mov	_FMADRL,a
   088B A8*00              2739 	mov	r0,_bp
   088D 08                 2740 	inc	r0
   088E 08                 2741 	inc	r0
   088F 74 0A              2742 	mov	a,#0x0A
   0891 26                 2743 	add	a,@r0
   0892 24r07              2744 	add	a,#_telegramm
   0894 F9                 2745 	mov	r1,a
   0895 87 E5              2746 	mov	_FMDATA,@r1
   0897                    2747 00120$:
                    0897   2748 	C$fb_lpc922.c$661$9$12 ==.
                           2749 ;	..\fb_lpc922.c:661: if ((((telegramm[9]+n)&0x3F)==0x3F) && n!=(ab-1)) {		// Ende des 64-Byte Pageregisters, also zwischendurch flashen
   0897 8E 03              2750 	mov	ar3,r6
   0899 7D 00              2751 	mov	r5,#0x00
   089B A8*00              2752 	mov	r0,_bp
   089D 08                 2753 	inc	r0
   089E 08                 2754 	inc	r0
   089F E5*00              2755 	mov	a,_bp
   08A1 24 03              2756 	add	a,#0x03
   08A3 F9                 2757 	mov	r1,a
   08A4 E6                 2758 	mov	a,@r0
   08A5 F7                 2759 	mov	@r1,a
   08A6 09                 2760 	inc	r1
   08A7 77 00              2761 	mov	@r1,#0x00
   08A9 E5*00              2762 	mov	a,_bp
   08AB 24 03              2763 	add	a,#0x03
   08AD F8                 2764 	mov	r0,a
   08AE E6                 2765 	mov	a,@r0
   08AF 2B                 2766 	add	a,r3
   08B0 FB                 2767 	mov	r3,a
   08B1 08                 2768 	inc	r0
   08B2 E6                 2769 	mov	a,@r0
   08B3 3D                 2770 	addc	a,r5
   08B4 53 03 3F           2771 	anl	ar3,#0x3F
   08B7 7D 00              2772 	mov	r5,#0x00
   08B9 BB 3F 22           2773 	cjne	r3,#0x3F,00174$
   08BC BD 00 1F           2774 	cjne	r5,#0x00,00174$
   08BF 8F 03              2775 	mov	ar3,r7
   08C1 7D 00              2776 	mov	r5,#0x00
   08C3 1B                 2777 	dec	r3
   08C4 BB FF 01           2778 	cjne	r3,#0xFF,00250$
   08C7 1D                 2779 	dec	r5
   08C8                    2780 00250$:
   08C8 E5*00              2781 	mov	a,_bp
   08CA 24 03              2782 	add	a,#0x03
   08CC F8                 2783 	mov	r0,a
   08CD E6                 2784 	mov	a,@r0
   08CE B5 03 07           2785 	cjne	a,ar3,00251$
   08D1 08                 2786 	inc	r0
   08D2 E6                 2787 	mov	a,@r0
   08D3 B5 05 02           2788 	cjne	a,ar5,00251$
   08D6 80 06              2789 	sjmp	00174$
   08D8                    2790 00251$:
                    08D8   2791 	C$fb_lpc922.c$662$10$15 ==.
                           2792 ;	..\fb_lpc922.c:662: STOP_WRITECYCLE;			// write command, schreibt pageregister ins flash und versetzt CPU in idle fuer 4ms
   08D8 75 E4 68           2793 	mov	_FMCON,#0x68
                    08DB   2794 	C$fb_lpc922.c$663$10$15 ==.
                           2795 ;	..\fb_lpc922.c:663: START_WRITECYCLE;		// load command, leert das pageregister
   08DB 75 E4 00           2796 	mov	_FMCON,#0x00
   08DE                    2797 00174$:
                    08DE   2798 	C$fb_lpc922.c$645$8$11 ==.
                           2799 ;	..\fb_lpc922.c:645: for(n=0;n<ab;n++) {
   08DE A8*00              2800 	mov	r0,_bp
   08E0 08                 2801 	inc	r0
   08E1 08                 2802 	inc	r0
   08E2 06                 2803 	inc	@r0
   08E3 02s08r36           2804 	ljmp	00172$
   08E6                    2805 00175$:
                    08E6   2806 	C$fb_lpc922.c$666$8$11 ==.
                           2807 ;	..\fb_lpc922.c:666: STOP_WRITECYCLE;					// write command, schreibt pageregister ins flash und versetzt CPU in idle fuer 4ms
   08E6 75 E4 68           2808 	mov	_FMCON,#0x68
                    08E9   2809 	C$fb_lpc922.c$667$8$11 ==.
                           2810 ;	..\fb_lpc922.c:667: EA=1;
   08E9 D2 AF              2811 	setb	_IEN0_7
   08EB                    2812 00125$:
                    08EB   2813 	C$fb_lpc922.c$670$6$9 ==.
                           2814 ;	..\fb_lpc922.c:670: if(apdu==READ_MEMORY_REQUEST) {		// 01pppp10 0000xxxx
   08EB A8*00              2815 	mov	r0,_bp
   08ED 08                 2816 	inc	r0
   08EE E6                 2817 	mov	a,@r0
   08EF 60 03              2818 	jz	00252$
   08F1 02s0Ar2D           2819 	ljmp	00176$
   08F4                    2820 00252$:
                    08F4   2821 	C$fb_lpc922.c$671$7$16 ==.
                           2822 ;	..\fb_lpc922.c:671: mem_length=telegramm[7];		// Anzahl Bytes fuer spaeteres(!) memory Auslesen
   08F4 85*0E*03           2823 	mov	_mem_length,(_telegramm + 0x0007)
                    08F7   2824 	C$fb_lpc922.c$672$7$16 ==.
                           2825 ;	..\fb_lpc922.c:672: mem_adrh = telegramm[8];		// Adresse
   08F7 85*0F*04           2826 	mov	_mem_adrh,(_telegramm + 0x0008)
                    08FA   2827 	C$fb_lpc922.c$673$7$16 ==.
                           2828 ;	..\fb_lpc922.c:673: mem_adrl = telegramm[9];
   08FA 85*10*05           2829 	mov	_mem_adrl,(_telegramm + 0x0009)
                    08FD   2830 	C$fb_lpc922.c$674$7$16 ==.
                           2831 ;	..\fb_lpc922.c:674: send_obj_value(NCD_ACK);
   08FD 75 82 81           2832 	mov	dpl,#0x81
   0900 12s06rF5           2833 	lcall	_send_obj_value
                    0903   2834 	C$fb_lpc922.c$675$7$16 ==.
                           2835 ;	..\fb_lpc922.c:675: send_obj_value(READ_MEMORY_RESPONSE);
   0903 75 82 84           2836 	mov	dpl,#0x84
   0906 12s06rF5           2837 	lcall	_send_obj_value
                    0909   2838 	C$fb_lpc922.c$678$5$8 ==.
                           2839 ;	..\fb_lpc922.c:678: break;
   0909 02s0Ar2D           2840 	ljmp	00176$
                    090C   2841 	C$fb_lpc922.c$680$5$8 ==.
                           2842 ;	..\fb_lpc922.c:680: case DATA_PDU_MISC_OPERATIONS:
   090C                    2843 00130$:
                    090C   2844 	C$fb_lpc922.c$681$5$8 ==.
                           2845 ;	..\fb_lpc922.c:681: senders_pcount=telegramm[6]&0x3C;
   090C 74 3C              2846 	mov	a,#0x3C
   090E 5F                 2847 	anl	a,r7
   090F F5*06              2848 	mov	_senders_pcount,a
                    0911   2849 	C$fb_lpc922.c$682$5$8 ==.
                           2850 ;	..\fb_lpc922.c:682: if(apdu==RESTART_REQUEST) {		// 01pppp11 10000000
   0911 A8*00              2851 	mov	r0,_bp
   0913 08                 2852 	inc	r0
   0914 B6 80 03           2853 	cjne	@r0,#0x80,00132$
                    0917   2854 	C$fb_lpc922.c$683$6$17 ==.
                           2855 ;	..\fb_lpc922.c:683: AUXR1|=0x08;				// Software Reset
   0917 43 A2 08           2856 	orl	_AUXR1,#0x08
   091A                    2857 00132$:
                    091A   2858 	C$fb_lpc922.c$685$5$8 ==.
                           2859 ;	..\fb_lpc922.c:685: if(apdu==READ_MASK_VERSION_REQUEST) {		// 01pppp11 00000000
   091A A8*00              2860 	mov	r0,_bp
   091C 08                 2861 	inc	r0
   091D E6                 2862 	mov	a,@r0
   091E 60 03              2863 	jz	00255$
   0920 02s0Ar2D           2864 	ljmp	00176$
   0923                    2865 00255$:
                    0923   2866 	C$fb_lpc922.c$686$6$18 ==.
                           2867 ;	..\fb_lpc922.c:686: send_obj_value(NCD_ACK);
   0923 75 82 81           2868 	mov	dpl,#0x81
   0926 12s06rF5           2869 	lcall	_send_obj_value
                    0929   2870 	C$fb_lpc922.c$687$6$18 ==.
                           2871 ;	..\fb_lpc922.c:687: send_obj_value(READ_MASK_VERSION_RESPONSE);
   0929 75 82 82           2872 	mov	dpl,#0x82
   092C 12s06rF5           2873 	lcall	_send_obj_value
                    092F   2874 	C$fb_lpc922.c$689$5$8 ==.
                           2875 ;	..\fb_lpc922.c:689: break;
   092F 02s0Ar2D           2876 	ljmp	00176$
                    0932   2877 	C$fb_lpc922.c$691$5$8 ==.
                           2878 ;	..\fb_lpc922.c:691: case CONNECT_PDU:	// 10000000 xxxxxxxx
   0932                    2879 00135$:
                    0932   2880 	C$fb_lpc922.c$692$5$8 ==.
                           2881 ;	..\fb_lpc922.c:692: if(!connected) {				// wenn bereits verbunden: ignorieren
   0932 30*0D 03           2882 	jnb	_connected,00256$
   0935 02s0Ar2D           2883 	ljmp	00176$
   0938                    2884 00256$:
                    0938   2885 	C$fb_lpc922.c$693$6$19 ==.
                           2886 ;	..\fb_lpc922.c:693: connected=1;
   0938 D2*0D              2887 	setb	_connected
                    093A   2888 	C$fb_lpc922.c$694$6$19 ==.
                           2889 ;	..\fb_lpc922.c:694: conh=telegramm[1];			// phys. Adresse des Verbindungspartners
   093A 85*08*00           2890 	mov	_conh,(_telegramm + 0x0001)
                    093D   2891 	C$fb_lpc922.c$695$6$19 ==.
                           2892 ;	..\fb_lpc922.c:695: conl=telegramm[2];
   093D 85*09*01           2893 	mov	_conl,(_telegramm + 0x0002)
                    0940   2894 	C$fb_lpc922.c$696$6$19 ==.
                           2895 ;	..\fb_lpc922.c:696: pcount=0;					// Paketzaehler zuruecksetzen
   0940 75*02 00           2896 	mov	_pcount,#0x00
                    0943   2897 	C$fb_lpc922.c$697$6$19 ==.
                           2898 ;	..\fb_lpc922.c:697: inc_pcount=0;
   0943 C2*0E              2899 	clr	_inc_pcount
                    0945   2900 	C$fb_lpc922.c$698$6$19 ==.
                           2901 ;	..\fb_lpc922.c:698: RTCCON=0x60;	//RTC stoppen
   0945 75 D1 60           2902 	mov	_RTCCON,#0x60
                    0948   2903 	C$fb_lpc922.c$699$6$19 ==.
                           2904 ;	..\fb_lpc922.c:699: RTCH=0x0B;      // reload Real Time Clock, 52ms
   0948 75 D2 0B           2905 	mov	_RTCH,#0x0B
                    094B   2906 	C$fb_lpc922.c$700$6$19 ==.
                           2907 ;	..\fb_lpc922.c:700: RTCL=0xB3;
   094B 75 D3 B3           2908 	mov	_RTCL,#0xB3
                    094E   2909 	C$fb_lpc922.c$701$6$19 ==.
                           2910 ;	..\fb_lpc922.c:701: RTCCON=0x61;	// RTC starten
   094E 75 D1 61           2911 	mov	_RTCCON,#0x61
                    0951   2912 	C$fb_lpc922.c$704$5$8 ==.
                           2913 ;	..\fb_lpc922.c:704: break;
   0951 02s0Ar2D           2914 	ljmp	00176$
                    0954   2915 	C$fb_lpc922.c$706$5$8 ==.
                           2916 ;	..\fb_lpc922.c:706: case DISCONNECT_PDU:	// 10000001 xxxxxxxx
   0954                    2917 00138$:
                    0954   2918 	C$fb_lpc922.c$707$5$8 ==.
                           2919 ;	..\fb_lpc922.c:707: if(conh==telegramm[1] && conl==telegramm[2] )	{	// nur abbauen, wenn verbunden und Anforderung vom Verbindungspartner, kein ACK senden
   0954 E5*08              2920 	mov	a,(_telegramm + 0x0001)
   0956 B5*00 02           2921 	cjne	a,_conh,00257$
   0959 80 03              2922 	sjmp	00258$
   095B                    2923 00257$:
   095B 02s0Ar2D           2924 	ljmp	00176$
   095E                    2925 00258$:
   095E E5*09              2926 	mov	a,(_telegramm + 0x0002)
   0960 B5*01 02           2927 	cjne	a,_conl,00259$
   0963 80 03              2928 	sjmp	00260$
   0965                    2929 00259$:
   0965 02s0Ar2D           2930 	ljmp	00176$
   0968                    2931 00260$:
                    0968   2932 	C$fb_lpc922.c$708$6$20 ==.
                           2933 ;	..\fb_lpc922.c:708: connected=0;// warum: && connected ???
   0968 C2*0D              2934 	clr	_connected
                    096A   2935 	C$fb_lpc922.c$710$5$8 ==.
                           2936 ;	..\fb_lpc922.c:710: break;
   096A 02s0Ar2D           2937 	ljmp	00176$
                    096D   2938 	C$fb_lpc922.c$712$5$8 ==.
                           2939 ;	..\fb_lpc922.c:712: case NACK_PDU:	// 11pppp11 xxxxxxxx
   096D                    2940 00142$:
                    096D   2941 	C$fb_lpc922.c$713$5$8 ==.
                           2942 ;	..\fb_lpc922.c:713: send_obj_value(T_DISCONNECT);
   096D 75 82 85           2943 	mov	dpl,#0x85
   0970 12s06rF5           2944 	lcall	_send_obj_value
                    0973   2945 	C$fb_lpc922.c$714$5$8 ==.
                           2946 ;	..\fb_lpc922.c:714: connected=0;//connected_timeout=111; spartipp 5 Byte wenn send.. weg kommt.
   0973 C2*0D              2947 	clr	_connected
                    0975   2948 	C$fb_lpc922.c$716$1$5 ==.
                           2949 ;	..\fb_lpc922.c:716: }
   0975 02s0Ar2D           2950 	ljmp	00176$
   0978                    2951 00166$:
                    0978   2952 	C$fb_lpc922.c$721$2$5 ==.
                           2953 ;	..\fb_lpc922.c:721: else if(tpdu==GROUP_PDU){
   0978 EE                 2954 	mov	a,r6
   0979 60 03              2955 	jz	00261$
   097B 02s0Ar2D           2956 	ljmp	00176$
   097E                    2957 00261$:
                    097E   2958 	C$fb_lpc922.c$726$3$21 ==.
                           2959 ;	..\fb_lpc922.c:726: gapos = gapos_in_gat(telegramm[3], telegramm[4]);
   097E C0*0B              2960 	push	(_telegramm + 0x0004)
   0980 8C 82              2961 	mov	dpl,r4
   0982 12s06rA7           2962 	lcall	_gapos_in_gat
   0985 AF 82              2963 	mov	r7,dpl
   0987 15 81              2964 	dec	sp
                    0989   2965 	C$fb_lpc922.c$728$3$21 ==.
                           2966 ;	..\fb_lpc922.c:728: if (gapos != 0xFF)
   0989 BF FF 03           2967 	cjne	r7,#0xFF,00262$
   098C 02s0Ar2D           2968 	ljmp	00176$
   098F                    2969 00262$:
                    098F   2970 	C$fb_lpc922.c$730$4$22 ==.
                           2971 ;	..\fb_lpc922.c:730: atp = eeprom[ASSOCTABPTR];  // Association Table Pointer
   098F 90 1D 11           2972 	mov	dptr,#(_eeprom + 0x0011)
   0992 E4                 2973 	clr	a
   0993 93                 2974 	movc	a,@a+dptr
                    0994   2975 	C$fb_lpc922.c$731$4$22 ==.
                           2976 ;	..\fb_lpc922.c:731: assmax = atp + eeprom[atp] * 2;	// Erster Eintrag = Anzahl Eintraege
   0994 FE                 2977 	mov	r6,a
   0995 F5 82              2978 	mov	dpl,a
   0997 75 83 1D           2979 	mov	dph,#(_eeprom >> 8)
   099A E4                 2980 	clr	a
   099B 93                 2981 	movc	a,@a+dptr
   099C 25 E0              2982 	add	a,acc
   099E 2E                 2983 	add	a,r6
   099F FD                 2984 	mov	r5,a
                    09A0   2985 	C$fb_lpc922.c$735$4$22 ==.
                           2986 ;	..\fb_lpc922.c:735: for (asspos = atp + 1; asspos < assmax; asspos+=2)
   09A0 0E                 2987 	inc	r6
   09A1 A8*00              2988 	mov	r0,_bp
   09A3 08                 2989 	inc	r0
   09A4 74 C0              2990 	mov	a,#0xC0
   09A6 56                 2991 	anl	a,@r0
   09A7 FC                 2992 	mov	r4,a
   09A8 E4                 2993 	clr	a
   09A9 BC 80 01           2994 	cjne	r4,#0x80,00263$
   09AC 04                 2995 	inc	a
   09AD                    2996 00263$:
   09AD FC                 2997 	mov	r4,a
   09AE                    2998 00157$:
   09AE C3                 2999 	clr	c
   09AF EE                 3000 	mov	a,r6
   09B0 9D                 3001 	subb	a,r5
   09B1 40 03              3002 	jc	00265$
   09B3 02s0Ar2D           3003 	ljmp	00176$
   09B6                    3004 00265$:
                    09B6   3005 	C$fb_lpc922.c$739$5$23 ==.
                           3006 ;	..\fb_lpc922.c:739: if (gapos == eeprom[asspos])
   09B6 8E 82              3007 	mov	dpl,r6
   09B8 75 83 1D           3008 	mov	dph,#(_eeprom >> 8)
   09BB E4                 3009 	clr	a
   09BC 93                 3010 	movc	a,@a+dptr
   09BD FB                 3011 	mov	r3,a
   09BE EF                 3012 	mov	a,r7
   09BF B5 03 66           3013 	cjne	a,ar3,00159$
                    09C2   3014 	C$fb_lpc922.c$741$6$24 ==.
                           3015 ;	..\fb_lpc922.c:741: objno = eeprom[asspos + 1];	     // Objektnummer
   09C2 EE                 3016 	mov	a,r6
   09C3 04                 3017 	inc	a
   09C4 90 1D 00           3018 	mov	dptr,#_eeprom
   09C7 93                 3019 	movc	a,@a+dptr
                    09C8   3020 	C$fb_lpc922.c$742$6$24 ==.
                           3021 ;	..\fb_lpc922.c:742: objflags = read_objflags(objno); // Objekt Flags lesen
   09C8 FB                 3022 	mov	r3,a
   09C9 F5 82              3023 	mov	dpl,a
   09CB C0 07              3024 	push	ar7
   09CD C0 06              3025 	push	ar6
   09CF C0 05              3026 	push	ar5
   09D1 C0 04              3027 	push	ar4
   09D3 C0 03              3028 	push	ar3
   09D5 12s0Ar33           3029 	lcall	_read_objflags
   09D8 AA 82              3030 	mov	r2,dpl
   09DA D0 03              3031 	pop	ar3
   09DC D0 04              3032 	pop	ar4
   09DE D0 05              3033 	pop	ar5
   09E0 D0 06              3034 	pop	ar6
   09E2 D0 07              3035 	pop	ar7
                    09E4   3036 	C$fb_lpc922.c$745$6$24 ==.
                           3037 ;	..\fb_lpc922.c:745: if((apdu&0xC0)==WRITE_GROUP)
   09E4 EC                 3038 	mov	a,r4
   09E5 60 2E              3039 	jz	00150$
                    09E7   3040 	C$fb_lpc922.c$750$1$1 ==.
                           3041 ;	..\fb_lpc922.c:750: if ((objflags & 0x14) == 0x14)
   09E7 C0 04              3042 	push	ar4
   09E9 74 14              3043 	mov	a,#0x14
   09EB 5A                 3044 	anl	a,r2
   09EC FC                 3045 	mov	r4,a
   09ED BC 14 02           3046 	cjne	r4,#0x14,00269$
   09F0 80 04              3047 	sjmp	00270$
   09F2                    3048 00269$:
   09F2 D0 04              3049 	pop	ar4
   09F4 80 1F              3050 	sjmp	00150$
   09F6                    3051 00270$:
   09F6 D0 04              3052 	pop	ar4
                    09F8   3053 	C$fb_lpc922.c$751$7$25 ==.
                           3054 ;	..\fb_lpc922.c:751: write_value_req(objno);
   09F8 8B 82              3055 	mov	dpl,r3
   09FA C0 07              3056 	push	ar7
   09FC C0 06              3057 	push	ar6
   09FE C0 05              3058 	push	ar5
   0A00 C0 04              3059 	push	ar4
   0A02 C0 03              3060 	push	ar3
   0A04 C0 02              3061 	push	ar2
   0A06 12s00r00           3062 	lcall	_write_value_req
   0A09 D0 02              3063 	pop	ar2
   0A0B D0 03              3064 	pop	ar3
   0A0D D0 04              3065 	pop	ar4
   0A0F D0 05              3066 	pop	ar5
   0A11 D0 06              3067 	pop	ar6
   0A13 D0 07              3068 	pop	ar7
   0A15                    3069 00150$:
                    0A15   3070 	C$fb_lpc922.c$753$6$24 ==.
                           3071 ;	..\fb_lpc922.c:753: if(apdu==READ_GROUP_REQUEST)
   0A15 A8*00              3072 	mov	r0,_bp
   0A17 08                 3073 	inc	r0
   0A18 E6                 3074 	mov	a,@r0
   0A19 70 0D              3075 	jnz	00159$
                    0A1B   3076 	C$fb_lpc922.c$755$7$26 ==.
                           3077 ;	..\fb_lpc922.c:755: if ((objflags & 0x0C) == 0x0C)
   0A1B 53 02 0C           3078 	anl	ar2,#0x0C
   0A1E BA 0C 0C           3079 	cjne	r2,#0x0C,00176$
                    0A21   3080 	C$fb_lpc922.c$756$7$26 ==.
                           3081 ;	..\fb_lpc922.c:756: read_value_req(objno);	// Objektwert lesen und read_value_response senden	00000000 00000000
   0A21 8B 82              3082 	mov	dpl,r3
   0A23 12s00r00           3083 	lcall	_read_value_req
                    0A26   3084 	C$fb_lpc922.c$757$7$26 ==.
                           3085 ;	..\fb_lpc922.c:757: break;
   0A26 80 05              3086 	sjmp	00176$
   0A28                    3087 00159$:
                    0A28   3088 	C$fb_lpc922.c$735$4$22 ==.
                           3089 ;	..\fb_lpc922.c:735: for (asspos = atp + 1; asspos < assmax; asspos+=2)
   0A28 0E                 3090 	inc	r6
   0A29 0E                 3091 	inc	r6
   0A2A 02s09rAE           3092 	ljmp	00157$
   0A2D                    3093 00176$:
   0A2D 85*00 81           3094 	mov	sp,_bp
   0A30 D0*00              3095 	pop	_bp
                    0A32   3096 	C$fb_lpc922.c$764$1$1 ==.
                    0A32   3097 	XG$process_tel$0$0 ==.
   0A32 22                 3098 	ret
                           3099 ;------------------------------------------------------------
                           3100 ;Allocation info for local variables in function 'read_objflags'
                           3101 ;------------------------------------------------------------
                           3102 ;objno                     Allocated to registers r7 
                           3103 ;------------------------------------------------------------
                    0A33   3104 	G$read_objflags$0$0 ==.
                    0A33   3105 	C$fb_lpc922.c$813$1$1 ==.
                           3106 ;	..\fb_lpc922.c:813: unsigned char read_objflags(unsigned char objno)
                           3107 ;	-----------------------------------------
                           3108 ;	 function read_objflags
                           3109 ;	-----------------------------------------
   0A33                    3110 _read_objflags:
   0A33 AF 82              3111 	mov	r7,dpl
                    0A35   3112 	C$fb_lpc922.c$816$1$1 ==.
                           3113 ;	..\fb_lpc922.c:816: return(eeprom[eeprom[COMMSTABPTR]+3+objno+objno+objno]);
   0A35 90 1D 12           3114 	mov	dptr,#(_eeprom + 0x0012)
   0A38 E4                 3115 	clr	a
   0A39 93                 3116 	movc	a,@a+dptr
   0A3A FE                 3117 	mov	r6,a
   0A3B 0E                 3118 	inc	r6
   0A3C 0E                 3119 	inc	r6
   0A3D 0E                 3120 	inc	r6
   0A3E EF                 3121 	mov	a,r7
   0A3F 2E                 3122 	add	a,r6
   0A40 2F                 3123 	add	a,r7
   0A41 2F                 3124 	add	a,r7
   0A42 90 1D 00           3125 	mov	dptr,#_eeprom
   0A45 93                 3126 	movc	a,@a+dptr
                    0A46   3127 	C$fb_lpc922.c$817$1$1 ==.
                    0A46   3128 	XG$read_objflags$0$0 ==.
   0A46 F5 82              3129 	mov	dpl,a
   0A48 22                 3130 	ret
                           3131 ;------------------------------------------------------------
                           3132 ;Allocation info for local variables in function 'restart_hw'
                           3133 ;------------------------------------------------------------
                    0A49   3134 	G$restart_hw$0$0 ==.
                    0A49   3135 	C$fb_lpc922.c$852$1$1 ==.
                           3136 ;	..\fb_lpc922.c:852: void restart_hw(void)
                           3137 ;	-----------------------------------------
                           3138 ;	 function restart_hw
                           3139 ;	-----------------------------------------
   0A49                    3140 _restart_hw:
                    0A49   3141 	C$fb_lpc922.c$854$1$1 ==.
                           3142 ;	..\fb_lpc922.c:854: DIVM=0;			// Taktferquenz nicht teilen -> volles Tempo
   0A49 75 95 00           3143 	mov	_DIVM,#0x00
                    0A4C   3144 	C$fb_lpc922.c$856$1$1 ==.
                           3145 ;	..\fb_lpc922.c:856: P1M1=0x14;		// Port 1 auf quasi-bidirektional,
   0A4C 75 91 14           3146 	mov	_P1M1,#0x14
                    0A4F   3147 	C$fb_lpc922.c$857$1$1 ==.
                           3148 ;	..\fb_lpc922.c:857: P1M2=0x4C;		// ausser P1.2(T0 als PWM Ausgang)=open-drain,
   0A4F 75 92 4C           3149 	mov	_P1M2,#0x4C
                    0A52   3150 	C$fb_lpc922.c$861$1$1 ==.
                           3151 ;	..\fb_lpc922.c:861: FBOUTC=0;		// Bus-Ausgang auf low
   0A52 C2 96              3152 	clr	_P1_6
                    0A54   3153 	C$fb_lpc922.c$863$1$1 ==.
                           3154 ;	..\fb_lpc922.c:863: TMOD=0x21;		// Timer 0 als 16-Bit Timer, Timer 1 als 8 Bit autoreload
   0A54 75 89 21           3155 	mov	_TMOD,#0x21
                    0A57   3156 	C$fb_lpc922.c$864$1$1 ==.
                           3157 ;	..\fb_lpc922.c:864: TAMOD=0x00;
   0A57 75 8F 00           3158 	mov	_TAMOD,#0x00
                    0A5A   3159 	C$fb_lpc922.c$865$1$1 ==.
                           3160 ;	..\fb_lpc922.c:865: TR0=0;			// Timer 0 (zur Verwendung in app) zunaechst stoppen
   0A5A C2 8C              3161 	clr	_TCON_4
                    0A5C   3162 	C$fb_lpc922.c$866$1$1 ==.
                           3163 ;	..\fb_lpc922.c:866: TR1=0;			// Timer 1 (Empfangs-Timer, nicht in app verwenden!) zunaechst stoppen
   0A5C C2 8E              3164 	clr	_TCON_6
                    0A5E   3165 	C$fb_lpc922.c$867$1$1 ==.
                           3166 ;	..\fb_lpc922.c:867: TH1=128;		// Timer 1 auf 104us/3
   0A5E 75 8D 80           3167 	mov	_TH1,#0x80
                    0A61   3168 	C$fb_lpc922.c$868$1$1 ==.
                           3169 ;	..\fb_lpc922.c:868: TL1=128;
   0A61 75 8B 80           3170 	mov	_TL1,#0x80
                    0A64   3171 	C$fb_lpc922.c$869$1$1 ==.
                           3172 ;	..\fb_lpc922.c:869: TF1=0;
   0A64 C2 8F              3173 	clr	_TCON_7
                    0A66   3174 	C$fb_lpc922.c$876$1$1 ==.
                           3175 ;	..\fb_lpc922.c:876: interrupted=0;	// wird durch die interrupt-routine auf 1 gesetzt
   0A66 C2*01              3176 	clr	_interrupted
                    0A68   3177 	C$fb_lpc922.c$877$1$1 ==.
                           3178 ;	..\fb_lpc922.c:877: IEN0=0x80;// mit 0x80 sind die unten auskommentierten erschlagen.
   0A68 75 A8 80           3179 	mov	_IEN0,#0x80
                    0A6B   3180 	C$fb_lpc922.c$878$1$1 ==.
                           3181 ;	..\fb_lpc922.c:878: IEN1=0x00;
   0A6B 75 E8 00           3182 	mov	_IEN1,#0x00
                    0A6E   3183 	C$fb_lpc922.c$885$1$1 ==.
                           3184 ;	..\fb_lpc922.c:885: IP0=0x04;		// hÃ¶chste PrioritÃ¤t fuer ext1
   0A6E 75 B8 04           3185 	mov	_IP0,#0x04
                    0A71   3186 	C$fb_lpc922.c$886$1$1 ==.
                           3187 ;	..\fb_lpc922.c:886: IP0H=0x0C;
   0A71 75 B7 0C           3188 	mov	_IP0H,#0x0C
                    0A74   3189 	C$fb_lpc922.c$887$1$1 ==.
                           3190 ;	..\fb_lpc922.c:887: IT1=1;			// Interrupt 1 flankengetriggert=1
   0A74 D2 8A              3191 	setb	_TCON_2
                    0A76   3192 	C$fb_lpc922.c$889$1$1 ==.
                           3193 ;	..\fb_lpc922.c:889: status60=0x2E;	// Status-Byte (steht normal im userram an 0x60)
   0A76 75*2E 2E           3194 	mov	_status60,#0x2E
                    0A79   3195 	C$fb_lpc922.c$891$1$1 ==.
                           3196 ;	..\fb_lpc922.c:891: ack=0;			// ack und nack flag zurÃ¼cksetzen
   0A79 C2*03              3197 	clr	_ack
                    0A7B   3198 	C$fb_lpc922.c$892$1$1 ==.
                           3199 ;	..\fb_lpc922.c:892: nack=0;
   0A7B C2*04              3200 	clr	_nack
                    0A7D   3201 	C$fb_lpc922.c$893$1$1 ==.
                           3202 ;	..\fb_lpc922.c:893: send_ack=0;
   0A7D C2*0B              3203 	clr	_send_ack
                    0A7F   3204 	C$fb_lpc922.c$894$1$1 ==.
                           3205 ;	..\fb_lpc922.c:894: send_nack=0;
   0A7F C2*0C              3206 	clr	_send_nack
                    0A81   3207 	C$fb_lpc922.c$895$1$1 ==.
                           3208 ;	..\fb_lpc922.c:895: tel_arrived=0;	// kein Telegramm empfangen
   0A81 C2*06              3209 	clr	_tel_arrived
                    0A83   3210 	C$fb_lpc922.c$896$1$1 ==.
                           3211 ;	..\fb_lpc922.c:896: auto_ack=1;		// empfangene Telegramme automatisch mit ack bestaetigen
   0A83 D2*08              3212 	setb	_auto_ack
                    0A85   3213 	C$fb_lpc922.c$897$1$1 ==.
                           3214 ;	..\fb_lpc922.c:897: tx_nextwrite=0;	// Zeiger auf naechste zu schreibende Objektnr. in tx_buffer
   0A85 75*2C 00           3215 	mov	_tx_nextwrite,#0x00
                    0A88   3216 	C$fb_lpc922.c$898$1$1 ==.
                           3217 ;	..\fb_lpc922.c:898: tx_nextsend=0;	// Zeiger auf naechste zu sendende Objektnr. in tx_buffer
   0A88 75*2D 00           3218 	mov	_tx_nextsend,#0x00
                    0A8B   3219 	C$fb_lpc922.c$899$1$1 ==.
                           3220 ;	..\fb_lpc922.c:899: pcount=0;		// Paketzaehler initialisieren
   0A8B 75*02 00           3221 	mov	_pcount,#0x00
                    0A8E   3222 	C$fb_lpc922.c$900$1$1 ==.
                           3223 ;	..\fb_lpc922.c:900: inc_pcount=0;
   0A8E C2*0E              3224 	clr	_inc_pcount
                    0A90   3225 	C$fb_lpc922.c$901$1$1 ==.
                           3226 ;	..\fb_lpc922.c:901: connected=0;	// keine Verbindung
   0A90 C2*0D              3227 	clr	_connected
                    0A92   3228 	C$fb_lpc922.c$903$1$1 ==.
                           3229 ;	..\fb_lpc922.c:903: init_rx(0);		// Empfang initialisieren
   0A92 C2 F0              3230 	clr	b[0]
   0A94 85 F0*00           3231 	mov	bits,b
   0A97 12s06r0F           3232 	lcall	_init_rx
                    0A9A   3233 	C$fb_lpc922.c$904$1$1 ==.
                    0A9A   3234 	XG$restart_hw$0$0 ==.
   0A9A 22                 3235 	ret
                           3236 	.area CSEG    (CODE)
                           3237 	.area CONST   (CODE)
                    1D00   3238 G$eeprom$0$0 == 0x1d00
                    1D00   3239 _eeprom	=	0x1d00
                    0000   3240 G$priotable$0$0 == .
   0000                    3241 _priotable:
   0000 B0                 3242 	.db #0xB0	; 176
   0001 B8                 3243 	.db #0xB8	; 184
   0002 B4                 3244 	.db #0xB4	; 180
   0003 BC                 3245 	.db #0xBC	; 188
                           3246 	.area XINIT   (CODE)
                           3247 	.area CABS    (ABS,CODE)
